/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as algoliasearchProxy from 'algoliasearch/index';
import * as encodeProxy from 'querystring-es3/encode';
import { VERSION as AngularVersion } from '@angular/core';
import { VERSION } from './version';
// AOT + Rollup workaround
// https://github.com/rollup/rollup/issues/1267#issuecomment-296395734
/** @type {?} */
var algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/** @type {?} */
var encode = encodeProxy.default || encodeProxy;
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRAlgoliaClient(_a) {
    var httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey;
    console.warn('`createSSRAlgoliaClient` is deprecated in favor of `createSSRSearchClient` to be plugged to `searchClient`.');
    return function (_, appId, apiKey) {
        return createSSRSearchClient({
            appId: appId,
            apiKey: apiKey,
            httpClient: httpClient,
            HttpHeaders: HttpHeaders,
            transferState: transferState,
            makeStateKey: makeStateKey,
        });
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRSearchClient(_a) {
    var appId = _a.appId, apiKey = _a.apiKey, httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey;
    /** @type {?} */
    var client = algoliasearch(appId, apiKey, {});
    client.addAlgoliaAgent("angular (" + AngularVersion.full + ")");
    client.addAlgoliaAgent("angular-instantsearch (" + VERSION + ")");
    client.addAlgoliaAgent("angular-instantsearch-server (" + VERSION + ")");
    client._request = function (rawUrl, opts) {
        /** @type {?} */
        var headers = new HttpHeaders();
        headers = headers.set('content-type', opts.method === 'POST'
            ? 'application/x-www-form-urlencoded'
            : 'application/json');
        headers = headers.set('accept', 'application/json');
        /** @type {?} */
        var url = rawUrl + (rawUrl.includes('?') ? '&' : '?') + encode(opts.headers);
        /** @type {?} */
        var transferStateKey = makeStateKey("ngais(" + opts.body + ")");
        if (transferState.hasKey(transferStateKey)) {
            /** @type {?} */
            var resp = JSON.parse(transferState.get(transferStateKey, {}));
            return Promise.resolve({
                statusCode: resp.status,
                body: resp.body,
                headers: resp.headers,
            });
        }
        return new Promise(function (resolve, reject) {
            httpClient
                .request(opts.method, url, {
                headers: headers,
                body: opts.body,
                observe: 'response',
            })
                .subscribe(function (resp) {
                transferState.set(transferStateKey, JSON.stringify(resp));
                resolve({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers,
                });
            }, function (resp) {
                return reject({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers,
                });
            });
        });
    };
    return client;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNzci1hbGdvbGlhLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImNyZWF0ZS1zc3ItYWxnb2xpYS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sS0FBSyxrQkFBa0IsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEtBQUssV0FBVyxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLElBQUksY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7Ozs7SUFLOUIsYUFBYSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sSUFBSSxrQkFBa0I7O0lBQ2hFLE1BQU0sR0FBRyxXQUFXLENBQUMsT0FBTyxJQUFJLFdBQVc7Ozs7O0FBRWpELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxFQUt0QztRQUpDLDBCQUFVLEVBQ1YsNEJBQVcsRUFDWCxnQ0FBYSxFQUNiLDhCQUFZO0lBRVosT0FBTyxDQUFDLElBQUksQ0FDViw2R0FBNkcsQ0FDOUcsQ0FBQztJQUVGLE9BQU8sVUFBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU07UUFDdEIsT0FBQSxxQkFBcUIsQ0FBQztZQUNwQixLQUFLLE9BQUE7WUFDTCxNQUFNLFFBQUE7WUFDTixVQUFVLFlBQUE7WUFDVixXQUFXLGFBQUE7WUFDWCxhQUFhLGVBQUE7WUFDYixZQUFZLGNBQUE7U0FDYixDQUFDO0lBUEYsQ0FPRSxDQUFDO0FBQ1AsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsRUFPckM7UUFOQyxnQkFBSyxFQUNMLGtCQUFNLEVBQ04sMEJBQVUsRUFDViw0QkFBVyxFQUNYLGdDQUFhLEVBQ2IsOEJBQVk7O1FBRU4sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQztJQUMvQyxNQUFNLENBQUMsZUFBZSxDQUFDLGNBQVksY0FBYyxDQUFDLElBQUksTUFBRyxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLGVBQWUsQ0FBQyw0QkFBMEIsT0FBTyxNQUFHLENBQUMsQ0FBQztJQUM3RCxNQUFNLENBQUMsZUFBZSxDQUFDLG1DQUFpQyxPQUFPLE1BQUcsQ0FBQyxDQUFDO0lBRXBFLE1BQU0sQ0FBQyxRQUFRLEdBQUcsVUFBQyxNQUFNLEVBQUUsSUFBSTs7WUFDekIsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFO1FBRS9CLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUNuQixjQUFjLEVBQ2QsSUFBSSxDQUFDLE1BQU0sS0FBSyxNQUFNO1lBQ3BCLENBQUMsQ0FBQyxtQ0FBbUM7WUFDckMsQ0FBQyxDQUFDLGtCQUFrQixDQUN2QixDQUFDO1FBRUYsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLGtCQUFrQixDQUFDLENBQUM7O1lBRTlDLEdBQUcsR0FDUCxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDOztZQUU5RCxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsV0FBUyxJQUFJLENBQUMsSUFBSSxNQUFHLENBQUM7UUFFNUQsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7O2dCQUNwQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQztnQkFDckIsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLFVBQVU7aUJBQ1AsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUN6QixPQUFPLFNBQUE7Z0JBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLE9BQU8sRUFBRSxVQUFVO2FBQ3BCLENBQUM7aUJBQ0QsU0FBUyxDQUNSLFVBQUEsSUFBSTtnQkFDRixhQUFhLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDMUQsT0FBTyxDQUFDO29CQUNOLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTTtvQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztpQkFDdEIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxFQUNELFVBQUEsSUFBSTtnQkFDRixPQUFBLE1BQU0sQ0FBQztvQkFDTCxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU07b0JBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87aUJBQ3RCLENBQUM7WUFKRixDQUlFLENBQ0wsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFsZ29saWFzZWFyY2hQcm94eSBmcm9tICdhbGdvbGlhc2VhcmNoL2luZGV4JztcbmltcG9ydCAqIGFzIGVuY29kZVByb3h5IGZyb20gJ3F1ZXJ5c3RyaW5nLWVzMy9lbmNvZGUnO1xuaW1wb3J0IHsgVkVSU0lPTiBhcyBBbmd1bGFyVmVyc2lvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4vdmVyc2lvbic7XG5cbi8vIEFPVCArIFJvbGx1cCB3b3JrYXJvdW5kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9pc3N1ZXMvMTI2NyNpc3N1ZWNvbW1lbnQtMjk2Mzk1NzM0XG5cbmNvbnN0IGFsZ29saWFzZWFyY2ggPSBhbGdvbGlhc2VhcmNoUHJveHkuZGVmYXVsdCB8fCBhbGdvbGlhc2VhcmNoUHJveHk7XG5jb25zdCBlbmNvZGUgPSBlbmNvZGVQcm94eS5kZWZhdWx0IHx8IGVuY29kZVByb3h5O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU1NSQWxnb2xpYUNsaWVudCh7XG4gIGh0dHBDbGllbnQsXG4gIEh0dHBIZWFkZXJzLFxuICB0cmFuc2ZlclN0YXRlLFxuICBtYWtlU3RhdGVLZXksXG59KSB7XG4gIGNvbnNvbGUud2FybihcbiAgICAnYGNyZWF0ZVNTUkFsZ29saWFDbGllbnRgIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgYGNyZWF0ZVNTUlNlYXJjaENsaWVudGAgdG8gYmUgcGx1Z2dlZCB0byBgc2VhcmNoQ2xpZW50YC4nXG4gICk7XG5cbiAgcmV0dXJuIChfLCBhcHBJZCwgYXBpS2V5KSA9PlxuICAgIGNyZWF0ZVNTUlNlYXJjaENsaWVudCh7XG4gICAgICBhcHBJZCxcbiAgICAgIGFwaUtleSxcbiAgICAgIGh0dHBDbGllbnQsXG4gICAgICBIdHRwSGVhZGVycyxcbiAgICAgIHRyYW5zZmVyU3RhdGUsXG4gICAgICBtYWtlU3RhdGVLZXksXG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTU1JTZWFyY2hDbGllbnQoe1xuICBhcHBJZCxcbiAgYXBpS2V5LFxuICBodHRwQ2xpZW50LFxuICBIdHRwSGVhZGVycyxcbiAgdHJhbnNmZXJTdGF0ZSxcbiAgbWFrZVN0YXRlS2V5LFxufSkge1xuICBjb25zdCBjbGllbnQgPSBhbGdvbGlhc2VhcmNoKGFwcElkLCBhcGlLZXksIHt9KTtcbiAgY2xpZW50LmFkZEFsZ29saWFBZ2VudChgYW5ndWxhciAoJHtBbmd1bGFyVmVyc2lvbi5mdWxsfSlgKTtcbiAgY2xpZW50LmFkZEFsZ29saWFBZ2VudChgYW5ndWxhci1pbnN0YW50c2VhcmNoICgke1ZFUlNJT059KWApO1xuICBjbGllbnQuYWRkQWxnb2xpYUFnZW50KGBhbmd1bGFyLWluc3RhbnRzZWFyY2gtc2VydmVyICgke1ZFUlNJT059KWApO1xuXG4gIGNsaWVudC5fcmVxdWVzdCA9IChyYXdVcmwsIG9wdHMpID0+IHtcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xuXG4gICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KFxuICAgICAgJ2NvbnRlbnQtdHlwZScsXG4gICAgICBvcHRzLm1ldGhvZCA9PT0gJ1BPU1QnXG4gICAgICAgID8gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgICAgOiAnYXBwbGljYXRpb24vanNvbidcbiAgICApO1xuXG4gICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdhY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuXG4gICAgY29uc3QgdXJsID1cbiAgICAgIHJhd1VybCArIChyYXdVcmwuaW5jbHVkZXMoJz8nKSA/ICcmJyA6ICc/JykgKyBlbmNvZGUob3B0cy5oZWFkZXJzKTtcblxuICAgIGNvbnN0IHRyYW5zZmVyU3RhdGVLZXkgPSBtYWtlU3RhdGVLZXkoYG5nYWlzKCR7b3B0cy5ib2R5fSlgKTtcblxuICAgIGlmICh0cmFuc2ZlclN0YXRlLmhhc0tleSh0cmFuc2ZlclN0YXRlS2V5KSkge1xuICAgICAgY29uc3QgcmVzcCA9IEpTT04ucGFyc2UodHJhbnNmZXJTdGF0ZS5nZXQodHJhbnNmZXJTdGF0ZUtleSwge30pKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICBzdGF0dXNDb2RlOiByZXNwLnN0YXR1cyxcbiAgICAgICAgYm9keTogcmVzcC5ib2R5LFxuICAgICAgICBoZWFkZXJzOiByZXNwLmhlYWRlcnMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaHR0cENsaWVudFxuICAgICAgICAucmVxdWVzdChvcHRzLm1ldGhvZCwgdXJsLCB7XG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICBib2R5OiBvcHRzLmJvZHksXG4gICAgICAgICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyxcbiAgICAgICAgfSlcbiAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICByZXNwID0+IHtcbiAgICAgICAgICAgIHRyYW5zZmVyU3RhdGUuc2V0KHRyYW5zZmVyU3RhdGVLZXksIEpTT04uc3RyaW5naWZ5KHJlc3ApKTtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwLnN0YXR1cyxcbiAgICAgICAgICAgICAgYm9keTogcmVzcC5ib2R5LFxuICAgICAgICAgICAgICBoZWFkZXJzOiByZXNwLmhlYWRlcnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc3AgPT5cbiAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICAgICAgICBib2R5OiByZXNwLmJvZHksXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3AuaGVhZGVycyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIGNsaWVudDtcbn1cbiJdfQ==