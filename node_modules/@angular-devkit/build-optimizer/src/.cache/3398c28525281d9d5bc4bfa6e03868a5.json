{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/tree/Tree.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/tree/Tree.js","mtime":1581861142313},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.function.name\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Base = _interopRequireDefault(require(\"../base/Base\"));\n\nvar _Components = _interopRequireDefault(require(\"../Components\"));\n\nvar _NestedComponent2 = _interopRequireDefault(require(\"../nested/NestedComponent\"));\n\nvar _Evaluator = _interopRequireDefault(require(\"../../utils/Evaluator\"));\n\nvar _templates = _interopRequireDefault(require(\"./templates\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Node =\n/*#__PURE__*/\nfunction () {\n  function Node(parent) {\n    var _this = this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$data = _ref.data,\n        data = _ref$data === void 0 ? {} : _ref$data,\n        _ref$children = _ref.children,\n        children = _ref$children === void 0 ? [] : _ref$children;\n\n    var isNew = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, Node);\n\n    this.parent = parent;\n    this.persistentData = data;\n    this.children = children.map(function (child) {\n      return new Node(_this, child, false);\n    });\n    this.new = isNew;\n    this.revertAvailable = false;\n    this.editing = false;\n    this.collapsed = false;\n    this.components = [];\n    this.resetData();\n  }\n\n  _createClass(Node, [{\n    key: \"eachChild\",\n    value: function eachChild(iteratee) {\n      iteratee(this);\n      this.children.forEach(function (child) {\n        return child.eachChild(iteratee);\n      });\n      return this;\n    }\n  }, {\n    key: \"getComponents\",\n    value: function getComponents() {\n      return this.children.reduce(function (components, child) {\n        return components.concat(child.getComponents());\n      }, this.components);\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild() {\n      if (this.new) {\n        return null;\n      }\n\n      var child = new Node(this);\n      this.children = this.children.concat(child);\n      return child;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(childToRemove) {\n      if (!this.new) {\n        this.children = this.children.filter(function (child) {\n          return child !== childToRemove;\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"edit\",\n    value: function edit() {\n      if (this.new) {\n        return this;\n      }\n\n      this.editing = true;\n      return this.resetData();\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      if (this.changing) {\n        if (this.new) {\n          this.new = false;\n        } else {\n          this.editing = false;\n          this.revertAvailable = true;\n        }\n\n        this.commitData();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.new) {\n        this.remove();\n      } else if (this.editing) {\n        this.editing = false;\n        this.resetData();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.parent.removeChild(this);\n      this.parent = null;\n      return this;\n    }\n  }, {\n    key: \"revert\",\n    value: function revert() {\n      if (!this.revertAvailable) {\n        return this;\n      }\n\n      this.data = this.previousData;\n      return this.commitData();\n    }\n  }, {\n    key: \"commitData\",\n    value: function commitData() {\n      this.previousData = _lodash.default.clone(this.persistentData);\n      this.persistentData = _lodash.default.cloneDeep(this.data);\n      return this;\n    }\n  }, {\n    key: \"resetData\",\n    value: function resetData() {\n      this.data = _lodash.default.cloneDeep(this.persistentData);\n      return this;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.new ? null // Check the special case for empty root node.\n      : {\n        data: _lodash.default.cloneDeep(this.persistentData),\n        children: this.children.filter(function (child) {\n          return !child.new;\n        }).map(function (child) {\n          return child.value;\n        })\n      };\n    }\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.parent === null;\n    }\n  }, {\n    key: \"changing\",\n    get: function get() {\n      return this.new || this.editing;\n    }\n  }, {\n    key: \"hasChangingChildren\",\n    get: function get() {\n      return this.changin || this.children.some(function (child) {\n        return child.hasChangingChildren;\n      });\n    }\n  }]);\n\n  return Node;\n}();\n\nvar TreeComponent =\n/*#__PURE__*/\nfunction (_NestedComponent) {\n  _inherits(TreeComponent, _NestedComponent);\n\n  _createClass(TreeComponent, null, [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _NestedComponent2.default.schema.apply(_NestedComponent2.default, [{\n        label: 'Tree',\n        key: 'tree',\n        type: 'tree',\n        clearOnHide: true,\n        input: true,\n        tree: true,\n        components: [],\n        template: {\n          edit: this.defaultEditTemplate,\n          view: this.defaultViewTemplate,\n          child: this.defaultChildTemplate,\n          children: this.defaultChildrenTemplate\n        }\n      }].concat(extend));\n    }\n    /* Ignore builder until we work out the kinks in builder mode.\n    static get builderInfo() {\n      return {\n        title: 'Tree',\n        icon: 'fa fa-indent',\n        group: 'data',\n        weight: 30,\n        schema: TreeComponent.schema(),\n      };\n    }\n    */\n\n  }, {\n    key: \"defaultEditTemplate\",\n    get: function get() {\n      return \"{% if (!node.isRoot) { %}\\n  <div class=\\\"list-group-item\\\">\\n{% } else { %}\\n  <li class=\\\"list-group-item\\\">\\n{% } %}\\n  <div class=\\\"node-edit\\\">\\n    <div node-edit-form></div>\\n    {% if (!instance.options.readOnly) { %}\\n      <div class=\\\"node-actions\\\">\\n        <button class=\\\"btn btn-primary saveNode\\\">Save</button>\\n        <button class=\\\"btn btn-danger cancelNode\\\">Cancel</button>\\n      </div>\\n    {% } %}\\n  </div>\\n{% if (!node.isRoot) { %}\\n  </div>\\n{% } else { %}\\n  </li>\\n{% } %}\";\n    }\n  }, {\n    key: \"defaultChildTemplate\",\n    get: function get() {\n      return \"{% if (node.isRoot) { %}\\n  <div class=\\\"list-group-item\\\"></div>\\n{% } else { %}\\n  <li class=\\\"list-group-item col-sm-12\\\"></li>\\n{% } %}\";\n    }\n  }, {\n    key: \"defaultChildrenTemplate\",\n    get: function get() {\n      return '<ul class=\"tree-listgroup list-group row\"></ul>';\n    }\n  }, {\n    key: \"defaultViewTemplate\",\n    get: function get() {\n      return \"<div class=\\\"row\\\">\\n  {% util.eachComponent(components, function(component) { %}\\n    <div class=\\\"col-sm-2\\\">\\n      {{ getView(component, nodeData[component.key]) }}\\n    </div>\\n  {% }) %}\\n  <div class=\\\"col-sm-3\\\">\\n    <div class=\\\"btn-group pull-right\\\">\\n      <button class='btn btn-default btn-sm toggleNode'>{{ node.collapsed ? 'Expand : 'Collapse' }}</button>\\n      {% if (!instance.options.readOnly) { %}\\n        <button class=\\\"btn btn-default btn-sm addChild\\\">Add</button>\\n        <button class=\\\"btn btn-default btn-sm editNode\\\">Edit</button>\\n        <button class=\\\"btn btn-danger btn-sm removeNode\\\">Delete</button>\\n        {% if (node.revertAvailable) { %}\\n          <button class=\\\"btn btn-danger btn-sm revertNode\\\">Revert</button>\\n        {% } %}\\n      {% } %}\\n    </div>\\n  </div>\\n</div>\";\n    }\n  }]);\n\n  function TreeComponent(component, options, data) {\n    var _this2$component$temp, _this2$component$temp2, _this2$component$temp3, _this2$component$temp4;\n\n    var _this2;\n\n    _classCallCheck(this, TreeComponent);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TreeComponent).call(this, component, options, data));\n    _this2.type = 'tree';\n    _this2.changingNodeClassName = 'formio-component-tree-node-changing';\n    _this2.templates = {\n      edit: _Evaluator.default.noeval ? _templates.default.edit : _Evaluator.default.template(((_this2$component$temp = _this2.component.template) === null || _this2$component$temp === void 0 ? void 0 : _this2$component$temp.edit) || _templates.default.edit),\n      view: _Evaluator.default.noeval ? _templates.default.view : _Evaluator.default.template(((_this2$component$temp2 = _this2.component.template) === null || _this2$component$temp2 === void 0 ? void 0 : _this2$component$temp2.view) || _templates.default.view),\n      child: _Evaluator.default.noeval ? _templates.default.child : _Evaluator.default.template(((_this2$component$temp3 = _this2.component.template) === null || _this2$component$temp3 === void 0 ? void 0 : _this2$component$temp3.child) || _templates.default.child),\n      children: _Evaluator.default.noeval ? _templates.default.children : _Evaluator.default.template(((_this2$component$temp4 = _this2.component.template) === null || _this2$component$temp4 === void 0 ? void 0 : _this2$component$temp4.children) || _templates.default.children)\n    };\n    return _this2;\n  }\n\n  _createClass(TreeComponent, [{\n    key: \"getComponents\",\n    value: function getComponents() {\n      var _this$tree;\n\n      return ((_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.getComponents()) || _get(_getPrototypeOf(TreeComponent.prototype), \"getComponents\", this).call(this);\n    }\n  }, {\n    key: \"collapseText\",\n    value: function collapseText(node) {\n      return node.collapsed ? this.t('Expand') : this.t('Collapse');\n    }\n  }, {\n    key: \"build\",\n    value: function build(state) {\n      if (this.options.builder) {\n        return _get(_getPrototypeOf(TreeComponent.prototype), \"build\", this).call(this, state, true);\n      }\n\n      this.createElement();\n      this.createLabel(this.element);\n      this.setRoot();\n      this.buildTree();\n      this.createDescription(this.element);\n      this.errorContainer = this.ce('div', {\n        class: 'has-error'\n      });\n      this.element.appendChild(this.errorContainer);\n      this.attachLogic();\n    }\n  }, {\n    key: \"buildTree\",\n    value: function buildTree() {\n      if (this.options.builder) {\n        return;\n      }\n\n      var treeElement = this.buildNode(this.tree);\n\n      if (this.treeElement) {\n        this.element.replaceChild(treeElement, this.treeElement);\n      } else {\n        this.appendTo(treeElement, this.element);\n      }\n\n      this.treeElement = treeElement;\n    }\n  }, {\n    key: \"buildNodes\",\n    value: function buildNodes(parent) {\n      var _this3 = this;\n\n      var childNodes = parent.children.map(this.buildNode.bind(this));\n      var element = this.renderElement(this.templates.children, {\n        node: parent,\n        nodeData: parent.persistentData,\n        data: this.data,\n        components: this.component.components,\n        instance: this,\n        getView: function getView(component, data) {\n          return _Components.default.create(component, _this3.options, data, true).getView(data);\n        }\n      });\n      this.appendChild(element, childNodes);\n\n      if (parent.hasChangingChildren) {\n        this.addClass(element, this.changingNodeClassName);\n      } else {\n        this.removeClass(element, this.changingNodeClassName);\n      }\n\n      return element;\n    }\n  }, {\n    key: \"buildNode\",\n    value: function buildNode(node) {\n      var _this4 = this;\n\n      var element = this.renderElement(this.templates.child, {\n        node: node,\n        nodeData: node.persistentData,\n        data: this.data,\n        components: this.component.components,\n        instance: this,\n        getView: function getView(component, data) {\n          return _Components.default.create(component, _this4.options, data, true).getView(data);\n        }\n      });\n\n      if (node.changing) {\n        node.components = this.component.components.map(function (comp, index) {\n          var component = _lodash.default.cloneDeep(comp);\n\n          var options = _lodash.default.clone(_this4.options);\n\n          options.row = \"\".concat(_this4.row, \"-\").concat(index);\n          options.name += \"[\".concat(index, \"]\");\n\n          var instance = _this4.createComponent(component, options, node.data);\n\n          instance.node = node;\n          return instance;\n        });\n        this.renderTemplateToElement(element, this.templates.edit, {\n          node: node,\n          nodeData: node.data,\n          data: this.data,\n          components: this.component.components,\n          instance: this\n        }, [{\n          class: 'saveNode',\n          event: 'click',\n          action: this.saveNode.bind(this, node)\n        }, {\n          class: 'cancelNode',\n          event: 'click',\n          action: this.cancelNode.bind(this, node)\n        }]);\n        var editForm = node.components.map(function (comp) {\n          return comp.element;\n        });\n        element.querySelectorAll('[node-edit-form]').forEach(function (element) {\n          return _this4.appendChild(element, editForm);\n        });\n      } else {\n        this.renderTemplateToElement(element, this.templates.view, {\n          node: node,\n          nodeData: node.persistentData,\n          data: this.data,\n          components: this.component.components,\n          instance: this,\n          getView: function getView(component, data) {\n            return _Components.default.create(component, _this4.options, data, true).getView(data);\n          }\n        }, [{\n          class: 'toggleNode',\n          event: 'click',\n          action: this.toggleNode.bind(this, node)\n        }, {\n          class: 'addChild',\n          event: 'click',\n          action: this.addChild.bind(this, node)\n        }, {\n          class: 'editNode',\n          event: 'click',\n          action: this.editNode.bind(this, node)\n        }, {\n          class: 'removeNode',\n          event: 'click',\n          action: this.removeNode.bind(this, node)\n        }, {\n          class: 'revertNode',\n          event: 'click',\n          action: this.revertNode.bind(this, node)\n        }]);\n      }\n\n      this.checkData(this.data, {\n        noValidate: true\n      });\n\n      if (!node.collapsed && node.children.length > 0) {\n        element.appendChild(this.buildNodes(node));\n      }\n\n      return element;\n    }\n  }, {\n    key: \"toggleNode\",\n    value: function toggleNode(node) {\n      this.hook('tree.toggleNode', {\n        node: node,\n        component: this\n      }, function () {\n        return node.collapsed = !node.collapsed;\n      });\n      this.buildTree();\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(parent) {\n      if (this.options.readOnly || parent.new) {\n        return;\n      }\n\n      this.hook('tree.addChild', {\n        parent: parent,\n        component: this\n      }, function () {\n        return parent.addChild();\n      });\n      this.buildTree();\n    }\n  }, {\n    key: \"editNode\",\n    value: function editNode(node) {\n      if (this.options.readOnly || node.new) {\n        return;\n      }\n\n      this.hook('tree.editNode', {\n        node: node,\n        component: this\n      }, function () {\n        return node.edit();\n      });\n      this.buildTree();\n    }\n  }, {\n    key: \"cancelNode\",\n    value: function cancelNode(node) {\n      var _this5 = this;\n\n      if (this.options.readOnly) {\n        return;\n      }\n\n      this.hook('tree.cancelNode', {\n        node: node,\n        component: this\n      }, function () {\n        if (node.isRoot) {\n          _this5.removeRoot();\n        } else {\n          node.cancel();\n        }\n\n        return node;\n      });\n      this.buildTree();\n    }\n  }, {\n    key: \"saveNode\",\n    value: function saveNode(node) {\n      if (this.options.readOnly) {\n        return;\n      }\n\n      this.hook('tree.saveNode', {\n        node: node,\n        component: this\n      }, function () {\n        return node.save();\n      });\n      this.updateTree();\n    }\n  }, {\n    key: \"revertNode\",\n    value: function revertNode(node) {\n      if (this.options.readOnly || !node.revertAvailable) {\n        return;\n      }\n\n      this.hook('tree.revertNode', {\n        node: node,\n        component: this\n      }, function () {\n        return node.revert();\n      });\n      this.updateTree();\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(node) {\n      var _this6 = this;\n\n      if (this.options.readOnly || node.new) {\n        return;\n      }\n\n      this.hook('tree.removeNode', {\n        node: node,\n        component: this\n      }, function () {\n        if (node.isRoot) {\n          _this6.removeRoot();\n        } else {\n          node.remove();\n        }\n\n        return node;\n      });\n      this.updateTree();\n    }\n  }, {\n    key: \"removeRoot\",\n    value: function removeRoot() {\n      if (this.options.readOnly) {\n        return;\n      }\n\n      this.setRoot(this.defaultValue);\n    }\n  }, {\n    key: \"updateTree\",\n    value: function updateTree() {\n      this.dataValue = this.tree.value;\n      this.updateValue();\n      this.triggerChange();\n      this.buildTree();\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.dataValue;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, flags) {\n      var changed = _Base.default.prototype.setValue.call(this, value, flags);\n\n      this.dataValue = value;\n      this.setRoot();\n      this.buildTree();\n      return changed;\n    }\n  }, {\n    key: \"setRoot\",\n    value: function setRoot() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataValue;\n      this.tree = new Node(null, value, !value.data);\n      this.hook('tree.setRoot', {\n        root: this.tree,\n        component: this\n      });\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(flags, value) {\n      // Intentionally skip over nested component updateValue method to keep recursive update from occurring with sub components.\n      return _Base.default.prototype.updateValue.call(this, flags, value);\n    }\n  }, {\n    key: \"clearOnHide\",\n    value: function clearOnHide(show) {\n      _get(_getPrototypeOf(TreeComponent.prototype), \"clearOnHide\", this).call(this, show);\n\n      this.setRoot();\n      this.buildTree();\n    }\n  }, {\n    key: \"restoreComponentsContext\",\n    value: function restoreComponentsContext() {\n      this.getComponents().forEach(function (component) {\n        return component.data = component.node.data;\n      });\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return TreeComponent.schema();\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return {};\n    }\n  }]);\n\n  return TreeComponent;\n}(_NestedComponent2.default);\n\nexports.default = TreeComponent;",null]}