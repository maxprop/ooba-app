{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/sort-by-selector/connectSortBySelector.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/sort-by-selector/connectSortBySelector.js","mtime":1581861144640},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START lodash_find,_.._lib_utils.js PURE_IMPORTS_END */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n} return target; };\nimport find from 'lodash/find';\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customSortBySelector = connectSortBySelector(function render(params, isFirstRendering) {\\n  // params = {\\n  //   currentRefinement,\\n  //   options,\\n  //   refine,\\n  //   hasNoResults,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customSortBySelector({\\n    indices,\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectSortBySelector.html\\n';\n/**\n * @typedef {Object} SortBySelectorIndices\n * @property {string} name Name of the index to target.\n * @property {string} label Label to display for the targeted index.\n */\n/**\n * @typedef {Object} CustomSortBySelectorWidgetOptions\n * @property {SortBySelectorIndices[]} indices Array of objects defining the different indices to choose from.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n/**\n * @typedef {Object} SortBySelectorRenderingOptions\n * @property {string} currentRefinement The currently selected index.\n * @property {SortBySelectorIndices[]} options All the available indices\n * @property {function(string)} refine Switches indices and triggers a new search.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams All original `CustomSortBySelectorWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * The **SortBySelector** connector provides the logic to build a custom widget that will display a\n * list of indices. With Algolia, this is most commonly used for changing ranking strategy. This allows\n * a user to change how the hits are being sorted.\n *\n * This connector provides the `refine` function that allows to switch indices.\n * The connector provides to the rendering: `refine()` to switch the current index and\n * `options` that are the values that can be selected. `refine` should be used\n * with `options.value`.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/sort-by/js/\n * @param {function(SortBySelectorRenderingOptions, boolean)} renderFn Rendering function for the custom **SortBySelector** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomSortBySelectorWidgetOptions)} Re-usable widget factory for a custom **SortBySelector** widget.\n * @example\n * // custom `renderFn` to render the custom SortBySelector widget\n * function renderFn(SortBySelectorRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     SortBySelectorRenderingOptions.widgetParams.containerNode.html('<select></select>');\n *     SortBySelectorRenderingOptions.widgetParams.containerNode\n *       .find('select')\n *       .on('change', function(event) {\n *         SortBySelectorRenderingOptions.refine(event.target.value);\n *       });\n *   }\n *\n *   var optionsHTML = SortBySelectorRenderingOptions.options.map(function(option) {\n *     return `\n *       <option\n *         value=\"${option.value}\"\n *         ${SortBySelectorRenderingOptions.currentRefinement === option.value ? 'selected' : ''}\n *       >\n *         ${option.label}\n *       </option>\n *     `;\n *   });\n *\n *   SortBySelectorRenderingOptions.widgetParams.containerNode\n *     .find('select')\n *     .html(optionsHTML);\n * }\n *\n * // connect `renderFn` to SortBySelector logic\n * var customSortBySelector = instantsearch.connectors.connectSortBySelector(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customSortBySelector({\n *     containerNode: $('#custom-sort-by-selector-container'),\n *     indices: [\n *       {name: 'instant_search', label: 'Most relevant'},\n *       {name: 'instant_search_price_asc', label: 'Lowest price'},\n *       {name: 'instant_search_price_desc', label: 'Highest price'},\n *     ],\n *   })\n * );\n */\nexport default function connectSortBySelector(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var indices = widgetParams.indices, _widgetParams$transfo = widgetParams.transformItems, transformItems = _widgetParams$transfo === undefined ? function (items) {\n            return items;\n        } : _widgetParams$transfo;\n        if (!indices) {\n            throw new Error(usage);\n        }\n        var selectorOptions = indices.map(function (_ref) {\n            var label = _ref.label, name = _ref.name;\n            return {\n                label: label,\n                value: name\n            };\n        });\n        return {\n            init: function init(_ref2) {\n                var helper = _ref2.helper, instantSearchInstance = _ref2.instantSearchInstance;\n                var currentIndex = helper.getIndex();\n                var isIndexInList = find(indices, function (_ref3) {\n                    var name = _ref3.name;\n                    return name === currentIndex;\n                });\n                if (!isIndexInList) {\n                    throw new Error('[sortBySelector]: Index ' + currentIndex + ' not present in `indices`');\n                }\n                this.initialIndex = instantSearchInstance.indexName;\n                this.setIndex = function (indexName) {\n                    return helper.setIndex(indexName).search();\n                };\n                renderFn({\n                    currentRefinement: currentIndex,\n                    options: transformItems(selectorOptions),\n                    refine: this.setIndex,\n                    hasNoResults: true,\n                    widgetParams: widgetParams,\n                    instantSearchInstance: instantSearchInstance\n                }, true);\n            },\n            render: function render(_ref4) {\n                var helper = _ref4.helper, results = _ref4.results, instantSearchInstance = _ref4.instantSearchInstance;\n                renderFn({\n                    currentRefinement: helper.getIndex(),\n                    options: transformItems(selectorOptions),\n                    refine: this.setIndex,\n                    hasNoResults: results.nbHits === 0,\n                    widgetParams: widgetParams,\n                    instantSearchInstance: instantSearchInstance\n                }, false);\n            },\n            dispose: function dispose(_ref5) {\n                var state = _ref5.state;\n                unmountFn();\n                return state.setIndex(this.initialIndex);\n            },\n            getWidgetState: function getWidgetState(uiState, _ref6) {\n                var searchParameters = _ref6.searchParameters;\n                var currentIndex = searchParameters.getQueryParameter('index');\n                var isInitialIndex = currentIndex === this.initialIndex;\n                if (isInitialIndex || uiState && uiState.sortBy === currentIndex) {\n                    return uiState;\n                }\n                return _extends({}, uiState, {\n                    sortBy: searchParameters.getQueryParameter('index')\n                });\n            },\n            getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref7) {\n                var uiState = _ref7.uiState;\n                return searchParameters.setQueryParameter('index', uiState.sortBy || this.initialIndex);\n            }\n        };\n    };\n}\n",null]}