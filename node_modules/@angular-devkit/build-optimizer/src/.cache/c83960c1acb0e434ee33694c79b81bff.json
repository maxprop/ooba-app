{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/editgrid/EditGrid.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/editgrid/EditGrid.js","mtime":1584368630970},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.splice\");\n\nrequire(\"core-js/modules/es.function.name\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _NestedComponent2 = _interopRequireDefault(require(\"../nested/NestedComponent\"));\n\nvar _Base = _interopRequireDefault(require(\"../base/Base\"));\n\nvar _Components = _interopRequireDefault(require(\"../Components\"));\n\nvar _utils = require(\"../../utils/utils\");\n\nvar _templates = _interopRequireDefault(require(\"./templates\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar EditGridComponent =\n/*#__PURE__*/\nfunction (_NestedComponent) {\n  _inherits(EditGridComponent, _NestedComponent);\n\n  _createClass(EditGridComponent, null, [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _NestedComponent2.default.schema.apply(_NestedComponent2.default, [{\n        type: 'editgrid',\n        label: 'Edit Grid',\n        key: 'editGrid',\n        clearOnHide: true,\n        input: true,\n        tree: true,\n        defaultOpen: false,\n        removeRow: 'Cancel',\n        components: [],\n        inlineEdit: false,\n        templates: {\n          header: this.defaultHeaderTemplate,\n          row: this.defaultRowTemplate,\n          footer: ''\n        }\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Edit Grid',\n        icon: 'fa fa-tasks',\n        group: 'data',\n        documentation: 'http://help.form.io/userguide/#editgrid',\n        weight: 40,\n        schema: EditGridComponent.schema()\n      };\n    }\n  }, {\n    key: \"defaultHeaderTemplate\",\n    get: function get() {\n      return \"<div class=\\\"row\\\">\\n  {% util.eachComponent(components, function(component) { %}\\n    {% if (!component.hasOwnProperty('tableView') || component.tableView) { %}\\n      <div class=\\\"col-sm-2\\\">{{ component.label }}</div>\\n    {% } %}\\n  {% }) %}\\n</div>\";\n    }\n  }, {\n    key: \"defaultRowTemplate\",\n    get: function get() {\n      return \"<div class=\\\"row\\\">\\n  {% util.eachComponent(components, function(component) { %}\\n    {% if (!component.hasOwnProperty('tableView') || component.tableView) { %}\\n      <div class=\\\"col-sm-2\\\">\\n        {{ getView(component, row[component.key]) }}\\n      </div>\\n    {% } %}\\n  {% }) %}\\n  {% if (!instance.options.readOnly) { %}\\n    <div class=\\\"col-sm-2\\\">\\n      <div class=\\\"btn-group pull-right\\\">\\n        <button class=\\\"btn btn-default btn-light btn-sm editRow\\\"><i class=\\\"{{ iconClass('edit') }}\\\"></i></button>\\n        <button class=\\\"btn btn-danger btn-sm removeRow\\\"><i class=\\\"{{ iconClass('trash') }}\\\"></i></button>\\n      </div>\\n    </div>\\n  {% } %}\\n</div>\";\n    }\n  }]);\n\n  function EditGridComponent(component, options, data) {\n    var _this;\n\n    _classCallCheck(this, EditGridComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditGridComponent).call(this, component, options, data));\n    _this.type = 'datagrid';\n    _this.editRows = [];\n    return _this;\n  }\n\n  _createClass(EditGridComponent, [{\n    key: \"build\",\n    value: function build(state) {\n      var _this2 = this;\n\n      if (this.options.builder) {\n        return _get(_getPrototypeOf(EditGridComponent.prototype), \"build\", this).call(this, state, true);\n      }\n\n      this.createElement();\n      this.createLabel(this.element);\n      var dataValue = this.dataValue;\n\n      if (Array.isArray(dataValue)) {\n        // Ensure we always have rows for each dataValue available.\n        dataValue.forEach(function (row, rowIndex) {\n          if (_this2.editRows[rowIndex]) {\n            _this2.editRows[rowIndex].data = row;\n          } else {\n            _this2.editRows[rowIndex] = {\n              components: [],\n              isOpen: !!_this2.options.defaultOpen,\n              data: row\n            };\n          }\n        });\n      }\n\n      this.buildTable();\n      this.createAddButton();\n      this.createDescription(this.element);\n      this.element.appendChild(this.errorContainer = this.ce('div', {\n        class: 'has-error'\n      }));\n      this.attachLogic();\n    }\n  }, {\n    key: \"buildTable\",\n    value: function buildTable(fromBuild) {\n      var _this3 = this;\n\n      // Do not show the table when in builder mode.\n      if (this.options.builder) {\n        return;\n      }\n\n      if (!fromBuild && !this.editRows.length && this.component.defaultOpen) {\n        return this.addRow(true);\n      }\n\n      var tableClass = 'editgrid-listgroup list-group ';\n      ['striped', 'bordered', 'hover', 'condensed'].forEach(function (prop) {\n        if (_this3.component[prop]) {\n          tableClass += \"table-\".concat(prop, \" \");\n        }\n      });\n      var tableElement = this.ce('ul', {\n        class: tableClass\n      }, [this.headerElement = this.createHeader(), this.rowElements = this.editRows.map(this.createRow.bind(this)), this.footerElement = this.createFooter()]);\n\n      if (this.tableElement && this.element.contains(this.tableElement)) {\n        this.element.replaceChild(tableElement, this.tableElement);\n      } else {\n        this.element.appendChild(tableElement);\n      } //add open class to the element if any edit grid row is open\n\n\n      var isAnyRowOpen = this.editRows.some(function (row) {\n        return row.isOpen;\n      });\n\n      if (isAnyRowOpen) {\n        this.addClass(this.element, \"formio-component-\".concat(this.component.type, \"-row-open\"));\n      } else {\n        this.removeClass(this.element, \"formio-component-\".concat(this.component.type, \"-row-open\"));\n      }\n\n      this.tableElement = tableElement;\n\n      if (this.allowReorder) {\n        this.addDraggable([this.tableElement]);\n      }\n    }\n  }, {\n    key: \"getRowDragulaOptions\",\n    value: function getRowDragulaOptions() {\n      var superOptions = _get(_getPrototypeOf(EditGridComponent.prototype), \"getRowDragulaOptions\", this).call(this);\n\n      superOptions.accepts = function (draggedElement, newParent, oldParent, nextSibling) {\n        //disallow dragging above Edit Grid header\n        return !nextSibling || !nextSibling.classList.contains('formio-edit-grid-header');\n      };\n\n      return superOptions;\n    }\n  }, {\n    key: \"onRowDrop\",\n    value: function onRowDrop(droppedElement, newParent, oldParent, nextSibling) {\n      _get(_getPrototypeOf(EditGridComponent.prototype), \"onRowDrop\", this).call(this, droppedElement, newParent, oldParent, nextSibling);\n\n      this.triggerChange();\n    }\n  }, {\n    key: \"createHeader\",\n    value: function createHeader() {\n      var templateHeader = _utils.Evaluator.noeval ? _templates.default.header : _lodash.default.get(this.component, 'templates.header');\n\n      if (!templateHeader) {\n        return this.text('');\n      }\n\n      var headerMarkup = this.renderTemplate(templateHeader, {\n        components: this.component.components,\n        value: this.dataValue\n      });\n      var headerElement;\n\n      if (this.allowReorder) {\n        headerElement = this.ce('div', {\n          class: 'row'\n        }, [this.ce('div', {\n          class: 'col-xs-1'\n        }), this.ce('div', {\n          class: 'col-xs-11'\n        }, headerMarkup)]);\n      } else {\n        headerElement = headerMarkup;\n      }\n\n      return this.ce('li', {\n        class: 'list-group-item list-group-header formio-edit-grid-header'\n      }, headerElement);\n    }\n  }, {\n    key: \"createRow\",\n    value: function createRow(row, rowIndex) {\n      var _this4 = this;\n\n      var wrapper = this.ce('li', {\n        class: 'list-group-item'\n      });\n      var rowTemplate = _utils.Evaluator.noeval ? _templates.default.row : _lodash.default.get(this.component, 'templates.row', EditGridComponent.defaultRowTemplate); // Store info so we can detect changes later.\n\n      wrapper.rowData = row.data;\n      wrapper.rowIndex = rowIndex;\n      wrapper.rowOpen = row.isOpen;\n      row.components = [];\n\n      if (wrapper.rowOpen) {\n        var dialog = this.component.modal ? this.createModal(this.component.addAnother || 'Add Another') : undefined;\n        var editForm = this.component.components.map(function (comp) {\n          var component = _lodash.default.cloneDeep(comp);\n\n          var options = _lodash.default.clone(_this4.options);\n\n          options.row = \"\".concat(_this4.row, \"-\").concat(rowIndex);\n          options.name += \"[\".concat(rowIndex, \"]\");\n\n          var instance = _this4.createComponent(component, options, row.data);\n\n          instance.rowIndex = rowIndex;\n          row.components.push(instance);\n          return instance.element;\n        });\n\n        if (!this.options.readOnly) {\n          editForm.push(this.ce('div', {\n            class: 'editgrid-actions'\n          }, [this.ce('button', {\n            class: 'btn btn-primary',\n            onClick: this.saveRow.bind(this, rowIndex, dialog)\n          }, this.t(this.component.saveRow || 'Save')), ' ', this.component.removeRow ? this.ce('button', {\n            class: 'btn btn-danger',\n            onClick: this.cancelRow.bind(this, rowIndex)\n          }, this.t(this.component.removeRow || 'Cancel')) : null]));\n        }\n\n        if (!this.component.modal) {\n          wrapper.appendChild(this.ce('div', {\n            class: 'editgrid-edit'\n          }, this.ce('div', {\n            class: 'editgrid-body'\n          }, editForm)));\n        } else {\n          var formComponents = this.ce('div', {\n            class: 'editgrid-edit'\n          }, this.ce('div', {\n            class: 'editgrid-body'\n          }, editForm));\n          dialog.body.appendChild(formComponents);\n        }\n      } else {\n        var rowMarkup = this.renderTemplate(rowTemplate, {\n          row: row.data,\n          data: this.data,\n          rowIndex: rowIndex,\n          components: this.component.components,\n          getView: function getView(component, data) {\n            return _Components.default.create(component, _this4.options, data, true).getView(data);\n          }\n        }, [{\n          class: 'removeRow',\n          event: 'click',\n          action: this.removeRow.bind(this, rowIndex)\n        }, {\n          class: 'editRow',\n          event: 'click',\n          action: this.editRow.bind(this, rowIndex)\n        }]);\n        var rowElement;\n\n        if (this.allowReorder) {\n          rowElement = this.ce('div', {\n            class: 'row'\n          }, [this.ce('div', {\n            class: 'col-xs-1 formio-drag-column'\n          }, this.dragButton()), this.ce('div', {\n            class: 'col-xs-11'\n          }, rowMarkup)]);\n        } else {\n          rowElement = rowMarkup;\n        }\n\n        wrapper.appendChild(rowElement);\n      }\n\n      wrapper.appendChild(row.errorContainer = this.ce('div', {\n        class: 'has-error'\n      }));\n      this.checkData(this.data, {\n        noValidate: true\n      }, rowIndex);\n\n      if (this.allowReorder) {\n        wrapper.dragInfo = {\n          index: rowIndex\n        };\n      }\n\n      return wrapper;\n    }\n  }, {\n    key: \"createFooter\",\n    value: function createFooter() {\n      var footerTemplate = _lodash.default.get(this.component, 'templates.footer');\n\n      if (!footerTemplate) {\n        return this.text('');\n      }\n\n      return this.ce('li', {\n        class: 'list-group-item list-group-footer'\n      }, this.renderTemplate(footerTemplate, {\n        components: this.component.components,\n        value: this.dataValue\n      }));\n    }\n  }, {\n    key: \"checkData\",\n    value: function checkData(data) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var index = arguments.length > 2 ? arguments[2] : undefined;\n      var valid = true;\n\n      if (flags.noCheck) {\n        return;\n      } // Update the value.\n\n\n      var changed = this.updateValue({\n        noUpdateEvent: true\n      });\n      var editRow = this.editRows[index]; // Iterate through all components and check conditions, and calculate values.\n\n      editRow.components.forEach(function (comp) {\n        changed |= comp.calculateValue(data, {\n          noUpdateEvent: true\n        });\n        comp.checkConditions(data);\n\n        if (!flags.noValidate) {\n          valid &= comp.checkValidity(data, !editRow.isOpen);\n        }\n      });\n      valid &= this.validateRow(index); // Trigger the change if the values changed.\n\n      if (changed) {\n        this.triggerChange(flags);\n      } // Return if the value is valid.\n\n\n      return valid;\n    }\n  }, {\n    key: \"createAddButton\",\n    value: function createAddButton() {\n      if (this.options.readOnly) {\n        return;\n      }\n\n      this.element.appendChild(this.ce('div', {\n        class: 'editgrid-add'\n      }, this.ce('button', {\n        class: 'btn btn-primary',\n        role: 'button',\n        onClick: this.addRow.bind(this)\n      }, [this.ce('span', {\n        class: this.iconClass('plus'),\n        'aria-hidden': true\n      }), ' ', this.t(this.component.addAnother ? this.component.addAnother : 'Add Another', {})])));\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow(fromBuild) {\n      if (this.options.readOnly) {\n        return;\n      }\n\n      var dataObj = {};\n      this.editRows.push({\n        components: [],\n        isOpen: true,\n        data: dataObj\n      });\n\n      if (this.component.inlineEdit) {\n        this.dataValue.push(dataObj);\n      }\n\n      this.emit('editGridAddRow', {\n        component: this.component,\n        row: this.editRows[this.editRows.length - 1]\n      });\n\n      if (this.component.inlineEdit) {\n        this.updateGrid();\n      } else {\n        this.buildTable(fromBuild);\n      }\n    }\n  }, {\n    key: \"editRow\",\n    value: function editRow(rowIndex) {\n      var editRow = this.editRows[rowIndex];\n      editRow.dirty = false;\n      editRow.isOpen = true;\n      editRow.editing = true;\n\n      var dataSnapshot = _lodash.default.cloneDeep(this.dataValue[rowIndex]);\n\n      if (this.component.inlineEdit) {\n        editRow.backup = dataSnapshot;\n        this.updateGrid();\n      } else {\n        editRow.data = dataSnapshot;\n        this.buildTable();\n      }\n    }\n  }, {\n    key: \"updateGrid\",\n    value: function updateGrid() {\n      this.updateValue();\n      this.triggerChange();\n      this.buildTable();\n    }\n  }, {\n    key: \"clearErrors\",\n    value: function clearErrors(rowIndex) {\n      var editRow = this.editRows[rowIndex];\n\n      if (editRow && Array.isArray(editRow.components)) {\n        editRow.components.forEach(function (comp) {\n          comp.setPristine(true);\n          comp.setCustomValidity('');\n        });\n      }\n    }\n  }, {\n    key: \"cancelRow\",\n    value: function cancelRow(rowIndex) {\n      var editRow = this.editRows[rowIndex];\n\n      if (this.options.readOnly) {\n        editRow.dirty = false;\n        editRow.isOpen = false;\n        this.buildTable();\n        return;\n      }\n\n      if (editRow.editing) {\n        editRow.dirty = false;\n        editRow.isOpen = false;\n        editRow.editing = false;\n\n        if (this.component.inlineEdit) {\n          this.dataValue[rowIndex] = editRow.backup;\n        }\n\n        editRow.data = this.dataValue[rowIndex];\n        this.clearErrors(rowIndex);\n      } else {\n        this.clearErrors(rowIndex);\n\n        if (this.component.inlineEdit) {\n          this.splice(rowIndex);\n        }\n\n        this.removeChildFrom(editRow.element, this.tableElement);\n        this.editRows.splice(rowIndex, 1);\n      }\n\n      this.updateGrid();\n    }\n  }, {\n    key: \"saveRow\",\n    value: function saveRow(rowIndex, modal) {\n      var editRow = this.editRows[rowIndex];\n\n      if (this.options.readOnly) {\n        editRow.dirty = false;\n        editRow.isOpen = false;\n        this.buildTable();\n        return;\n      }\n\n      editRow.dirty = true;\n\n      if (!this.validateRow(rowIndex, true)) {\n        return;\n      }\n\n      editRow.dirty = false;\n      editRow.isOpen = false;\n\n      if (!this.component.inlineEdit) {\n        if (editRow.editing) {\n          this.dataValue[rowIndex] = editRow.data;\n        } else {\n          // Insert this row into its proper place.\n          var newIndex = this.dataValue.length;\n          this.dataValue.push(editRow.data);\n          this.editRows.splice(rowIndex, 1);\n          this.editRows.splice(newIndex, 0, editRow);\n        }\n      }\n\n      editRow.editing = false;\n      this.updateGrid();\n\n      if (this.component.modal) {\n        modal.close();\n      }\n    }\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(rowIndex) {\n      if (this.options.readOnly) {\n        return;\n      }\n\n      this.splice(rowIndex);\n      this.removeChildFrom(this.editRows[rowIndex].element, this.tableElement);\n      this.editRows.splice(rowIndex, 1);\n      this.updateGrid();\n    }\n  }, {\n    key: \"validateRow\",\n    value: function validateRow(rowIndex, dirty) {\n      var check = true;\n      var editRow = this.editRows[rowIndex];\n      var isDirty = dirty || !!editRow.dirty;\n\n      if (editRow.editing || isDirty) {\n        editRow.components.forEach(function (comp) {\n          comp.setPristine(!isDirty);\n          check &= comp.checkValidity(null, isDirty, editRow.data);\n        });\n      }\n\n      if (this.component.validate && this.component.validate.row) {\n        var valid = this.evaluate(this.component.validate.row, {\n          valid: true,\n          row: editRow.data\n        }, 'valid', true);\n\n        if (valid === null) {\n          valid = \"Invalid row validation for \".concat(this.key);\n        }\n\n        editRow.errorContainer.innerHTML = '';\n\n        if (valid !== true) {\n          editRow.errorContainer.appendChild(this.ce('div', {\n            class: 'editgrid-row-error help-block'\n          }, valid));\n          return false;\n        }\n      }\n\n      return check;\n    }\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(data, dirty) {\n      var _this5 = this;\n\n      if (!this.checkCondition(null, data)) {\n        this.setCustomValidity('');\n        return true;\n      }\n\n      var rowsValid = true;\n      var rowsClosed = true;\n      this.editRows.forEach(function (editRow, rowIndex) {\n        // Trigger all errors on the row.\n        var rowValid = _this5.validateRow(rowIndex, dirty); // Add has-error class to row.\n\n\n        if (!rowValid) {\n          _this5.addClass(editRow.element, 'has-error');\n        } else {\n          _this5.removeClass(editRow.element, 'has-error');\n        }\n\n        rowsValid &= rowValid; // Any open rows causes validation to fail.\n\n        if (dirty) {\n          rowsClosed &= !editRow.isOpen;\n        }\n      });\n\n      if (!rowsValid) {\n        this.setCustomValidity('Please correct rows before proceeding.', dirty);\n        return false;\n      } else if (!rowsClosed && !this.component.inlineEdit) {\n        this.setCustomValidity('Please save all rows before proceeding.', dirty);\n        return false;\n      }\n\n      var message = this.invalid || this.invalidMessage(data, dirty);\n      this.setCustomValidity(message, dirty);\n      return true;\n    }\n  }, {\n    key: \"setCustomValidity\",\n    value: function setCustomValidity(message, dirty) {\n      if (this.errorElement && this.errorContainer) {\n        this.errorElement.innerHTML = '';\n        this.removeChildFrom(this.errorElement, this.errorContainer);\n      }\n\n      this.removeClass(this.element, 'has-error');\n\n      if (this.options.highlightErrors) {\n        this.removeClass(this.element, 'alert alert-danger');\n      }\n\n      if (message) {\n        this.emit('componentError', this.error);\n        this.createErrorElement();\n        var errorMessage = this.ce('p', {\n          class: 'help-block'\n        });\n        errorMessage.appendChild(this.text(message));\n        this.appendTo(errorMessage, this.errorElement); // Add error classes\n\n        this.addClass(this.element, 'has-error');\n\n        if (dirty && this.options.highlightErrors) {\n          this.addClass(this.element, 'alert alert-danger');\n        }\n      }\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(flags, value) {\n      // Intentionally skip over nested component updateValue method to keep recursive update from occurring with sub components.\n      return _Base.default.prototype.updateValue.call(this, flags, value);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this6 = this;\n\n      if (!value) {\n        this.editRows = this.defaultValue;\n        this.buildTable();\n        return;\n      }\n\n      if (!Array.isArray(value)) {\n        if (_typeof(value) === 'object') {\n          value = [value];\n        } else {\n          return;\n        }\n      }\n\n      var changed = this.hasChanged(value, this.dataValue);\n      this.dataValue = value;\n      var dataValue = this.dataValue;\n\n      if (Array.isArray(dataValue)) {\n        // Refresh editRow data when data changes.\n        dataValue.forEach(function (row, rowIndex) {\n          if (_this6.editRows[rowIndex]) {\n            _this6.editRows[rowIndex].data = row;\n          } else {\n            _this6.editRows[rowIndex] = {\n              components: [],\n              isOpen: !!_this6.options.defaultOpen,\n              data: row\n            };\n          }\n        }); // Remove any extra edit rows.\n\n        if (dataValue.length < this.editRows.length) {\n          for (var rowIndex = this.editRows.length - 1; rowIndex >= dataValue.length; rowIndex--) {\n            this.removeChildFrom(this.editRows[rowIndex].element, this.tableElement);\n            this.editRows.splice(rowIndex, 1);\n          }\n        }\n      }\n\n      this.buildTable();\n      return changed;\n    }\n    /**\n     * Get the value of this component.\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.dataValue;\n    }\n  }, {\n    key: \"clearOnHide\",\n    value: function clearOnHide(show) {\n      _get(_getPrototypeOf(EditGridComponent.prototype), \"clearOnHide\", this).call(this, show);\n\n      if (!this.component.clearOnHide) {\n        // If some components set to clearOnHide we need to clear them.\n        this.buildTable();\n      }\n    }\n  }, {\n    key: \"restoreComponentsContext\",\n    value: function restoreComponentsContext() {\n      return;\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return EditGridComponent.schema();\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      var value = _get(_getPrototypeOf(EditGridComponent.prototype), \"defaultValue\", this);\n\n      return Array.isArray(value) ? value : [];\n    }\n  }]);\n\n  return EditGridComponent;\n}(_NestedComponent2.default);\n\nexports.default = EditGridComponent;",null]}