{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/form/Form.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/form/Form.js","mtime":1584368630974},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.join\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.reflect.set\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Base = _interopRequireDefault(require(\"../base/Base\"));\n\nvar _eventemitter = _interopRequireDefault(require(\"eventemitter2\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _utils = require(\"../../utils/utils\");\n\nvar _Formio = _interopRequireDefault(require(\"../../Formio\"));\n\nvar _Form = _interopRequireDefault(require(\"../../Form\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction set(target, property, value, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }\n\nfunction _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar FormComponent =\n/*#__PURE__*/\nfunction (_BaseComponent) {\n  _inherits(FormComponent, _BaseComponent);\n\n  _createClass(FormComponent, null, [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _Base.default.schema.apply(_Base.default, [{\n        label: 'Form',\n        type: 'form',\n        key: 'form',\n        src: '',\n        reference: true,\n        form: '',\n        path: ''\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Nested Form',\n        icon: 'fa fa-wpforms',\n        group: 'advanced',\n        documentation: 'http://help.form.io/userguide/#form',\n        weight: 110,\n        schema: FormComponent.schema()\n      };\n    }\n  }]);\n\n  function FormComponent(component, options, data) {\n    var _this;\n\n    _classCallCheck(this, FormComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormComponent).call(this, component, options, data));\n    _this.subForm = null;\n    _this.formSrc = '';\n    _this.subFormReady = new _nativePromiseOnly.default(function (resolve, reject) {\n      _this.subFormReadyResolve = resolve;\n      _this.subFormReadyReject = reject;\n    });\n    _this.subFormLoaded = false;\n\n    _this.subscribe();\n\n    return _this;\n  }\n\n  _createClass(FormComponent, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      var _this2 = this;\n\n      this.on('nosubmit', function (value) {\n        _this2.nosubmit = value;\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var state = _get(_getPrototypeOf(FormComponent.prototype), \"destroy\", this).call(this) || {};\n\n      if (this.subForm) {\n        this.subForm.destroy();\n      }\n\n      return state;\n    }\n    /**\n     * Render a subform.\n     *\n     * @param form\n     * @param options\n     */\n\n  }, {\n    key: \"renderSubForm\",\n    value: function renderSubForm(form, options) {\n      var _this3 = this;\n\n      if (this.options.builder) {\n        this.element.appendChild(this.ce('div', {\n          class: 'text-muted text-center p-2'\n        }, this.text(form.title)));\n        return;\n      }\n\n      options.events = this.createEmitter(); // Iterate through every component and hide the submit button.\n\n      (0, _utils.eachComponent)(form.components, function (component) {\n        if (component.type === 'button' && (component.action === 'submit' || !component.action)) {\n          component.hidden = true;\n        }\n      });\n      new _Form.default(this.element, form, options).render().then(function (instance) {\n        _this3.subForm = instance;\n        _this3.subForm.root = _this3.root;\n        _this3.subForm.currentForm = _this3;\n        _this3.subForm.parent = _this3;\n        _this3.subForm.parentVisible = _this3.visible;\n\n        if (!_this3.options.temporary) {\n          _this3.subForm.on('change', function () {\n            _this3.dataValue = _this3.subForm.getValue();\n\n            _this3.triggerChange({\n              noEmit: true\n            });\n          });\n        }\n\n        _this3.subForm.url = _this3.formSrc;\n        _this3.subForm.nosubmit = _this3.nosubmit;\n\n        _this3.restoreValue();\n\n        _this3.subFormReadyResolve(_this3.subForm);\n\n        return _this3.subForm;\n      });\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _get2;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var state = (_get2 = _get(_getPrototypeOf(FormComponent.prototype), \"show\", this)).call.apply(_get2, [this].concat(args));\n\n      if (!this.subFormLoaded) {\n        if (state) {\n          this.loadSubForm();\n        } // If our parent is read-only and is done loading, and we were never asked\n        // to load a subform, consider our subform loading promise resolved\n        else if (this.parent.options.readOnly && !this.parent.loading) {\n            this.subFormReadyResolve(this.subForm);\n          }\n      }\n\n      return state;\n    }\n    /**\n     * Load the subform.\n     */\n\n    /* eslint-disable max-statements */\n\n  }, {\n    key: \"loadSubForm\",\n    value: function loadSubForm() {\n      var _this4 = this;\n\n      // Only load the subform if the subform isn't loaded and the conditions apply.\n      if (this.subFormLoaded) {\n        return this.subFormReady;\n      }\n\n      this.subFormLoaded = true;\n      var srcOptions = {};\n\n      if (this.options && this.options.base) {\n        srcOptions.base = this.options.base;\n      }\n\n      if (this.options && this.options.project) {\n        srcOptions.project = this.options.project;\n      }\n\n      if (this.options && this.options.readOnly) {\n        srcOptions.readOnly = this.options.readOnly;\n      }\n\n      if (this.options && this.options.breadcrumbSettings) {\n        srcOptions.breadcrumbSettings = this.options.breadcrumbSettings;\n      }\n\n      if (this.options && this.options.buttonSettings) {\n        srcOptions.buttonSettings = this.options.buttonSettings;\n      }\n\n      if (this.options && this.options.icons) {\n        srcOptions.icons = this.options.icons;\n      }\n\n      if (this.options && this.options.viewAsHtml) {\n        srcOptions.viewAsHtml = this.options.viewAsHtml;\n      }\n\n      if (this.options && this.options.hide) {\n        srcOptions.hide = this.options.hide;\n      }\n\n      if (this.options && this.options.show) {\n        srcOptions.show = this.options.show;\n      }\n\n      if (_lodash.default.has(this.options, 'language')) {\n        srcOptions.language = this.options.language;\n      }\n\n      if (this.component.src) {\n        this.formSrc = this.component.src;\n      }\n\n      if (!this.component.src && !this.options.formio && (this.component.form || this.component.path)) {\n        if (this.component.project) {\n          this.formSrc = _Formio.default.getBaseUrl(); // Check to see if it is a MongoID.\n\n          if ((0, _utils.isMongoId)(this.component.project)) {\n            this.formSrc += '/project';\n          }\n\n          this.formSrc += \"/\".concat(this.component.project);\n          srcOptions.project = this.formSrc;\n        } else {\n          this.formSrc = _Formio.default.getProjectUrl();\n          srcOptions.project = this.formSrc;\n        }\n\n        if (this.component.form) {\n          this.formSrc += \"/form/\".concat(this.component.form);\n        } else if (this.component.path) {\n          this.formSrc += \"/\".concat(this.component.path);\n        }\n      } // Build the source based on the root src path.\n\n\n      if (!this.formSrc && this.options.formio) {\n        var rootSrc = this.options.formio.formsUrl;\n\n        if (this.component.path) {\n          var parts = rootSrc.split('/');\n          parts.pop();\n          this.formSrc = \"\".concat(parts.join('/'), \"/\").concat(this.component.path);\n        }\n\n        if (this.component.form) {\n          this.formSrc = \"\".concat(rootSrc, \"/\").concat(this.component.form);\n        }\n      } // Add revision version if set.\n\n\n      if (this.component.formRevision || this.component.formRevision === 0) {\n        this.formSrc += \"/v/\".concat(this.component.formRevision);\n      } // Determine if we already have a loaded form object.\n\n\n      if (this.component && this.component.components && this.component.components.length) {\n        // Pass config down to sub forms.\n        if (this.root && this.root.form && this.root.form.config && !this.component.config) {\n          this.component.config = this.root.form.config;\n        }\n\n        this.renderSubForm(this.component, srcOptions);\n      } else if (this.formSrc) {\n        var query = {\n          params: {\n            live: 1\n          }\n        };\n        new _Formio.default(this.formSrc).loadForm(query).then(function (formObj) {\n          return _this4.renderSubForm(formObj, srcOptions);\n        }).catch(function (err) {\n          return _this4.subFormReadyReject(err);\n        });\n      }\n\n      return this.subFormReady;\n    }\n    /* eslint-enable max-statements */\n\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(data, dirty) {\n      if (this.subForm) {\n        return this.subForm.checkValidity(this.dataValue.data, dirty);\n      }\n\n      return _get(_getPrototypeOf(FormComponent.prototype), \"checkValidity\", this).call(this, data, dirty);\n    }\n  }, {\n    key: \"checkConditions\",\n    value: function checkConditions(data) {\n      var visible = _get(_getPrototypeOf(FormComponent.prototype), \"checkConditions\", this).call(this, data);\n\n      var subForm = this.subForm; // Return if already hidden\n\n      if (!visible) {\n        return visible;\n      }\n\n      if (subForm && subForm.hasCondition()) {\n        return this.subForm.checkConditions(this.dataValue.data);\n      }\n\n      return visible;\n    }\n  }, {\n    key: \"calculateValue\",\n    value: function calculateValue(data, flags) {\n      if (this.subForm) {\n        return this.subForm.calculateValue(this.dataValue.data, flags);\n      }\n\n      return _get(_getPrototypeOf(FormComponent.prototype), \"calculateValue\", this).call(this, data, flags);\n    }\n  }, {\n    key: \"setPristine\",\n    value: function setPristine(pristine) {\n      _get(_getPrototypeOf(FormComponent.prototype), \"setPristine\", this).call(this, pristine);\n\n      if (this.subForm) {\n        this.subForm.setPristine(pristine);\n      }\n    }\n  }, {\n    key: \"getSubFormData\",\n\n    /**\n     * Returns the data for the subform.\n     *\n     * @return {*}\n     */\n    value: function getSubFormData() {\n      if (_lodash.default.get(this.subForm, 'form.display') === 'pdf') {\n        return this.subForm.getSubmission();\n      } else {\n        return _nativePromiseOnly.default.resolve(this.dataValue);\n      }\n    }\n    /**\n     * Submit the subform if configured to do so.\n     *\n     * @return {*}\n     */\n\n  }, {\n    key: \"submitSubForm\",\n    value: function submitSubForm(rejectOnError) {\n      var _this5 = this;\n\n      // If we wish to submit the form on next page, then do that here.\n      if (this.shouldSubmit) {\n        return this.loadSubForm().then(function () {\n          return _this5.subForm.submitForm().then(function (result) {\n            _this5.subForm.loading = false;\n            _this5.dataValue = result.submission;\n            return _this5.dataValue;\n          }).catch(function (err) {\n            if (rejectOnError) {\n              _this5.subForm.onSubmissionError(err);\n\n              return _nativePromiseOnly.default.reject(err);\n            } else {\n              return {};\n            }\n          });\n        });\n      }\n\n      return this.getSubFormData();\n    }\n    /**\n     * Submit the form before the next page is triggered.\n     */\n\n  }, {\n    key: \"beforePage\",\n    value: function beforePage(next) {\n      var _this6 = this;\n\n      return this.submitSubForm(true).then(function () {\n        return _get(_getPrototypeOf(FormComponent.prototype), \"beforePage\", _this6).call(_this6, next);\n      });\n    }\n    /**\n     * Submit the form before the whole form is triggered.\n     */\n\n  }, {\n    key: \"beforeSubmit\",\n    value: function beforeSubmit() {\n      var _this7 = this;\n\n      var submission = this.dataValue; // This submission has already been submitted, so just return the reference data.\n\n      if (submission && submission._id && submission.form) {\n        this.dataValue = this.shouldSubmit ? {\n          _id: submission._id,\n          form: submission.form\n        } : submission;\n\n        if (!this.shouldSubmit) {\n          return _nativePromiseOnly.default.resolve(this.dataValue);\n        }\n      }\n\n      return this.submitSubForm(false).then(function (data) {\n        if (data._id) {\n          _this7.dataValue = {\n            _id: data._id,\n            form: data.form\n          };\n        }\n\n        return _this7.dataValue;\n      }).then(function () {\n        return _get(_getPrototypeOf(FormComponent.prototype), \"beforeSubmit\", _this7).call(_this7);\n      });\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.createElement();\n\n      if (!this.options.temporary) {\n        this.restoreValue();\n      }\n\n      this.attachLogic();\n    }\n  }, {\n    key: \"isHidden\",\n    value: function isHidden() {\n      if (!this.visible) {\n        return true;\n      }\n\n      return !_get(_getPrototypeOf(FormComponent.prototype), \"checkConditions\", this).call(this, this.rootValue);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(submission, flags, norecurse) {\n      var _this8 = this;\n\n      this._submission = submission;\n\n      if (this.subForm || norecurse) {\n        if (!norecurse && submission && submission._id && this.subForm.formio && !flags.noload && (_lodash.default.isEmpty(submission.data) || this.shouldSubmit)) {\n          var submissionUrl = \"\".concat(this.subForm.formio.formsUrl, \"/\").concat(submission.form, \"/submission/\").concat(submission._id);\n          this.subForm.setUrl(submissionUrl, this.options);\n          this.subForm.nosubmit = false;\n          this.subForm.loadSubmission().then(function (sub) {\n            return _this8.setValue(sub, flags, true);\n          });\n          return _get(_getPrototypeOf(FormComponent.prototype), \"setValue\", this).call(this, submission, flags);\n        } else {\n          return this.subForm ? this.subForm.setValue(submission, flags) : _get(_getPrototypeOf(FormComponent.prototype), \"setValue\", this).call(this, submission, flags);\n        }\n      }\n\n      var changed = _get(_getPrototypeOf(FormComponent.prototype), \"setValue\", this).call(this, this._submission, flags);\n\n      var hidden = this.isHidden();\n      var subForm;\n\n      if (hidden) {\n        subForm = this.subFormReady;\n      } else {\n        subForm = this.loadSubForm();\n      }\n\n      subForm.then(function () {\n        return _this8.setValue(_this8._submission, flags, true);\n      });\n      return changed;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (this.subForm) {\n        return this.subForm.getValue();\n      }\n\n      return this.dataValue;\n    }\n  }, {\n    key: \"getAllComponents\",\n    value: function getAllComponents() {\n      if (!this.subForm) {\n        return [];\n      }\n\n      return this.subForm.getAllComponents();\n    }\n  }, {\n    key: \"updateSubFormVisibility\",\n    value: function updateSubFormVisibility() {\n      if (this.subForm) {\n        this.subForm.parentVisible = this.visible;\n      }\n    }\n  }, {\n    key: \"isInternalEvent\",\n    value: function isInternalEvent(event) {\n      switch (event) {\n        case 'focus':\n        case 'blur':\n        case 'componentChange':\n        case 'componentError':\n        case 'error':\n        case 'formLoad':\n        case 'languageChanged':\n        case 'render':\n        case 'checkValidity':\n        case 'initialized':\n        case 'submit':\n        case 'submitButton':\n        case 'nosubmit':\n        case 'updateComponent':\n        case 'submitDone':\n        case 'submissionDeleted':\n        case 'requestDone':\n        case 'nextPage':\n        case 'prevPage':\n        case 'wizardNavigationClicked':\n        case 'updateWizardNav':\n        case 'restoreDraft':\n        case 'saveDraft':\n        case 'saveComponent':\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"createEmitter\",\n    value: function createEmitter() {\n      var emiter = new _eventemitter.default({\n        wildcard: false,\n        maxListeners: 0\n      });\n      var nativeEmit = emiter.emit;\n      var that = this;\n\n      emiter.emit = function (event) {\n        var eventType = event.replace(\"\".concat(that.options.namespace, \".\"), '');\n\n        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          args[_key3 - 1] = arguments[_key3];\n        }\n\n        nativeEmit.call.apply(nativeEmit, [this, event].concat(args));\n\n        if (!that.isInternalEvent(eventType)) {\n          that.emit.apply(that, [eventType].concat(args));\n        }\n      };\n\n      return emiter;\n    }\n  }, {\n    key: \"deleteValue\",\n    value: function deleteValue() {\n      _get(_getPrototypeOf(FormComponent.prototype), \"setValue\", this).call(this, null, {\n        noUpdateEvent: true,\n        noDefault: true\n      });\n\n      _lodash.default.unset(this.data, this.key);\n    }\n  }, {\n    key: \"dataReady\",\n    get: function get() {\n      return this.subFormReady;\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return FormComponent.schema();\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return {\n        data: {}\n      };\n    }\n  }, {\n    key: \"root\",\n    set: function set(inst) {\n      this._root = inst;\n      this.nosubmit = inst.nosubmit;\n    },\n    get: function get() {\n      return this._root;\n    }\n  }, {\n    key: \"nosubmit\",\n    set: function set(value) {\n      this._nosubmit = !!value;\n\n      if (this.subForm) {\n        this.subForm.nosubmit = !!value;\n      }\n    },\n    get: function get() {\n      return this._nosubmit || false;\n    }\n  }, {\n    key: \"currentForm\",\n    get: function get() {\n      return this._currentForm;\n    },\n    set: function set(instance) {\n      var _this9 = this;\n\n      this._currentForm = instance;\n\n      if (!this.subForm) {\n        return;\n      }\n\n      this.subForm.getComponents().forEach(function (component) {\n        component.currentForm = _this9;\n      });\n    }\n  }, {\n    key: \"shouldSubmit\",\n    get: function get() {\n      return !this.isHidden() && (!this.component.hasOwnProperty('reference') || this.component.reference);\n    }\n  }, {\n    key: \"visible\",\n    get: function get() {\n      return _get(_getPrototypeOf(FormComponent.prototype), \"visible\", this);\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(FormComponent.prototype), \"visible\", value, this, true);\n\n      this.updateSubFormVisibility();\n    }\n  }, {\n    key: \"parentVisible\",\n    get: function get() {\n      return _get(_getPrototypeOf(FormComponent.prototype), \"parentVisible\", this);\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(FormComponent.prototype), \"parentVisible\", value, this, true);\n\n      this.updateSubFormVisibility();\n    }\n  }]);\n\n  return FormComponent;\n}(_Base.default);\n\nexports.default = FormComponent;",null]}