{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/resource/resource.service.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/resource/resource.service.js","mtime":499162500000},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { EventEmitter, Injectable, Optional } from '@angular/core';\nimport { FormioResourceConfig } from './resource.config';\nimport { FormioResources } from './resources.service';\nimport { FormioAlerts } from '../components/alerts/formio.alerts';\nimport { FormioLoader } from '../components/loader/formio.loader';\nimport { FormioAppConfig } from '../formio.config';\nimport Promise from 'native-promise-only';\nimport { Formio, Utils } from 'formiojs';\nimport _ from 'lodash';\nvar FormioResourceService = /*@__PURE__*/ (function () {\n    function FormioResourceService(appConfig, config, loader, resourcesService) {\n        var _this = this;\n        this.appConfig = appConfig;\n        this.config = config;\n        this.loader = loader;\n        this.resourcesService = resourcesService;\n        this.initialized = false;\n        this.alerts = new FormioAlerts();\n        this.refresh = new EventEmitter();\n        this.formLoaded = new Promise((function (resolve, reject) {\n            _this.formResolve = resolve;\n            _this.formReject = reject;\n        }));\n        this.init();\n    }\n    /**\n     * @return {?}\n     */\n    FormioResourceService.prototype.initialize = /**\n     * @return {?}\n     */\n        function () {\n            console.warn('FormioResourceService.initialize() has been deprecated.');\n        };\n    /**\n     * @return {?}\n     */\n    FormioResourceService.prototype.init = /**\n     * @return {?}\n     */\n        function () {\n            if (this.initialized) {\n                return;\n            }\n            this.initialized = true;\n            if (this.appConfig && this.appConfig.appUrl) {\n                Formio.setBaseUrl(this.appConfig.apiUrl);\n                Formio.setProjectUrl(this.appConfig.appUrl);\n                Formio.formOnly = this.appConfig.formOnly;\n            }\n            else {\n                console.error('You must provide an AppConfig within your application!');\n            }\n            // Create the form url and load the resources.\n            this.formUrl = this.appConfig.appUrl + '/' + this.config.form;\n            this.resource = { data: {} };\n            // Add this resource service to the list of all resources in context.\n            if (this.resourcesService) {\n                this.resources = this.resourcesService.resources;\n                this.resources[this.config.name] = this;\n            }\n            return this.loadForm();\n        };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    FormioResourceService.prototype.onError = /**\n     * @param {?} error\n     * @return {?}\n     */\n        function (error) {\n            this.alerts.setAlert({\n                type: 'danger',\n                message: error.message || error\n            });\n            if (this.resourcesService) {\n                this.resourcesService.error.emit(error);\n            }\n            throw error;\n        };\n    /**\n     * @param {?} err\n     * @return {?}\n     */\n    FormioResourceService.prototype.onFormError = /**\n     * @param {?} err\n     * @return {?}\n     */\n        function (err) {\n            this.formReject(err);\n            this.onError(err);\n        };\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    FormioResourceService.prototype.setContext = /**\n     * @param {?} route\n     * @return {?}\n     */\n        function (route) {\n            this.resourceId = route.snapshot.params['id'];\n            this.resource = { data: {} };\n            this.resourceUrl = this.appConfig.appUrl + '/' + this.config.form;\n            if (this.resourceId) {\n                this.resourceUrl += '/submission/' + this.resourceId;\n            }\n            this.formio = new Formio(this.resourceUrl);\n            if (this.resourcesService) {\n                this.resources[this.config.name] = this;\n            }\n            this.loadParents();\n        };\n    /**\n     * @return {?}\n     */\n    FormioResourceService.prototype.loadForm = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.formFormio = new Formio(this.formUrl);\n            this.loader.loading = true;\n            this.formLoading = this.formFormio\n                .loadForm()\n                .then((function (form) {\n                _this.form = form;\n                _this.formResolve(form);\n                _this.loader.loading = false;\n                _this.loadParents();\n                return form;\n            }), (function (err) { return _this.onFormError(err); }))\n                .catch((function (err) { return _this.onFormError(err); }));\n            return this.formLoading;\n        };\n    /**\n     * @return {?}\n     */\n    FormioResourceService.prototype.loadParents = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.config.parents || !this.config.parents.length) {\n                return Promise.resolve([]);\n            }\n            if (!this.resourcesService) {\n                console.warn('You must provide the FormioResources within your application to use nested resources.');\n                return Promise.resolve([]);\n            }\n            return this.formLoading.then((function (form) {\n                // Iterate through the list of parents.\n                /** @type {?} */\n                var _parentsLoaded = [];\n                _this.config.parents.forEach((function (parent) {\n                    /** @type {?} */\n                    var resourceName = parent.resource || parent;\n                    /** @type {?} */\n                    var resourceField = parent.field || parent;\n                    /** @type {?} */\n                    var filterResource = parent.hasOwnProperty('filter') ? parent.filter : true;\n                    if (_this.resources.hasOwnProperty(resourceName) && _this.resources[resourceName].resourceLoaded) {\n                        _parentsLoaded.push(_this.resources[resourceName].resourceLoaded.then((function (resource) {\n                            /** @type {?} */\n                            var parentPath = '';\n                            Utils.eachComponent(form.components, (function (component, path) {\n                                if (component.key === resourceField) {\n                                    component.hidden = true;\n                                    component.clearOnHide = false;\n                                    _.set(_this.resource.data, path, resource);\n                                    parentPath = path;\n                                    return true;\n                                }\n                            }));\n                            return {\n                                name: parentPath,\n                                filter: filterResource,\n                                resource: resource\n                            };\n                        })));\n                    }\n                }));\n                // When all the parents have loaded, emit that to the onParents emitter.\n                return Promise.all(_parentsLoaded).then((function (parents) {\n                    _this.refresh.emit({\n                        form: form,\n                        submission: _this.resource\n                    });\n                    return parents;\n                }));\n            }));\n        };\n    /**\n     * @param {?} err\n     * @return {?}\n     */\n    FormioResourceService.prototype.onSubmissionError = /**\n     * @param {?} err\n     * @return {?}\n     */\n        function (err) {\n            this.onError(err);\n        };\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    FormioResourceService.prototype.loadResource = /**\n     * @param {?} route\n     * @return {?}\n     */\n        function (route) {\n            var _this = this;\n            this.setContext(route);\n            this.loader.loading = true;\n            this.resourceLoading = this.resourceLoaded = this.formio\n                .loadSubmission(null, { ignoreCache: true })\n                .then((function (resource) {\n                _this.resource = resource;\n                _this.loader.loading = false;\n                _this.refresh.emit({\n                    property: 'submission',\n                    value: _this.resource\n                });\n                return resource;\n            }), (function (err) { return _this.onSubmissionError(err); }))\n                .catch((function (err) { return _this.onSubmissionError(err); }));\n            return this.resourceLoading;\n        };\n    /**\n     * @param {?} resource\n     * @return {?}\n     */\n    FormioResourceService.prototype.save = /**\n     * @param {?} resource\n     * @return {?}\n     */\n        function (resource) {\n            var _this = this;\n            /** @type {?} */\n            var formio = resource._id ? this.formio : this.formFormio;\n            return formio\n                .saveSubmission(resource)\n                .then((function (saved) {\n                _this.resource = saved;\n                return saved;\n            }), (function (err) { return _this.onError(err); }))\n                .catch((function (err) { return _this.onError(err); }));\n        };\n    /**\n     * @return {?}\n     */\n    FormioResourceService.prototype.remove = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return this.formio\n                .deleteSubmission()\n                .then((function () {\n                _this.resource = null;\n            }), (function (err) { return _this.onError(err); }))\n                .catch((function (err) { return _this.onError(err); }));\n        };\n    return FormioResourceService;\n}());\nexport { FormioResourceService };\nif (false) {\n    /** @type {?} */\n    FormioResourceService.prototype.initialized;\n    /** @type {?} */\n    FormioResourceService.prototype.form;\n    /** @type {?} */\n    FormioResourceService.prototype.alerts;\n    /** @type {?} */\n    FormioResourceService.prototype.resource;\n    /** @type {?} */\n    FormioResourceService.prototype.resourceUrl;\n    /** @type {?} */\n    FormioResourceService.prototype.formUrl;\n    /** @type {?} */\n    FormioResourceService.prototype.formFormio;\n    /** @type {?} */\n    FormioResourceService.prototype.formio;\n    /** @type {?} */\n    FormioResourceService.prototype.refresh;\n    /** @type {?} */\n    FormioResourceService.prototype.resourceLoading;\n    /** @type {?} */\n    FormioResourceService.prototype.resourceLoaded;\n    /** @type {?} */\n    FormioResourceService.prototype.resourceId;\n    /** @type {?} */\n    FormioResourceService.prototype.resources;\n    /** @type {?} */\n    FormioResourceService.prototype.formLoading;\n    /** @type {?} */\n    FormioResourceService.prototype.formLoaded;\n    /** @type {?} */\n    FormioResourceService.prototype.formResolve;\n    /** @type {?} */\n    FormioResourceService.prototype.formReject;\n    /** @type {?} */\n    FormioResourceService.prototype.appConfig;\n    /** @type {?} */\n    FormioResourceService.prototype.config;\n    /** @type {?} */\n    FormioResourceService.prototype.loader;\n    /** @type {?} */\n    FormioResourceService.prototype.resourcesService;\n}\n",null]}