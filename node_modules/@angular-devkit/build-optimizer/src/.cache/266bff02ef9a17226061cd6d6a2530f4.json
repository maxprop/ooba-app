{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/address/Address.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/address/Address.js","mtime":1581861142197},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _TextField = _interopRequireDefault(require(\"../textfield/TextField\"));\n\nvar _Formio = _interopRequireDefault(require(\"../../Formio\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar AddressComponent =\n/*#__PURE__*/\nfunction (_TextFieldComponent) {\n  _inherits(AddressComponent, _TextFieldComponent);\n\n  _createClass(AddressComponent, null, [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _TextField.default.schema.apply(_TextField.default, [{\n        type: 'address',\n        label: 'Address',\n        key: 'address',\n        map: {\n          region: '',\n          key: ''\n        }\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Address Field',\n        group: 'advanced',\n        icon: 'fa fa-home',\n        documentation: 'http://help.form.io/userguide/#address',\n        weight: 30,\n        schema: AddressComponent.schema()\n      };\n    }\n  }]);\n\n  function AddressComponent(component, options, data) {\n    var _this;\n\n    _classCallCheck(this, AddressComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddressComponent).call(this, component, options, data));\n    var src = 'https://maps.googleapis.com/maps/api/js?v=3&libraries=places&callback=googleMapsCallback';\n\n    if (component.map && component.map.key) {\n      src += \"&key=\".concat(component.map.key);\n    }\n\n    if (component.map && component.map.region) {\n      src += \"&region=\".concat(component.map.region);\n    }\n\n    _Formio.default.requireLibrary('googleMaps', 'google.maps.places', src); // Keep track of the full addresses.\n\n\n    _this.addresses = [];\n    return _this;\n  }\n\n  _createClass(AddressComponent, [{\n    key: \"setValueAt\",\n    value: function setValueAt(index, value, flags) {\n      flags = flags || {};\n\n      if (!flags.noDefault && (value === null || value === undefined)) {\n        value = this.defaultValue;\n      }\n\n      this.addresses[index] = value;\n\n      if (value && value.formatted_address) {\n        this.inputs[index].value = value.formatted_address;\n      }\n    }\n  }, {\n    key: \"getValueAt\",\n    value: function getValueAt(index) {\n      return this.addresses[index];\n    }\n    /**\n     * Start the autocomplete and the input listeners\n     *\n     * @param input\n     *   The input field\n     * @param autoCompleteOptions\n     *   The default option for the autocompletion\n     */\n\n  }, {\n    key: \"autoCompleteInit\",\n    value: function autoCompleteInit(input, autoCompleteOptions) {\n      var _this2 = this;\n\n      // Set attribute autoComplete to off\n      input.setAttribute('autocomplete', 'off'); // Init suggestions list\n\n      this.autoCompleteSuggestions = []; // Start Google AutocompleteService\n\n      var autoComplete = new google.maps.places.AutocompleteService(); // Create suggestions container\n\n      var suggestionContainer = document.createElement('div');\n      suggestionContainer.classList.add('pac-container', 'pac-logo');\n      input.parentNode.appendChild(suggestionContainer); // Add listener on input field for input event\n\n      this.addEventListener(input, 'input', function () {\n        if (input.value) {\n          var options = {\n            input: input.value\n          };\n          autoComplete.getPlacePredictions(_lodash.default.defaultsDeep(options, autoCompleteOptions), function (suggestions, status) {\n            _this2.autoCompleteDisplaySuggestions(suggestions, status, suggestionContainer, input);\n          });\n        } else {\n          _this2.autoCompleteCleanSuggestions(suggestionContainer);\n\n          suggestionContainer.style.display = 'none';\n        }\n      }); // Add listener on input field for blur event\n\n      this.addEventListener(input, 'blur', function () {\n        // Delay to allow click on suggestion list\n        _lodash.default.delay(function () {\n          suggestionContainer.style.display = 'none';\n        }, 100);\n      }); // Add listener on input field for focus event\n\n      this.addEventListener(input, 'focus', function () {\n        if (suggestionContainer.childElementCount) {\n          suggestionContainer.style.display = 'block';\n        }\n      }); // Add listener on input field for focus event\n\n      this.addEventListener(window, 'resize', function () {\n        // Set the same width as input field\n        suggestionContainer.style.width = \"\".concat(input.offsetWidth, \"px\");\n      }); // Add listiner on input field for key event\n\n      this.autoCompleteKeyboardListener(suggestionContainer, input);\n    }\n    /**\n     * Add listiner on input field for key event\n     *\n     * @param suggestionContainer\n     *   Suggestions container\n     * @param input\n     *   Input field to listen\n     */\n\n  }, {\n    key: \"autoCompleteKeyboardListener\",\n    value: function autoCompleteKeyboardListener(suggestionContainer, input) {\n      var _this3 = this;\n\n      this.autoCompleteKeyCodeListener = function (event) {\n        if (input.value) {\n          switch (event.keyCode) {\n            case 38:\n              // UP\n              _this3.autoCompleteKeyUpInteraction(suggestionContainer, input);\n\n              break;\n\n            case 40:\n              // DOWN\n              _this3.autoCompleteKeyDownInteraction(suggestionContainer, input);\n\n              break;\n\n            case 9:\n              // TAB\n              _this3.autoCompleteKeyValidationInteraction(suggestionContainer, input);\n\n              break;\n\n            case 13:\n              // ENTER\n              _this3.autoCompleteKeyValidationInteraction(suggestionContainer, input);\n\n              break;\n          }\n        }\n      };\n\n      this.addEventListener(input, 'keydown', this.autoCompleteKeyCodeListener);\n    }\n    /**\n     * Action when key up is trigger\n     *\n     * @param suggestionContainer\n     *   Suggestions container\n     * @param input\n     *   Input field to listen\n     */\n\n  }, {\n    key: \"autoCompleteKeyUpInteraction\",\n    value: function autoCompleteKeyUpInteraction(suggestionContainer, input) {\n      var elementSelected = document.querySelector('.pac-item-selected');\n\n      if (!elementSelected) {\n        // Returns the bottom of the list.\n        return this.autoCompleteListDecorator(suggestionContainer.lastChild, input);\n      } else {\n        // Transverse the list in reverse order.\n        var previousSibling = elementSelected.previousSibling;\n\n        if (previousSibling) {\n          this.autoCompleteListDecorator(previousSibling, input);\n        } else {\n          // Return to input value\n          elementSelected.classList.remove('pac-item-selected');\n          input.value = this.autoCompleteInputValue;\n        }\n      }\n    }\n    /**\n     * Action when key down is trigger\n     *\n     * @param suggestionContainer\n     *   Suggestions container\n     * @param input\n     *   Input field to listen\n     */\n\n  }, {\n    key: \"autoCompleteKeyDownInteraction\",\n    value: function autoCompleteKeyDownInteraction(suggestionContainer, input) {\n      var elementSelected = document.querySelector('.pac-item-selected');\n\n      if (!elementSelected) {\n        // Start at the top of the list.\n        if (suggestionContainer.firstChild) {\n          return this.autoCompleteListDecorator(suggestionContainer.firstChild, input);\n        }\n      } else {\n        // Transverse the list from top down.\n        var nextSibling = elementSelected.nextSibling;\n\n        if (nextSibling) {\n          this.autoCompleteListDecorator(nextSibling, input);\n        } else {\n          // Return to input value\n          elementSelected.classList.remove('pac-item-selected');\n          input.value = this.autoCompleteInputValue;\n        }\n      }\n    }\n    /**\n     * Action when validation is trigger\n     *\n     * @param suggestionContainer\n     *   Suggestions container\n     * @param input\n     *   Input field to listen\n     */\n\n  }, {\n    key: \"autoCompleteKeyValidationInteraction\",\n    value: function autoCompleteKeyValidationInteraction(suggestionContainer, input) {\n      var elementSelected = document.querySelector('.pac-item-selected');\n\n      if (elementSelected) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.autoCompleteSuggestions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var suggestion = _step.value;\n            var content = elementSelected.textContent || elementSelected.innerText;\n\n            if (content === suggestion.description) {\n              this.autoCompleteServiceListener(suggestion, suggestionContainer, input);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        elementSelected.classList.remove('pac-item-selected');\n      }\n    }\n    /**\n     * Highlight suggestion selected\n     *\n     * @param item\n     *   Item selected in suggestions container\n     * @param input\n     *   Input field to listen\n     */\n\n  }, {\n    key: \"autoCompleteListDecorator\",\n    value: function autoCompleteListDecorator(item, input) {\n      var elementSelected = document.querySelector('.pac-item-selected');\n\n      if (elementSelected) {\n        elementSelected.classList.remove('pac-item-selected');\n      }\n\n      input.value = item.textContent;\n      item.classList.add('pac-item-selected');\n    }\n    /**\n     * Filter method to return if the suggestion should be displayed\n     *\n     * @param data\n     *   Data to check\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"autoCompleteFilterSuggestion\",\n    value: function autoCompleteFilterSuggestion(data) {\n      var result = this.evaluate(this.component.map.autoCompleteFilter, {\n        show: true,\n        data: data\n      }, 'show');\n\n      if (result === null) {\n        return true;\n      }\n\n      return result.toString() === 'true';\n    }\n    /**\n     * Clean suggestions list\n     *\n     * @param suggestionContainer\n     *   Container tag\n     */\n\n  }, {\n    key: \"autoCompleteCleanSuggestions\",\n    value: function autoCompleteCleanSuggestions(suggestionContainer) {\n      // Clean click listener\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.autoCompleteSuggestions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var suggestion = _step2.value;\n          suggestion.item.removeEventListener('click', suggestion.clickListener);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.autoCompleteSuggestions = []; // Delete current suggestion list\n\n      while (suggestionContainer.firstChild) {\n        suggestionContainer.removeChild(suggestionContainer.firstChild);\n      }\n    }\n    /**\n     * Display suggestions when API returns value\n     *\n     * @param suggestions\n     *   Suggestions returned\n     * @param status\n     *   State returned\n     * @param suggestionContainer\n     *   Suggestions container\n     * @param input\n     *   Input field to listen\n     */\n\n  }, {\n    key: \"autoCompleteDisplaySuggestions\",\n    value: function autoCompleteDisplaySuggestions(suggestions, status, suggestionContainer, input) {\n      // Set the same width as input field\n      suggestionContainer.style.width = \"\".concat(input.offsetWidth, \"px\"); // Set the default input value\n\n      this.autoCompleteInputValue = input.value;\n      this.autoCompleteCleanSuggestions(suggestionContainer);\n\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        suggestionContainer.style.display = 'none';\n        return;\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = suggestions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var suggestion = _step3.value;\n\n          if (this.autoCompleteFilterSuggestion(suggestion)) {\n            this.autoCompleteSuggestions.push(suggestion);\n            this.autoCompleteSuggestionBuilder(suggestion, suggestionContainer, input);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (!suggestionContainer.childElementCount) {\n        this.autoCompleteCleanSuggestions(suggestionContainer);\n        suggestionContainer.style.display = 'none';\n      } else {\n        suggestionContainer.style.display = 'block';\n      }\n    }\n    /**\n     * Draw a suggestion in the list\n     *\n     * @param suggestion\n     *   Suggestion to draw\n     * @param suggestionContainer\n     *   Suggestions container\n     * @param input\n     *   Input field to listen\n     */\n\n    /* eslint-disable max-depth, max-statements */\n\n  }, {\n    key: \"autoCompleteSuggestionBuilder\",\n    value: function autoCompleteSuggestionBuilder(suggestion, suggestionContainer, input) {\n      var _this4 = this;\n\n      var item = document.createElement('div');\n      item.classList.add('pac-item');\n      var itemLogo = document.createElement('span');\n      itemLogo.classList.add('pac-icon', 'pac-icon-marker');\n      item.appendChild(itemLogo); // Draw Main part\n\n      var itemMain = document.createElement('span');\n      itemMain.classList.add('pac-item-query');\n\n      if (suggestion.structured_formatting.main_text_matched_substrings) {\n        var matches = suggestion.structured_formatting.main_text_matched_substrings;\n\n        for (var k in matches) {\n          var part = matches[k];\n\n          if (k === 0 && part.offset > 0) {\n            itemMain.appendChild(document.createTextNode(suggestion.structured_formatting.main_text.substring(0, part.offset)));\n          }\n\n          var itemBold = document.createElement('span');\n          itemBold.classList.add('pac-matched');\n          itemBold.appendChild(document.createTextNode(suggestion.structured_formatting.main_text.substring(part.offset, part.offset + part.length)));\n          itemMain.appendChild(itemBold);\n\n          if (k === matches.length - 1) {\n            var content = suggestion.structured_formatting.main_text.substring(part.offset + part.length);\n\n            if (content.length > 0) {\n              itemMain.appendChild(document.createTextNode(content));\n            }\n          }\n        }\n      } else {\n        itemMain.appendChild(document.createTextNode(suggestion.structured_formatting.main_text));\n      }\n\n      item.appendChild(itemMain); // Draw secondary part\n\n      if (suggestion.structured_formatting.secondary_text) {\n        var itemSecondary = document.createElement('span');\n\n        if (suggestion.structured_formatting.secondary_text_matched_substrings) {\n          var _matches = suggestion.structured_formatting.secondary_text_matched_substrings;\n\n          for (var _k in _matches) {\n            var _part = _matches[_k];\n\n            if (_k === 0 && _part.offset > 0) {\n              itemSecondary.appendChild(document.createTextNode(suggestion.structured_formatting.secondary_text.substring(0, _part.offset)));\n            }\n\n            var _itemBold = document.createElement('span');\n\n            _itemBold.classList.add('pac-matched');\n\n            _itemBold.appendChild(document.createTextNode(suggestion.structured_formatting.secondary_text.substring(_part.offset, _part.offset + _part.length)));\n\n            itemSecondary.appendChild(_itemBold);\n\n            if (_k === _matches.length - 1) {\n              var _content = suggestion.structured_formatting.secondary_text.substring(_part.offset + _part.length);\n\n              if (_content.length > 0) {\n                itemSecondary.appendChild(document.createTextNode(_content));\n              }\n            }\n          }\n        } else {\n          itemSecondary.appendChild(document.createTextNode(suggestion.structured_formatting.secondary_text));\n        }\n\n        item.appendChild(itemSecondary);\n      }\n\n      suggestionContainer.appendChild(item);\n\n      var clickListener = function clickListener() {\n        input.value = suggestion.description;\n        _this4.autoCompleteInputValue = suggestion.description;\n\n        _this4.autoCompleteServiceListener(suggestion, suggestionContainer, input);\n      };\n\n      suggestion.clickListener = clickListener;\n      suggestion.item = item;\n\n      if ('addEventListener' in item) {\n        item.addEventListener('click', clickListener, false);\n      } else if ('attachEvent' in item) {\n        item.attachEvent('onclick', clickListener);\n      }\n    }\n    /* eslint-enable max-depth, max-statements */\n\n    /**\n     * Get detailed information and set it as value\n     *\n     * @param suggestion\n     *   Suggestion to draw\n     * @param suggestionContainer\n     *   Suggestions container\n     * @param input\n     *   Input field to listen\n     */\n\n  }, {\n    key: \"autoCompleteServiceListener\",\n    value: function autoCompleteServiceListener(suggestion, suggestionContainer, input) {\n      var _this5 = this;\n\n      var service = new google.maps.places.PlacesService(input);\n      service.getDetails({\n        placeId: suggestion.place_id\n      }, function (place, status) {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          _this5.setValue(place);\n        }\n      });\n    }\n  }, {\n    key: \"addInput\",\n    value: function addInput(input, container) {\n      var _this6 = this;\n\n      _get(_getPrototypeOf(AddressComponent.prototype), \"addInput\", this).call(this, input, container);\n\n      _Formio.default.libraryReady('googleMaps').then(function () {\n        var autoCompleteOptions = {};\n\n        if (_this6.component.map) {\n          autoCompleteOptions = _this6.component.map.autoCompleteOptions || {};\n\n          if (autoCompleteOptions.location) {\n            var _autoCompleteOptions$ = autoCompleteOptions.location,\n                lat = _autoCompleteOptions$.lat,\n                lng = _autoCompleteOptions$.lng;\n            autoCompleteOptions.location = new google.maps.LatLng(lat, lng);\n          }\n        }\n\n        if (_this6.component.map && _this6.component.map.autoCompleteFilter) {\n          // Call custom autoComplete to filter suggestions\n          _this6.autoCompleteInit(input, autoCompleteOptions);\n        } else {\n          var autocomplete = new google.maps.places.Autocomplete(input);\n          autocomplete.addListener('place_changed', function () {\n            return _this6.setValue(autocomplete.getPlace());\n          });\n        }\n      });\n    }\n  }, {\n    key: \"elementInfo\",\n    value: function elementInfo() {\n      var info = _get(_getPrototypeOf(AddressComponent.prototype), \"elementInfo\", this).call(this);\n\n      info.attr.class += ' address-search';\n      return info;\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(value) {\n      return _lodash.default.get(value, 'formatted_address', '');\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return AddressComponent.schema();\n    }\n  }]);\n\n  return AddressComponent;\n}(_TextField.default);\n\nexports.default = AddressComponent;",null]}