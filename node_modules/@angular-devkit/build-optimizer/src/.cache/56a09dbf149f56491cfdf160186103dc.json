{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.js","mtime":1581861144631},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START lodash_some,lodash_find,_.._lib_utils.js PURE_IMPORTS_END */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n} return target; };\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nelse {\n    return Array.from(arr);\n} }\nimport some from 'lodash/some';\nimport find from 'lodash/find';\nimport { checkRendering, warn } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customHitsPerPage = connectHitsPerPage(function render(params, isFirstRendering) {\\n  // params = {\\n  //   items,\\n  //   refine,\\n  //   hasNoResults,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customHitsPerPage({\\n    items: [\\n      {value: 5, label: \\'5 results per page\\', default: true},\\n      {value: 10, label: \\'10 results per page\\'},\\n      {value: 42, label: \\'42 results per page\\'},\\n    ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectHitsPerPage.html\\n';\n/**\n * @typedef {Object} HitsPerPageRenderingOptionsItem\n * @property {number} value Number of hits to display per page.\n * @property {string} label Label to display in the option.\n * @property {boolean} isRefined Indicates if it's the current refined value.\n */\n/**\n * @typedef {Object} HitsPerPageWidgetOptionsItem\n * @property {number} value Number of hits to display per page.\n * @property {string} label Label to display in the option.\n * @property {boolean} default The default hits per page on first search.\n */\n/**\n * @typedef {Object} HitsPerPageRenderingOptions\n * @property {HitsPerPageRenderingOptionsItem[]} items Array of objects defining the different values and labels.\n * @property {function(number)} refine Sets the number of hits per page and trigger a search.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams Original `HitsPerPageWidgetOptions` forwarded to `renderFn`.\n */\n/**\n * @typedef {Object} HitsPerPageWidgetOptions\n * @property {HitsPerPageWidgetOptionsItem[]} items Array of objects defining the different values and labels.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n/**\n * **HitsPerPage** connector provides the logic to create custom widget that will\n * allow a user to choose to display more or less results from Algolia.\n *\n * This connector provides a `refine()` function to change the hits per page configuration and trigger a new search.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/hits-per-page/js/\n * @param {function(HitsPerPageRenderingOptions, boolean)} renderFn Rendering function for the custom **HitsPerPage** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(HitsPerPageWidgetOptions)} Re-usable widget factory for a custom **HitsPerPage** widget.\n * @example\n * // custom `renderFn` to render the custom HitsPerPage widget\n * function renderFn(HitsPerPageRenderingOptions, isFirstRendering) {\n *   var containerNode = HitsPerPageRenderingOptions.widgetParams.containerNode\n *   var items = HitsPerPageRenderingOptions.items\n *   var refine = HitsPerPageRenderingOptions.refine\n *\n *   if (isFirstRendering) {\n *     var markup = '<select></select>';\n *     containerNode.append(markup);\n *   }\n *\n *   const itemsHTML = items.map(({value, label, isRefined}) => `\n *     <option\n *       value=\"${value}\"\n *       ${isRefined ? 'selected' : ''}\n *     >\n *       ${label}\n *     </option>\n *   `);\n *\n *   containerNode\n *     .find('select')\n *     .html(itemsHTML);\n *\n *   containerNode\n *     .find('select')\n *     .off('change')\n *     .on('change', e => { refine(e.target.value); });\n * }\n *\n * // connect `renderFn` to HitsPerPage logic\n * var customHitsPerPage = instantsearch.connectors.connectHitsPerPage(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customHitsPerPage({\n *     containerNode: $('#custom-hits-per-page-container'),\n *     items: [\n *       {value: 6, label: '6 per page', default: true},\n *       {value: 12, label: '12 per page'},\n *       {value: 24, label: '24 per page'},\n *     ],\n *   })\n * );\n */\nexport default function connectHitsPerPage(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var userItems = widgetParams.items, _widgetParams$transfo = widgetParams.transformItems, transformItems = _widgetParams$transfo === undefined ? function (items) {\n            return items;\n        } : _widgetParams$transfo;\n        var items = userItems;\n        if (!items) {\n            throw new Error(usage);\n        }\n        var defaultValues = items.filter(function (item) {\n            return item.default;\n        });\n        if (defaultValues.length > 1) {\n            throw new Error('[Error][hitsPerPageSelector] more than one default value is specified in `items[]`\\nThe first one will be picked, you should probably set only one default value');\n        }\n        var defaultValue = find(userItems, function (item) {\n            return item.default === true;\n        });\n        return {\n            getConfiguration: function getConfiguration() {\n                return defaultValues.length > 0 ? { hitsPerPage: defaultValues[0].value } : {};\n            },\n            init: function init(_ref) {\n                var helper = _ref.helper, state = _ref.state, instantSearchInstance = _ref.instantSearchInstance;\n                var isCurrentInOptions = some(items, function (item) {\n                    return Number(state.hitsPerPage) === Number(item.value);\n                });\n                if (!isCurrentInOptions) {\n                    if (state.hitsPerPage === undefined) {\n                        if (window.console) {\n                            warn('[hitsPerPageSelector] hitsPerPage not defined.\\n  You should probably set the value `hitsPerPage`\\n  using the searchParameters attribute of the instantsearch constructor.');\n                        }\n                    }\n                    else if (window.console) {\n                        warn('[hitsPerPageSelector] No item in `items`\\n  with `value: hitsPerPage` (hitsPerPage: ' + state.hitsPerPage + ')');\n                    }\n                    items = [{ value: '', label: '' }].concat(_toConsumableArray(items));\n                }\n                this.setHitsPerPage = function (value) {\n                    return !value && value !== 0 ? helper.setQueryParameter('hitsPerPage', undefined).search() : helper.setQueryParameter('hitsPerPage', value).search();\n                };\n                renderFn({\n                    items: transformItems(this._normalizeItems(state)),\n                    refine: this.setHitsPerPage,\n                    hasNoResults: true,\n                    widgetParams: widgetParams,\n                    instantSearchInstance: instantSearchInstance\n                }, true);\n            },\n            render: function render(_ref2) {\n                var state = _ref2.state, results = _ref2.results, instantSearchInstance = _ref2.instantSearchInstance;\n                var hasNoResults = results.nbHits === 0;\n                renderFn({\n                    items: transformItems(this._normalizeItems(state)),\n                    refine: this.setHitsPerPage,\n                    hasNoResults: hasNoResults,\n                    widgetParams: widgetParams,\n                    instantSearchInstance: instantSearchInstance\n                }, false);\n            },\n            _normalizeItems: function _normalizeItems(_ref3) {\n                var hitsPerPage = _ref3.hitsPerPage;\n                return items.map(function (item) {\n                    return _extends({}, item, {\n                        isRefined: Number(item.value) === Number(hitsPerPage)\n                    });\n                });\n            },\n            dispose: function dispose() {\n                unmountFn();\n            },\n            getWidgetState: function getWidgetState(uiState, _ref4) {\n                var searchParameters = _ref4.searchParameters;\n                var hitsPerPage = searchParameters.hitsPerPage;\n                if (defaultValue && hitsPerPage === defaultValue.value || hitsPerPage === undefined || uiState.hitsPerPage === hitsPerPage) {\n                    return uiState;\n                }\n                return _extends({}, uiState, {\n                    hitsPerPage: hitsPerPage\n                });\n            },\n            getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n                var uiState = _ref5.uiState;\n                var hitsPerPage = uiState.hitsPerPage;\n                if (hitsPerPage)\n                    return searchParameters.setQueryParameter('hitsPerPage', uiState.hitsPerPage);\n                if (defaultValue) {\n                    return searchParameters.setQueryParameter('hitsPerPage', defaultValue.value);\n                }\n                return searchParameters.setQueryParameter('hitsPerPage', undefined);\n            }\n        };\n    };\n}\n",null]}