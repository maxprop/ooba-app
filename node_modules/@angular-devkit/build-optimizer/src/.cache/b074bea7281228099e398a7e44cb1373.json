{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/price-ranges/generate-ranges.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/price-ranges/generate-ranges.js","mtime":1581861144637},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction round(v, precision) {\n    var res = Math.round(v / precision) * precision;\n    if (res < 1) {\n        res = 1;\n    }\n    return res;\n}\nfunction generateRanges(stats) {\n    // cannot compute any range\n    if (stats.min === stats.max) {\n        return [];\n    }\n    var precision = void 0;\n    if (stats.avg < 100) {\n        precision = 1;\n    }\n    else if (stats.avg < 1000) {\n        precision = 10;\n    }\n    else {\n        precision = 100;\n    }\n    var avg = round(Math.round(stats.avg), precision);\n    var min = Math.ceil(stats.min);\n    var max = round(Math.floor(stats.max), precision);\n    while (max > stats.max) {\n        max -= precision;\n    }\n    var next = void 0;\n    var from = void 0;\n    var facetValues = [];\n    if (min !== max) {\n        next = min;\n        facetValues.push({\n            to: next\n        });\n        while (next < avg) {\n            from = facetValues[facetValues.length - 1].to;\n            next = round(from + (avg - min) / 3, precision);\n            if (next <= from) {\n                next = from + 1;\n            }\n            facetValues.push({\n                from: from,\n                to: next\n            });\n        }\n        while (next < max) {\n            from = facetValues[facetValues.length - 1].to;\n            next = round(from + (max - avg) / 3, precision);\n            if (next <= from) {\n                next = from + 1;\n            }\n            facetValues.push({\n                from: from,\n                to: next\n            });\n        }\n        if (facetValues.length === 1) {\n            if (next !== avg) {\n                facetValues.push({\n                    from: next,\n                    to: avg\n                });\n                next = avg;\n            }\n        }\n        if (facetValues.length === 1) {\n            facetValues[0].from = stats.min;\n            facetValues[0].to = stats.max;\n        }\n        else {\n            delete facetValues[facetValues.length - 1].to;\n        }\n    }\n    return facetValues;\n}\nexport default generateRanges;\n",null]}