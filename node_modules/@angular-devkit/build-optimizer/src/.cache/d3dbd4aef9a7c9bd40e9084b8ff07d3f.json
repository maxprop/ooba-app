{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/components/formio/formio.component.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/components/formio/formio.component.js","mtime":1581861141282},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { Component, Input, Output, EventEmitter, ViewEncapsulation, Optional, ViewChild } from '@angular/core';\nimport { FormioService } from '../../formio.service';\nimport { FormioLoader } from '../loader/formio.loader';\nimport { FormioAlerts } from '../alerts/formio.alerts';\nimport { FormioAppConfig } from '../../formio.config';\nimport { isEmpty, get, assign } from 'lodash';\nimport { Formio, Form, Utils } from 'formiojs';\n/* tslint:disable */\nvar FormioComponent = /*@__PURE__*/ (function () {\n    function FormioComponent(loader, config) {\n        var _this = this;\n        this.loader = loader;\n        this.config = config;\n        this.submission = {};\n        this.readOnly = false;\n        this.viewOnly = false;\n        this.noeval = false;\n        this.hooks = {};\n        this.render = new EventEmitter();\n        this.customEvent = new EventEmitter();\n        this.submit = new EventEmitter();\n        this.prevPage = new EventEmitter();\n        this.nextPage = new EventEmitter();\n        this.beforeSubmit = new EventEmitter();\n        this.change = new EventEmitter();\n        this.invalid = new EventEmitter();\n        this.errorChange = new EventEmitter();\n        this.formLoad = new EventEmitter();\n        this.submissionLoad = new EventEmitter();\n        this.ready = new EventEmitter();\n        this.initialized = false;\n        this.alerts = new FormioAlerts();\n        this.submitting = false;\n        if (this.config) {\n            Formio.setBaseUrl(this.config.apiUrl);\n            Formio.setProjectUrl(this.config.appUrl);\n        }\n        else {\n            console.warn('You must provide an AppConfig within your application!');\n        }\n        this.formioReady = new Promise((function (ready) {\n            _this.formioReadyResolve = ready;\n        }));\n    }\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    FormioComponent.prototype.setForm = /**\n     * @param {?} form\n     * @return {?}\n     */\n        function (form) {\n            var _this = this;\n            this.form = form;\n            if (this.formio) {\n                this.formio.destroy();\n            }\n            // Clear out the element to render the new form.\n            if (this.formioElement && this.formioElement.nativeElement) {\n                this.formioElement.nativeElement.innerHTML = '';\n            }\n            /** @type {?} */\n            var Renderer = this.renderer || Form;\n            this.formio = (new Renderer(this.formioElement ? this.formioElement.nativeElement : null, this.form, assign({}, {\n                icons: get(this.config, 'icons', 'fontawesome'),\n                noAlerts: get(this.options, 'noAlerts', true),\n                readOnly: this.readOnly,\n                viewAsHtml: this.viewOnly,\n                i18n: get(this.options, 'i18n', null),\n                fileService: get(this.options, 'fileService', null),\n                hooks: this.hooks\n            }, this.renderOptions || {}))).create();\n            if (this.url) {\n                this.formio.setUrl(this.url, this.formioOptions || {});\n            }\n            if (this.src) {\n                this.formio.setUrl(this.src, this.formioOptions || {});\n            }\n            this.formio.nosubmit = true;\n            this.formio.on('prevPage', (function (data) { return _this.onPrevPage(data); }));\n            this.formio.on('nextPage', (function (data) { return _this.onNextPage(data); }));\n            this.formio.on('change', (function (value) { return _this.change.emit(value); }));\n            this.formio.on('customEvent', (function (event) {\n                return _this.customEvent.emit(event);\n            }));\n            this.formio.on('submit', (function (submission) {\n                return _this.submitForm(submission);\n            }));\n            this.formio.on('error', (function (err) { return _this.onError(err); }));\n            this.formio.on('render', (function () { return _this.render.emit(); }));\n            this.formio.on('formLoad', (function (loadedForm) {\n                return _this.formLoad.emit(loadedForm);\n            }));\n            this.formio.form = this.form;\n            return this.formio.ready.then((function () {\n                _this.loader.loading = false;\n                _this.ready.emit(_this);\n                _this.formioReadyResolve(_this.formio);\n                if (_this.formio.submissionReady) {\n                    _this.formio.submissionReady.then((function (submission) {\n                        _this.submissionLoad.emit(submission);\n                    }));\n                }\n                return _this.formio;\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    FormioComponent.prototype.initialize = /**\n     * @return {?}\n     */\n        function () {\n            if (this.initialized) {\n                return;\n            }\n            this.options = Object.assign({\n                errors: {\n                    message: 'Please fix the following errors before submitting.'\n                },\n                alerts: {\n                    submitMessage: 'Submission Complete.'\n                },\n                disableAlerts: false,\n                hooks: {\n                    beforeSubmit: null\n                }\n            }, this.options);\n            this.initialized = true;\n        };\n    /**\n     * @return {?}\n     */\n    FormioComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            Utils.Evaluator.noeval = this.noeval;\n            this.initialize();\n            if (this.language) {\n                this.language.subscribe((function (lang) {\n                    _this.formio.language = lang;\n                }));\n            }\n            if (this.refresh) {\n                this.refresh.subscribe((function (refresh) {\n                    return _this.onRefresh(refresh);\n                }));\n            }\n            if (this.error) {\n                this.error.subscribe((function (err) { return _this.onError(err); }));\n            }\n            if (this.success) {\n                this.success.subscribe((function (message) {\n                    _this.alerts.setAlert({\n                        type: 'success',\n                        message: message || get(_this.options, 'alerts.submitMessage')\n                    });\n                }));\n            }\n            if (this.src) {\n                if (!this.service) {\n                    this.service = new FormioService(this.src);\n                }\n                this.loader.loading = true;\n                this.service.loadForm({ params: { live: 1 } }).subscribe((function (form) {\n                    if (form && form.components) {\n                        _this.setForm(form);\n                    }\n                    // if a submission is also provided.\n                    if (isEmpty(_this.submission) &&\n                        _this.service &&\n                        _this.service.formio.submissionId) {\n                        _this.service.loadSubmission().subscribe((function (submission) {\n                            if (_this.readOnly) {\n                                _this.formio.options.readOnly = true;\n                            }\n                            _this.submission = _this.formio.submission = submission;\n                        }), (function (err) { return _this.onError(err); }));\n                    }\n                }), (function (err) { return _this.onError(err); }));\n            }\n            if (this.url && !this.service) {\n                this.service = new FormioService(this.url);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    FormioComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.formio) {\n                this.formio.destroy();\n            }\n        };\n    /**\n     * @param {?} refresh\n     * @return {?}\n     */\n    FormioComponent.prototype.onRefresh = /**\n     * @param {?} refresh\n     * @return {?}\n     */\n        function (refresh) {\n            var _this = this;\n            this.formioReady.then((function () {\n                if (refresh.form) {\n                    _this.formio.setForm(refresh.form).then((function () {\n                        if (refresh.submission) {\n                            _this.formio.setSubmission(refresh.submission);\n                        }\n                    }));\n                }\n                else if (refresh.submission) {\n                    _this.formio.setSubmission(refresh.submission);\n                }\n                else {\n                    switch (refresh.property) {\n                        case 'submission':\n                            _this.formio.submission = refresh.value;\n                            break;\n                        case 'form':\n                            _this.formio.form = refresh.value;\n                            break;\n                    }\n                }\n            }));\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormioComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            var _this = this;\n            this.initialize();\n            if (changes.form && changes.form.currentValue) {\n                this.setForm(changes.form.currentValue);\n            }\n            this.formioReady.then((function () {\n                if (changes.submission && changes.submission.currentValue) {\n                    _this.formio.submission = changes.submission.currentValue;\n                }\n                if (changes.hideComponents) {\n                    _this.formio.hideComponents(changes.hideComponents.currentValue);\n                }\n            }));\n        };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    FormioComponent.prototype.onPrevPage = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            this.alerts.setAlerts([]);\n            this.prevPage.emit(data);\n        };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    FormioComponent.prototype.onNextPage = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            this.alerts.setAlerts([]);\n            this.nextPage.emit(data);\n        };\n    /**\n     * @param {?} submission\n     * @param {?} saved\n     * @param {?=} noemit\n     * @return {?}\n     */\n    FormioComponent.prototype.onSubmit = /**\n     * @param {?} submission\n     * @param {?} saved\n     * @param {?=} noemit\n     * @return {?}\n     */\n        function (submission, saved, noemit) {\n            this.submitting = false;\n            if (saved) {\n                this.formio.emit('submitDone', submission);\n            }\n            if (!noemit) {\n                this.submit.emit(submission);\n            }\n            if (!this.success) {\n                this.alerts.setAlert({\n                    type: 'success',\n                    message: get(this.options, 'alerts.submitMessage')\n                });\n            }\n        };\n    /**\n     * @param {?} err\n     * @return {?}\n     */\n    FormioComponent.prototype.onError = /**\n     * @param {?} err\n     * @return {?}\n     */\n        function (err) {\n            var _this = this;\n            this.loader.loading = false;\n            this.alerts.setAlerts([]);\n            this.submitting = false;\n            if (!err) {\n                return;\n            }\n            // Make sure it is an array.\n            /** @type {?} */\n            var errors = Array.isArray(err) ? err : [err];\n            // Emit these errors again.\n            this.errorChange.emit(errors);\n            // Iterate through each one and set the alerts array.\n            errors.forEach((function (error) {\n                var _a = error\n                    ? error.details\n                        ? {\n                            message: error.details.map((function (detail) { return detail.message; })).join(' '),\n                            paths: error.details.map((function (detail) { return detail.path; })),\n                        }\n                        : {\n                            message: error.message || error.toString(),\n                            paths: error.path ? [error.path] : [],\n                        }\n                    : {\n                        message: '',\n                        paths: [],\n                    }, message = _a.message, paths = _a.paths;\n                _this.alerts.addAlert({\n                    type: 'danger',\n                    message: message,\n                });\n                paths.forEach((function (path) {\n                    /** @type {?} */\n                    var component = _this.formio.getComponent(path);\n                    /** @type {?} */\n                    var components = Array.isArray(component) ? component : [component];\n                    components.forEach((function (comp) { return comp.setCustomValidity(message, true); }));\n                }));\n            }));\n        };\n    /**\n     * @param {?} submission\n     * @return {?}\n     */\n    FormioComponent.prototype.submitExecute = /**\n     * @param {?} submission\n     * @return {?}\n     */\n        function (submission) {\n            var _this = this;\n            if (this.service && !this.url) {\n                this.service\n                    .saveSubmission(submission, this.submitOptions)\n                    .subscribe((function (sub) { return _this.onSubmit(sub, true); }), (function (err) { return _this.onError(err); }));\n            }\n            else {\n                this.onSubmit(submission, false);\n            }\n        };\n    /**\n     * @param {?} submission\n     * @return {?}\n     */\n    FormioComponent.prototype.submitForm = /**\n     * @param {?} submission\n     * @return {?}\n     */\n        function (submission) {\n            var _this = this;\n            // Keep double submits from occurring...\n            if (this.submitting) {\n                return;\n            }\n            this.submitting = true;\n            this.beforeSubmit.emit(submission);\n            // if they provide a beforeSubmit hook, then allow them to alter the submission asynchronously\n            // or even provide a custom Error method.\n            /** @type {?} */\n            var beforeSubmit = get(this.options, 'hooks.beforeSubmit');\n            if (beforeSubmit) {\n                beforeSubmit(submission, (function (err, sub) {\n                    if (err) {\n                        _this.onError(err);\n                        return;\n                    }\n                    _this.submitExecute(sub);\n                }));\n            }\n            else {\n                this.submitExecute(submission);\n            }\n        };\n    return FormioComponent;\n}());\nexport { FormioComponent };\nif (false) {\n    /** @type {?} */\n    FormioComponent.prototype.form;\n    /** @type {?} */\n    FormioComponent.prototype.submission;\n    /** @type {?} */\n    FormioComponent.prototype.src;\n    /** @type {?} */\n    FormioComponent.prototype.url;\n    /** @type {?} */\n    FormioComponent.prototype.service;\n    /** @type {?} */\n    FormioComponent.prototype.options;\n    /** @type {?} */\n    FormioComponent.prototype.formioOptions;\n    /** @type {?} */\n    FormioComponent.prototype.renderOptions;\n    /** @type {?} */\n    FormioComponent.prototype.submitOptions;\n    /** @type {?} */\n    FormioComponent.prototype.readOnly;\n    /** @type {?} */\n    FormioComponent.prototype.viewOnly;\n    /** @type {?} */\n    FormioComponent.prototype.noeval;\n    /** @type {?} */\n    FormioComponent.prototype.hideComponents;\n    /** @type {?} */\n    FormioComponent.prototype.refresh;\n    /** @type {?} */\n    FormioComponent.prototype.error;\n    /** @type {?} */\n    FormioComponent.prototype.success;\n    /** @type {?} */\n    FormioComponent.prototype.language;\n    /** @type {?} */\n    FormioComponent.prototype.hooks;\n    /** @type {?} */\n    FormioComponent.prototype.renderer;\n    /** @type {?} */\n    FormioComponent.prototype.render;\n    /** @type {?} */\n    FormioComponent.prototype.customEvent;\n    /** @type {?} */\n    FormioComponent.prototype.submit;\n    /** @type {?} */\n    FormioComponent.prototype.prevPage;\n    /** @type {?} */\n    FormioComponent.prototype.nextPage;\n    /** @type {?} */\n    FormioComponent.prototype.beforeSubmit;\n    /** @type {?} */\n    FormioComponent.prototype.change;\n    /** @type {?} */\n    FormioComponent.prototype.invalid;\n    /** @type {?} */\n    FormioComponent.prototype.errorChange;\n    /** @type {?} */\n    FormioComponent.prototype.formLoad;\n    /** @type {?} */\n    FormioComponent.prototype.submissionLoad;\n    /** @type {?} */\n    FormioComponent.prototype.ready;\n    /** @type {?} */\n    FormioComponent.prototype.formioElement;\n    /** @type {?} */\n    FormioComponent.prototype.formio;\n    /** @type {?} */\n    FormioComponent.prototype.initialized;\n    /** @type {?} */\n    FormioComponent.prototype.alerts;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormioComponent.prototype.formioReady;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormioComponent.prototype.formioReadyResolve;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormioComponent.prototype.submitting;\n    /** @type {?} */\n    FormioComponent.prototype.loader;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormioComponent.prototype.config;\n}\n",null]}