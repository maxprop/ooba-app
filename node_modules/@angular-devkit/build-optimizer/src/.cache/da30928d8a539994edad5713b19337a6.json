{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/checkbox/Checkbox.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/checkbox/Checkbox.js","mtime":1581861142210},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.function.name\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.reflect.set\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Base = _interopRequireDefault(require(\"../base/Base\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction set(target, property, value, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }\n\nfunction _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar CheckBoxComponent =\n/*#__PURE__*/\nfunction (_BaseComponent) {\n  _inherits(CheckBoxComponent, _BaseComponent);\n\n  function CheckBoxComponent() {\n    _classCallCheck(this, CheckBoxComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CheckBoxComponent).apply(this, arguments));\n  }\n\n  _createClass(CheckBoxComponent, [{\n    key: \"getRadioGroupItems\",\n    value: function getRadioGroupItems() {\n      var _this = this;\n\n      if (!this.isRadioCheckbox) {\n        return [];\n      }\n\n      return this.currentForm ? this.currentForm.getAllComponents().filter(function (c) {\n        return c.isRadioCheckbox && c.component.name === _this.component.name;\n      }) : [];\n    }\n  }, {\n    key: \"getRadioGroupValue\",\n    value: function getRadioGroupValue() {\n      if (!this.isRadioCheckbox) {\n        return null;\n      }\n\n      var selectedRadios = this.getRadioGroupItems().filter(function (c) {\n        return c.input.checked;\n      });\n      return _lodash.default.get(selectedRadios, '[0].component.value');\n    }\n  }, {\n    key: \"elementInfo\",\n    value: function elementInfo() {\n      var info = _get(_getPrototypeOf(CheckBoxComponent.prototype), \"elementInfo\", this).call(this);\n\n      info.type = 'input';\n      info.changeEvent = 'click';\n      info.attr.type = this.component.inputType || 'checkbox';\n      info.attr.class = 'form-check-input';\n\n      if (this.component.name) {\n        info.attr.name = \"data[\".concat(this.component.name, \"][\").concat(this.root.id, \"]\");\n      }\n\n      info.attr.value = this.component.value ? this.component.value : 0;\n      return info;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      // Refresh element info.\n      this.info = this.elementInfo();\n\n      if (this.viewOnly) {\n        return this.viewOnlyBuild();\n      }\n\n      if (!this.component.input) {\n        return;\n      }\n\n      this.createElement();\n      this.input = this.createInput(this.element);\n      this.createLabel(this.element, this.input);\n\n      if (!this.labelElement) {\n        this.addInput(this.input, this.element);\n      }\n\n      this.createDescription(this.element);\n      this.restoreValue();\n\n      if (this.shouldDisable) {\n        this.forceDisabled = true;\n      }\n\n      this.autofocus();\n      this.attachLogic();\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty(value) {\n      return _get(_getPrototypeOf(CheckBoxComponent.prototype), \"isEmpty\", this).call(this, value) || value === false;\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var className = \"form-check \".concat(this.className);\n\n      if (!this.labelIsHidden()) {\n        className += \" \".concat(this.component.inputType || 'checkbox');\n      } // If the element is already created, don't recreate.\n\n\n      if (this.element) {\n        //update class for case when Logic changed container class (customClass)\n        this.element.className = className;\n        return this.element;\n      }\n\n      this.element = this.ce('div', {\n        id: this.id,\n        class: className\n      });\n      this.element.component = this;\n    }\n  }, {\n    key: \"labelOnTheTopOrLeft\",\n    value: function labelOnTheTopOrLeft() {\n      return ['top', 'left'].includes(this.component.labelPosition);\n    }\n  }, {\n    key: \"labelOnTheTopOrBottom\",\n    value: function labelOnTheTopOrBottom() {\n      return ['top', 'bottom'].includes(this.component.labelPosition);\n    }\n  }, {\n    key: \"setInputLabelStyle\",\n    value: function setInputLabelStyle(label) {\n      if (this.component.labelPosition === 'left') {\n        _lodash.default.assign(label.style, {\n          textAlign: 'center',\n          paddingLeft: 0\n        });\n      }\n\n      if (this.labelOnTheTopOrBottom()) {\n        _lodash.default.assign(label.style, {\n          display: 'block',\n          textAlign: 'center',\n          paddingLeft: 0\n        });\n      }\n    }\n  }, {\n    key: \"setInputStyle\",\n    value: function setInputStyle(input) {\n      if (!input) {\n        return;\n      }\n\n      if (this.component.labelPosition === 'left') {\n        _lodash.default.assign(input.style, {\n          position: 'initial',\n          marginLeft: '7px'\n        });\n      }\n\n      if (this.labelOnTheTopOrBottom()) {\n        _lodash.default.assign(input.style, {\n          width: '100%',\n          position: 'initial',\n          marginLeft: 0\n        });\n      }\n    }\n  }, {\n    key: \"createLabel\",\n    value: function createLabel(container, input) {\n      var isLabelHidden = this.labelIsHidden();\n      var className = 'control-label form-check-label';\n\n      if (this.component.input && !this.options.inputsOnly && this.component.validate && this.component.validate.required) {\n        className += ' field-required';\n      }\n\n      this.labelElement = this.ce('label', {\n        class: className\n      });\n      this.addShortcut();\n      var labelOnTheTopOrOnTheLeft = this.labelOnTheTopOrLeft();\n\n      if (!isLabelHidden) {\n        // Create the SPAN around the textNode for better style hooks\n        this.labelSpan = this.ce('span');\n\n        if (this.info.attr.id) {\n          this.labelElement.setAttribute('for', this.info.attr.id);\n        }\n      }\n\n      if (!isLabelHidden && labelOnTheTopOrOnTheLeft) {\n        this.setInputLabelStyle(this.labelElement);\n        this.setInputStyle(input);\n        this.labelSpan.appendChild(this.text(this.component.label));\n        this.labelElement.appendChild(this.labelSpan);\n      }\n\n      this.addInput(input, this.labelElement);\n\n      if (!isLabelHidden && !labelOnTheTopOrOnTheLeft) {\n        this.setInputLabelStyle(this.labelElement);\n        this.setInputStyle(input);\n        this.labelSpan.appendChild(this.text(this.addShortcutToLabel()));\n        this.labelElement.appendChild(this.labelSpan);\n      }\n\n      this.createTooltip(this.labelElement);\n      container.appendChild(this.labelElement);\n    }\n  }, {\n    key: \"createInput\",\n    value: function createInput(container) {\n      if (!this.component.input) {\n        return;\n      }\n\n      var inputId = this.id;\n\n      if (this.options.row) {\n        inputId += \"-\".concat(this.options.row);\n      }\n\n      inputId += \"-\".concat(this.root.id);\n      this.info.attr.id = inputId;\n      var input = this.ce(this.info.type, this.info.attr);\n      this.errorContainer = container;\n      return input;\n    }\n  }, {\n    key: \"getValueAt\",\n    value: function getValueAt(index) {\n      if (this.isRadioCheckbox) {\n        return this.inputs[index].checked ? this.component.value : '';\n      }\n\n      return !!this.inputs[index].checked;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return _get(_getPrototypeOf(CheckBoxComponent.prototype), \"getValue\", this).call(this);\n    }\n  }, {\n    key: \"setCheckedState\",\n    value: function setCheckedState(value) {\n      if (!this.input) {\n        return;\n      }\n\n      if (this.isRadioCheckbox) {\n        this.input.value = value === this.component.value ? this.component.value : 0;\n        this.input.checked = value === this.component.value ? 1 : 0;\n      } else if (value === 'on') {\n        this.input.value = 1;\n        this.input.checked = 1;\n      } else if (value === 'off') {\n        this.input.value = 0;\n        this.input.checked = 0;\n      } else if (value) {\n        this.input.value = 1;\n        this.input.checked = 1;\n      } else {\n        this.input.value = 0;\n        this.input.checked = 0;\n      }\n\n      return value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, flags) {\n      flags = this.getFlags.apply(this, arguments);\n\n      if (this.isRadioCheckbox && !value) {\n        return;\n      }\n\n      this.setCheckedState(value);\n      return this.updateValue(flags, value);\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(value) {\n      return value ? 'Yes' : 'No';\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(CheckBoxComponent.prototype), \"destroy\", this).call(this);\n\n      this.removeShortcut();\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(flags, value) {\n      var _this2 = this;\n\n      if (!this.hasInput) {\n        return false;\n      }\n\n      if (this.isRadioCheckbox) {\n        if (value === undefined && this.input.checked) {\n          // Force all siblings elements in radio group to unchecked\n          this.getRadioGroupItems().filter(function (c) {\n            return c !== _this2 && c.input.checked;\n          }).forEach(function (c) {\n            return c.input.checked = false;\n          });\n          value = this.component.value;\n        } else {\n          value = this.getRadioGroupValue();\n        }\n      } else if (flags && flags.modified && this.input.checked && value === undefined) {\n        value = true;\n      }\n\n      var changed = _get(_getPrototypeOf(CheckBoxComponent.prototype), \"updateValue\", this).call(this, flags, value);\n\n      if (this.input) {\n        if (this.input.checked) {\n          this.input.setAttribute('checked', true);\n          this.addClass(this.element, 'checkbox-checked');\n        } else {\n          this.input.removeAttribute('checked');\n          this.removeClass(this.element, 'checkbox-checked');\n        }\n      }\n\n      return changed;\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return CheckBoxComponent.schema();\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      return this.isRadioCheckbox ? '' : (this.component.defaultValue || false).toString() === 'true';\n    }\n  }, {\n    key: \"hasSetValue\",\n    get: function get() {\n      return this.hasValue();\n    }\n  }, {\n    key: \"isRadioCheckbox\",\n    get: function get() {\n      return this.component.inputType === 'radio';\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"dataValue\",\n    set: function set(value) {\n      var setValue = _set(_getPrototypeOf(CheckBoxComponent.prototype), \"dataValue\", value, this, true);\n\n      if (this.isRadioCheckbox) {\n        _lodash.default.set(this.data, this.component.key, setValue === this.component.value);\n\n        this.setCheckedState(setValue);\n      }\n\n      return setValue;\n    },\n    get: function get() {\n      var getValue = _get(_getPrototypeOf(CheckBoxComponent.prototype), \"dataValue\", this);\n\n      if (this.isRadioCheckbox) {\n        _lodash.default.set(this.data, this.component.key, getValue === this.component.value);\n      }\n\n      return getValue;\n    }\n  }, {\n    key: \"key\",\n    get: function get() {\n      return this.isRadioCheckbox && this.component.name ? this.component.name : _get(_getPrototypeOf(CheckBoxComponent.prototype), \"key\", this);\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _Base.default.schema.apply(_Base.default, [{\n        type: 'checkbox',\n        inputType: 'checkbox',\n        label: 'Checkbox',\n        key: 'checkbox',\n        dataGridLabel: true,\n        labelPosition: 'right',\n        value: '',\n        name: ''\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Checkbox',\n        group: 'basic',\n        icon: 'fa fa-check-square',\n        documentation: 'http://help.form.io/userguide/#checkbox',\n        weight: 50,\n        schema: CheckBoxComponent.schema()\n      };\n    }\n  }]);\n\n  return CheckBoxComponent;\n}(_Base.default);\n\nexports.default = CheckBoxComponent;",null]}