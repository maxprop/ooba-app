{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/current-refined-values/connectCurrentRefinedValues.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/current-refined-values/connectCurrentRefinedValues.js","mtime":1581861144626},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START lodash_isUndefined,lodash_isBoolean,lodash_isString,lodash_isArray,lodash_isPlainObject,lodash_isFunction,lodash_isEmpty,lodash_map,lodash_reduce,lodash_filter,_.._lib_utils.js PURE_IMPORTS_END */\nimport isUndefined from 'lodash/isUndefined';\nimport isBoolean from 'lodash/isBoolean';\nimport isString from 'lodash/isString';\nimport isArray from 'lodash/isArray';\nimport isPlainObject from 'lodash/isPlainObject';\nimport isFunction from 'lodash/isFunction';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport reduce from 'lodash/reduce';\nimport filter from 'lodash/filter';\nimport { getRefinements, clearRefinements, checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customCurrentRefinedValues = connectCurrentRefinedValues(function renderFn(params, isFirstRendering) {\\n  // params = {\\n  //   attributes,\\n  //   clearAllClick,\\n  //   clearAllPosition,\\n  //   clearAllURL,\\n  //   refine,\\n  //   createURL,\\n  //   refinements,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customCurrentRefinedValues({\\n    [ attributes = [] ],\\n    [ onlyListedAttributes = false ],\\n    [ clearsQuery = false ],\\n    [ transformItems ],\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectCurrentRefinedValues.html\\n';\n/**\n * @typedef {Object} CurrentRefinement\n * @property {\"facet\"|\"exclude\"|\"disjunctive\"|\"hierarchical\"|\"numeric\"|\"query\"} type Type of refinement\n * @property {string} attributeName Attribute on which the refinement is applied\n * @property {string} name value of the refinement\n * @property {number} [numericValue] value if the attribute is numeric and used with a numeric filter\n * @property {boolean} [exhaustive] `true` if the count is exhaustive, only if applicable\n * @property {number} [count] number of items found, if applicable\n * @property {string} [query] value of the query if the type is query\n */\n/**\n * @typedef {Object} CurrentRefinedValuesRenderingOptions\n * @property {Object.<string, object>} attributes Original `CurrentRefinedValuesWidgetOptions.attributes` mapped by keys.\n * @property {function} clearAllClick Clears all the currently refined values.\n * @property {function} clearAllURL Generate a URL which leads to a state where all the refinements have been cleared.\n * @property {function(item)} refine Clears a single refinement.\n * @property {function(item): string} createURL Creates an individual url where a single refinement is cleared.\n * @property {CurrentRefinement[]} refinements All the current refinements.\n * @property {Object} widgetParams All original `CustomCurrentRefinedValuesWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * @typedef {Object} CurrentRefinedValuesAttributes\n * @property {string} name Mandatory field which is the name of the attribute.\n * @property {string} label The label to apply on a refinement per attribute.\n */\n/**\n * @typedef {Object} CustomCurrentRefinedValuesWidgetOptions\n * @property {CurrentRefinedValuesAttributes[]} [attributes = []] Specification for the display of\n * refinements per attribute (default: `[]`). By default, the widget will display all the filters\n * set with no special treatment for the label.\n * @property {boolean} [onlyListedAttributes = false] Limit the displayed refinement to the list specified.\n * @property {boolean} [clearsQuery = false] Clears also the active search query when using clearAll.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n/**\n * **CurrentRefinedValues** connector provides the logic to build a widget that will give\n * the user the ability to see all the currently applied filters and, remove some or all of\n * them.\n *\n * This provides a `refine(item)` function to remove a selected refinement and a `clearAllClick`\n * function to clear all the filters. Those functions can see their behaviour change based on\n * the widget options used.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/current-refinements/js/\n * @param {function(CurrentRefinedValuesRenderingOptions)} renderFn Rendering function for the custom **CurrentRefinedValues** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomCurrentRefinedValuesWidgetOptions)} Re-usable widget factory for a custom **CurrentRefinedValues** widget.\n * @example\n * // custom `renderFn` to render the custom ClearAll widget\n * function renderFn(CurrentRefinedValuesRenderingOptions, isFirstRendering) {\n *   var containerNode = CurrentRefinedValuesRenderingOptions.widgetParams.containerNode;\n *   if (isFirstRendering) {\n *     containerNode\n *       .html('<ul id=\"refinements\"></ul><div id=\"cta-container\"></div>');\n *   }\n *\n *   containerNode\n *     .find('#cta-container > a')\n *     .off('click');\n *\n *   containerNode\n *     .find('li > a')\n *     .each(function() { $(this).off('click') });\n *\n *   if (CurrentRefinedValuesRenderingOptions.refinements\n *       && CurrentRefinedValuesRenderingOptions.refinements.length > 0) {\n *     containerNode\n *       .find('#cta-container')\n *       .html('<a href=\"' + CurrentRefinedValuesRenderingOptions.clearAllURL + '\">Clear all </a>');\n *\n *     containerNode\n *       .find('#cta-container > a')\n *       .on('click', function(event) {\n *         event.preventDefault();\n *         CurrentRefinedValuesRenderingOptions.clearAllClick();\n *       });\n *\n *     var list = CurrentRefinedValuesRenderingOptions.refinements.map(function(refinement) {\n *       return '<li><a href=\"' + CurrentRefinedValuesRenderingOptions.createURL(refinement) + '\">'\n *         + refinement.computedLabel + ' ' + refinement.count + '</a></li>';\n *     });\n *\n *     CurrentRefinedValuesRenderingOptions.containerNode.find('ul').html(list);\n *     CurrentRefinedValuesRenderingOptions.containerNode.find('li > a').each(function(index) {\n *       $(this).on('click', function(event) {\n *         event.preventDefault();\n *\n *         var refinement = CurrentRefinedValuesRenderingOptions.refinements[index];\n *         CurrentRefinedValuesRenderingOptions.refine(refinement);\n *       });\n *     });\n *   } else {\n *     containerNode.find('#cta-container').html('');\n *     containerNode.find('ul').html('');\n *   }\n * }\n *\n * // connect `renderFn` to CurrentRefinedValues logic\n * var customCurrentRefinedValues = instantsearch.connectors.connectCurrentRefinedValues(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customCurrentRefinedValues({\n *     containerNode: $('#custom-crv-container'),\n *   })\n * );\n */\nexport default function connectCurrentRefinedValues(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _widgetParams$attribu = widgetParams.attributes, attributes = _widgetParams$attribu === undefined ? [] : _widgetParams$attribu, _widgetParams$onlyLis = widgetParams.onlyListedAttributes, onlyListedAttributes = _widgetParams$onlyLis === undefined ? false : _widgetParams$onlyLis, _widgetParams$clearsQ = widgetParams.clearsQuery, clearsQuery = _widgetParams$clearsQ === undefined ? false : _widgetParams$clearsQ, _widgetParams$transfo = widgetParams.transformItems, transformItems = _widgetParams$transfo === undefined ? function (items) {\n            return items;\n        } : _widgetParams$transfo;\n        var attributesOK = isArray(attributes) && reduce(attributes, function (res, val) {\n            return res && isPlainObject(val) && isString(val.name) && (isUndefined(val.label) || isString(val.label)) && (isUndefined(val.template) || isString(val.template) || isFunction(val.template)) && (isUndefined(val.transformData) || isFunction(val.transformData));\n        }, true);\n        var showUsage = false || !isArray(attributes) || !attributesOK || !isBoolean(onlyListedAttributes);\n        if (showUsage) {\n            throw new Error(usage);\n        }\n        var attributeNames = map(attributes, function (attribute) {\n            return attribute.name;\n        });\n        var restrictedTo = onlyListedAttributes ? attributeNames : undefined;\n        var attributesObj = reduce(attributes, function (res, attribute) {\n            res[attribute.name] = attribute;\n            return res;\n        }, {});\n        return {\n            init: function init(_ref) {\n                var helper = _ref.helper, createURL = _ref.createURL, instantSearchInstance = _ref.instantSearchInstance;\n                this._clearRefinementsAndSearch = function () {\n                    helper.setState(clearRefinements({\n                        helper: helper,\n                        whiteList: restrictedTo,\n                        clearsQuery: clearsQuery\n                    })).search();\n                };\n                this._createClearAllURL = function () {\n                    return createURL(clearRefinements({ helper: helper, whiteList: restrictedTo, clearsQuery: clearsQuery }));\n                };\n                var refinements = transformItems(getFilteredRefinements({}, helper.state, attributeNames, onlyListedAttributes, clearsQuery));\n                var _createURL = function _createURL(refinement) {\n                    return createURL(clearRefinementFromState(helper.state, refinement));\n                };\n                var _clearRefinement = function _clearRefinement(refinement) {\n                    return clearRefinement(helper, refinement);\n                };\n                renderFn({\n                    attributes: attributesObj,\n                    clearAllClick: this._clearRefinementsAndSearch,\n                    clearAllURL: this._createClearAllURL(),\n                    refine: _clearRefinement,\n                    createURL: _createURL,\n                    refinements: refinements,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, true);\n            },\n            render: function render(_ref2) {\n                var results = _ref2.results, helper = _ref2.helper, state = _ref2.state, createURL = _ref2.createURL, instantSearchInstance = _ref2.instantSearchInstance;\n                var refinements = transformItems(getFilteredRefinements(results, state, attributeNames, onlyListedAttributes, clearsQuery));\n                var _createURL = function _createURL(refinement) {\n                    return createURL(clearRefinementFromState(helper.state, refinement));\n                };\n                var _clearRefinement = function _clearRefinement(refinement) {\n                    return clearRefinement(helper, refinement);\n                };\n                renderFn({\n                    attributes: attributesObj,\n                    clearAllClick: this._clearRefinementsAndSearch,\n                    clearAllURL: this._createClearAllURL(),\n                    refine: _clearRefinement,\n                    createURL: _createURL,\n                    refinements: refinements,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, false);\n            },\n            dispose: function dispose() {\n                unmountFn();\n            }\n        };\n    };\n}\nfunction getRestrictedIndexForSort(attributeNames, otherAttributeNames, attributeName) {\n    var idx = attributeNames.indexOf(attributeName);\n    if (idx !== -1) {\n        return idx;\n    }\n    return attributeNames.length + otherAttributeNames.indexOf(attributeName);\n}\nfunction compareRefinements(attributeNames, otherAttributeNames, a, b) {\n    var idxa = getRestrictedIndexForSort(attributeNames, otherAttributeNames, a.attributeName);\n    var idxb = getRestrictedIndexForSort(attributeNames, otherAttributeNames, b.attributeName);\n    if (idxa === idxb) {\n        if (a.name === b.name) {\n            return 0;\n        }\n        return a.name < b.name ? -1 : 1;\n    }\n    return idxa < idxb ? -1 : 1;\n}\nfunction getFilteredRefinements(results, state, attributeNames, onlyListedAttributes, clearsQuery) {\n    var refinements = getRefinements(results, state, clearsQuery);\n    var otherAttributeNames = reduce(refinements, function (res, refinement) {\n        if (attributeNames.indexOf(refinement.attributeName) === -1 && res.indexOf(refinement.attributeName === -1)) {\n            res.push(refinement.attributeName);\n        }\n        return res;\n    }, []);\n    refinements = refinements.sort(compareRefinements.bind(null, attributeNames, otherAttributeNames));\n    if (onlyListedAttributes && !isEmpty(attributeNames)) {\n        refinements = filter(refinements, function (refinement) {\n            return attributeNames.indexOf(refinement.attributeName) !== -1;\n        });\n    }\n    return refinements.map(computeLabel);\n}\nfunction clearRefinementFromState(state, refinement) {\n    switch (refinement.type) {\n        case 'facet':\n            return state.removeFacetRefinement(refinement.attributeName, refinement.name);\n        case 'disjunctive':\n            return state.removeDisjunctiveFacetRefinement(refinement.attributeName, refinement.name);\n        case 'hierarchical':\n            return state.clearRefinements(refinement.attributeName);\n        case 'exclude':\n            return state.removeExcludeRefinement(refinement.attributeName, refinement.name);\n        case 'numeric':\n            return state.removeNumericRefinement(refinement.attributeName, refinement.operator, refinement.numericValue);\n        case 'tag':\n            return state.removeTagRefinement(refinement.name);\n        case 'query':\n            return state.setQueryParameter('query', '');\n        default:\n            throw new Error('clearRefinement: type ' + refinement.type + ' is not handled');\n    }\n}\nfunction clearRefinement(helper, refinement) {\n    helper.setState(clearRefinementFromState(helper.state, refinement)).search();\n}\nfunction computeLabel(value) {\n    // default to `value.name` if no operators\n    value.computedLabel = value.name;\n    if (value.hasOwnProperty('operator') && typeof value.operator === 'string') {\n        var displayedOperator = value.operator;\n        if (value.operator === '>=')\n            displayedOperator = '≥';\n        if (value.operator === '<=')\n            displayedOperator = '≤';\n        value.computedLabel = displayedOperator + ' ' + value.name;\n    }\n    return value;\n}\n",null]}