{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.js","mtime":1581861144636},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_utils.js,_Paginator PURE_IMPORTS_END */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n} return target; };\nimport { checkRendering } from '../../lib/utils.js';\nimport Paginator from './Paginator';\nvar usage = 'Usage:\\nvar customPagination = connectPagination(function render(params, isFirstRendering) {\\n  // params = {\\n  //   createURL,\\n  //   currentRefinement,\\n  //   nbHits,\\n  //   nbPages,\\n  //   pages,\\n  //   refine,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customPagination({\\n    [ maxPages ]\\n    [ padding ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectPagination.html\\n';\n/**\n * @typedef {Object} CustomPaginationWidgetOptions\n * @property {number} [maxPages] The max number of pages to browse.\n * @property {number} [padding=3] The padding of pages to show around the current page\n */\n/**\n * @typedef {Object} PaginationRenderingOptions\n * @property {function(page): string} createURL Creates URLs for the next state, the number is the page to generate the URL for.\n * @property {number} currentRefinement The number of the page currently displayed.\n * @property {number} nbHits The number of hits computed for the last query (can be approximated).\n * @property {number} nbPages The number of pages for the result set.\n * @property {number[]} pages The actual pages relevant to the current situation and padding\n * @property {boolean} isFirstPage true if the current page is also the first page\n * @property {boolean} isLastPage true if the current page is also the last page\n * @property {function(page)} refine Sets the current page and trigger a search.\n * @property {Object} widgetParams All original `CustomPaginationWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * **Pagination** connector provides the logic to build a widget that will let the user\n * choose the current page of the results.\n *\n * When using the pagination with Algolia, you should be aware that the engine won't provide you pages\n * beyond the 1000th hits by default. You can find more information on the [Algolia documentation](https://www.algolia.com/doc/guides/searching/pagination/#pagination-limitations).\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/pagination/js/\n * @param {function(PaginationRenderingOptions, boolean)} renderFn Rendering function for the custom **Pagination** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomPaginationWidgetOptions)} Re-usable widget factory for a custom **Pagination** widget.\n * @example\n * // custom `renderFn` to render the custom Pagination widget\n * function renderFn(PaginationRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     PaginationRenderingOptions.widgetParams.containerNode.html('<ul></ul>');\n *   }\n *\n *   // remove event listeners before replacing markup\n *   PaginationRenderingOptions.widgetParams.containerNode\n *     .find('a[data-page]')\n *     .each(function() { $(this).off('click'); });\n *\n *   var pages = PaginationRenderingOptions.pages\n *     .map(function(page) {\n *       return '<li style=\"display: inline-block; margin-right: 10px;\">' +\n *         '<a href=\"' + PaginationRenderingOptions.createURL(page) + '\" data-page=\"' + page + '\">' +\n *         (parseInt(page) + 1) + '</a></li>';\n *     });\n *\n *   PaginationRenderingOptions.widgetParams.containerNode\n *     .find('ul')\n *     .html(pages);\n *\n *   PaginationRenderingOptions.widgetParams.containerNode\n *     .find('a[data-page]')\n *     .each(function() {\n *       $(this).on('click', function(event) {\n *         event.preventDefault();\n *         PaginationRenderingOptions.refine($(this).data('page'));\n *       });\n *     });\n * }\n *\n * // connect `renderFn` to Pagination logic\n * var customPagination = instantsearch.connectors.connectPagination(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customPagination({\n *     containerNode: $('#custom-pagination-container'),\n *     maxPages: 20,\n *     padding: 4,\n *   })\n * );\n */\nexport default function connectPagination(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var maxPages = widgetParams.maxPages, _widgetParams$padding = widgetParams.padding, padding = _widgetParams$padding === undefined ? 3 : _widgetParams$padding;\n        var pager = new Paginator({\n            currentPage: 0,\n            total: 0,\n            padding: padding\n        });\n        return {\n            init: function init(_ref) {\n                var helper = _ref.helper, createURL = _ref.createURL, instantSearchInstance = _ref.instantSearchInstance;\n                this.refine = function (page) {\n                    helper.setPage(page);\n                    helper.search();\n                };\n                this.createURL = function (state) {\n                    return function (page) {\n                        return createURL(state.setPage(page));\n                    };\n                };\n                renderFn({\n                    createURL: this.createURL(helper.state),\n                    currentRefinement: helper.getPage() || 0,\n                    nbHits: 0,\n                    nbPages: 0,\n                    pages: [],\n                    isFirstPage: true,\n                    isLastPage: true,\n                    refine: this.refine,\n                    widgetParams: widgetParams,\n                    instantSearchInstance: instantSearchInstance\n                }, true);\n            },\n            getMaxPage: function getMaxPage(_ref2) {\n                var nbPages = _ref2.nbPages;\n                return maxPages !== undefined ? Math.min(maxPages, nbPages) : nbPages;\n            },\n            render: function render(_ref3) {\n                var results = _ref3.results, state = _ref3.state, instantSearchInstance = _ref3.instantSearchInstance;\n                var nbPages = this.getMaxPage(results);\n                pager.currentPage = state.page;\n                pager.total = nbPages;\n                renderFn({\n                    createURL: this.createURL(state),\n                    currentRefinement: state.page,\n                    refine: this.refine,\n                    nbHits: results.nbHits,\n                    nbPages: nbPages,\n                    pages: pager.pages(),\n                    isFirstPage: pager.isFirstPage(),\n                    isLastPage: pager.isLastPage(),\n                    widgetParams: widgetParams,\n                    instantSearchInstance: instantSearchInstance\n                }, false);\n            },\n            dispose: function dispose() {\n                unmountFn();\n            },\n            getWidgetState: function getWidgetState(uiState, _ref4) {\n                var searchParameters = _ref4.searchParameters;\n                var page = searchParameters.page;\n                if (page === 0 || page + 1 === uiState.page)\n                    return uiState;\n                return _extends({}, uiState, {\n                    page: page + 1\n                });\n            },\n            getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n                var uiState = _ref5.uiState;\n                var uiPage = uiState.page;\n                if (uiPage)\n                    return searchParameters.setQueryParameter('page', uiState.page - 1);\n                return searchParameters.setQueryParameter('page', 0);\n            }\n        };\n    };\n}\n",null]}