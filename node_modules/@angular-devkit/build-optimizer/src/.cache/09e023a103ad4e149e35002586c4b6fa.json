{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.js","mtime":1581861144632},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_escape_highlight.js,_.._lib_utils.js PURE_IMPORTS_END */\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nelse {\n    return Array.from(arr);\n} }\nimport escapeHits, { tagConfig } from '../../lib/escape-highlight.js';\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customInfiniteHits = connectInfiniteHits(function render(params, isFirstRendering) {\\n  // params = {\\n  //   hits,\\n  //   results,\\n  //   showMore,\\n  //   isLastPage,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customInfiniteHits({\\n    [ escapeHits: true ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectInfiniteHits.html\\n';\n/**\n * @typedef {Object} InfiniteHitsRenderingOptions\n * @property {Array<Object>} hits The aggregated matched hits from Algolia API of all pages.\n * @property {Object} results The complete results response from Algolia API.\n * @property {function} showMore Loads the next page of hits.\n * @property {boolean} isLastPage Indicates if the last page of hits has been reached.\n * @property {Object} widgetParams All original widget options forwarded to the `renderFn`.\n */\n/**\n * @typedef {Object} CustomInfiniteHitsWidgetOptions\n * @property {boolean} [escapeHits = false] If true, escape HTML tags from `hits[i]._highlightResult`.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n/**\n * **InfiniteHits** connector provides the logic to create custom widgets that will render an continuous list of results retrieved from Algolia.\n *\n * This connector provides a `InfiniteHitsRenderingOptions.showMore()` function to load next page of matched results.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/infinite-hits/js/\n * @param {function(InfiniteHitsRenderingOptions, boolean)} renderFn Rendering function for the custom **InfiniteHits** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomInfiniteHitsWidgetOptions)} Re-usable widget factory for a custom **InfiniteHits** widget.\n * @example\n * // custom `renderFn` to render the custom InfiniteHits widget\n * function renderFn(InfiniteHitsRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     InfiniteHitsRenderingOptions.widgetParams.containerNode\n *       .html('<div id=\"hits\"></div><button id=\"show-more\">Load more</button>');\n *\n *     InfiniteHitsRenderingOptions.widgetParams.containerNode\n *       .find('#show-more')\n *       .on('click', function(event) {\n *         event.preventDefault();\n *         InfiniteHitsRenderingOptions.showMore();\n *       });\n *   }\n *\n *   InfiniteHitsRenderingOptions.widgetParams.containerNode.find('#hits').html(\n *     InfiniteHitsRenderingOptions.hits.map(function(hit) {\n *       return '<div>' + hit._highlightResult.name.value + '</div>';\n *     })\n *   );\n * };\n *\n * // connect `renderFn` to InfiniteHits logic\n * var customInfiniteHits = instantsearch.connectors.connectInfiniteHits(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customInfiniteHits({\n *     containerNode: $('#custom-infinite-hits-container'),\n *   })\n * );\n */\nexport default function connectInfiniteHits(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _widgetParams$transfo = widgetParams.transformItems, transformItems = _widgetParams$transfo === undefined ? function (items) {\n            return items;\n        } : _widgetParams$transfo;\n        var hitsCache = [];\n        var lastReceivedPage = -1;\n        var getShowMore = function getShowMore(helper) {\n            return function () {\n                return helper.nextPage().search();\n            };\n        };\n        return {\n            getConfiguration: function getConfiguration() {\n                return widgetParams.escapeHits ? tagConfig : undefined;\n            },\n            init: function init(_ref) {\n                var instantSearchInstance = _ref.instantSearchInstance, helper = _ref.helper;\n                this.showMore = getShowMore(helper);\n                renderFn({\n                    hits: hitsCache,\n                    results: undefined,\n                    showMore: this.showMore,\n                    isLastPage: true,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, true);\n            },\n            render: function render(_ref2) {\n                var results = _ref2.results, state = _ref2.state, instantSearchInstance = _ref2.instantSearchInstance;\n                if (state.page === 0) {\n                    hitsCache = [];\n                    lastReceivedPage = -1;\n                }\n                results.hits = transformItems(results.hits);\n                if (widgetParams.escapeHits && results.hits && results.hits.length > 0) {\n                    results.hits = escapeHits(results.hits);\n                }\n                if (lastReceivedPage < state.page) {\n                    hitsCache = [].concat(_toConsumableArray(hitsCache), _toConsumableArray(results.hits));\n                    lastReceivedPage = state.page;\n                }\n                var isLastPage = results.nbPages <= results.page + 1;\n                renderFn({\n                    hits: hitsCache,\n                    results: results,\n                    showMore: this.showMore,\n                    isLastPage: isLastPage,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, false);\n            },\n            dispose: function dispose() {\n                unmountFn();\n            }\n        };\n    };\n}\n",null]}