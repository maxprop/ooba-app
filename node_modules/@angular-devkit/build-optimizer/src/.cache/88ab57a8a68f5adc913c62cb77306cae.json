{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/modaledit/ModalEdit.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/modaledit/ModalEdit.js","mtime":1581861142283},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Formio = _interopRequireDefault(require(\"../../Formio\"));\n\nvar _TextArea = _interopRequireDefault(require(\"../textarea/TextArea\"));\n\nvar _utils = require(\"../../utils/utils.js\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar EDIT = Symbol('edit');\nvar VIEW = Symbol('view');\nvar CKEDITOR = 'https://cdn.ckeditor.com/ckeditor5/11.2.0/inline/ckeditor.js';\n\nvar ModalEditComponent =\n/*#__PURE__*/\nfunction (_TextAreaComponent) {\n  _inherits(ModalEditComponent, _TextAreaComponent);\n\n  _createClass(ModalEditComponent, null, [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _TextArea.default.schema.apply(_TextArea.default, [{\n        type: 'modaledit',\n        label: 'Modal Edit',\n        key: 'modalEdit'\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Modal Edit',\n        group: 'advanced',\n        icon: 'fa fa-font',\n        weight: 50,\n        schema: ModalEditComponent.schema()\n      };\n    }\n  }]);\n\n  function ModalEditComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ModalEditComponent);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModalEditComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    var _withSwitch = (0, _utils.withSwitch)(VIEW, EDIT),\n        _withSwitch2 = _slicedToArray(_withSwitch, 2),\n        get = _withSwitch2[0],\n        toggle = _withSwitch2[1];\n\n    _this.getMode = get;\n\n    _this.toggleMode = function () {\n      toggle();\n\n      _this.emit('modechange');\n    };\n\n    return _this;\n  }\n\n  _createClass(ModalEditComponent, [{\n    key: \"build\",\n    value: function build() {\n      var _this2 = this;\n\n      this.createElement();\n      var labelAtTheBottom = this.component.labelPosition === 'bottom';\n\n      if (!labelAtTheBottom) {\n        this.createLabel(this.element);\n      }\n\n      this.editElement = this.buildEditMode({\n        onCloseRequest: function onCloseRequest() {\n          _this2.removeChildFrom(_this2.editElement, document.body);\n\n          _this2.toggleMode();\n        }\n      });\n      this.preview = this.ce('div', {\n        class: 'edittable-preview'\n      });\n      this.element.appendChild(this.preview);\n      this.updateView(this.preview);\n\n      if (labelAtTheBottom) {\n        this.createLabel(this.element);\n      }\n\n      this.restoreValue();\n      this.on('modechange', this.updateView.bind(this, this.preview));\n    }\n  }, {\n    key: \"buildViewMode\",\n    value: function buildViewMode(_ref) {\n      var _ref$content = _ref.content,\n          content = _ref$content === void 0 ? '' : _ref$content,\n          onClick = _ref.onEdit;\n      var icon = this.ce('i', {\n        class: this.iconClass('edit')\n      });\n      var button = this.ce('button', {\n        type: 'button',\n        role: 'button',\n        onClick: onClick,\n        class: 'btn btn-xxs btn-warning formio-modaledit-edit'\n      }, icon);\n      var child = this.ce('div', {\n        class: 'modaledit-view-inner reset-margins'\n      });\n      child.innerHTML = this.interpolate(content);\n      return this.ce('div', {\n        class: 'formio-modaledit-view-container',\n        onDblClick: onClick\n      }, [button, child]);\n    }\n  }, {\n    key: \"buildEditMode\",\n    value: function buildEditMode(_ref2) {\n      var _this3 = this;\n\n      var onCloseRequest = _ref2.onCloseRequest,\n          onCloseClick = _ref2.onCloseClick,\n          onOverlayClick = _ref2.onOverlayClick;\n      var overlay = this.ce('div', {\n        class: 'formio-dialog-overlay'\n      });\n      var inner = this.ce('div', {\n        class: 'reset-margins'\n      });\n      var close = this.ce('button', {\n        type: 'button',\n        class: 'btn btn-primary btn-xs formio-modaledit-close'\n      }, 'Close');\n      var container = this.ce('div', {\n        class: 'formio-modaledit-content'\n      }, [close, inner]);\n      var dialog = this.ce('div', {\n        class: 'formio-dialog formio-dialog-theme-default formio-modaledit-dialog'\n      }, [overlay, container]);\n\n      var _this$defaultEditorSi = _slicedToArray(this.defaultEditorSize, 2),\n          dw = _this$defaultEditorSi[0],\n          dh = _this$defaultEditorSi[1];\n\n      var layout = _lodash.default.get(this.component, 'editorLayout', this.defaultLayout);\n\n      var widthPath = _lodash.default.get(this.layoutOptions, [layout, 'width']);\n\n      var heightPath = _lodash.default.get(this.layoutOptions, [layout, 'height']);\n\n      var width = _lodash.default.get(this.component, widthPath, dw);\n\n      var height = _lodash.default.get(this.component, heightPath, dh);\n\n      this.createInput(inner);\n\n      if (this.isPlain) {\n        var textarea = container.querySelector('textarea');\n        textarea.style.minHeight = \"\".concat(height, \"px\");\n        textarea.style.borderRadius = 0;\n        textarea.style.resize = 'vertical';\n      }\n\n      container.style.position = 'absolute';\n      container.style.backgroundColor = '#fff';\n      container.style.width = \"\".concat(width, \"px\");\n      container.style.minHeight = \"\".concat(height, \"px\");\n      this.addEventListener(overlay, 'click', function (event) {\n        event.preventDefault();\n\n        if (_lodash.default.isFunction(onOverlayClick)) {\n          onOverlayClick();\n        }\n\n        if (_lodash.default.isFunction(onCloseRequest)) {\n          onCloseRequest();\n        }\n      });\n      this.addEventListener(close, 'click', function (event) {\n        event.preventDefault();\n\n        if (_lodash.default.isFunction(onCloseClick)) {\n          onCloseClick();\n        }\n\n        if (_lodash.default.isFunction(onCloseRequest)) {\n          onCloseRequest();\n        }\n      });\n\n      dialog.updateLayout = function () {\n        var rect = _this3.preview.getBoundingClientRect();\n\n        container.style.top = \"\".concat(rect.top, \"px\");\n        container.style.left = \"\".concat(rect.left, \"px\");\n        container.style.width = \"\".concat(Math.max(width, rect.width), \"px\");\n      };\n\n      return dialog;\n    }\n  }, {\n    key: \"updateView\",\n    value: function updateView(container) {\n      var mode = this.getMode();\n\n      if (this.options.builder || mode === VIEW) {\n        var view = this.buildViewMode({\n          onEdit: this.toggleMode,\n          content: _lodash.default.isString(this.dataValue) ? this.dataValue : ''\n        });\n\n        if (container.firstChild) {\n          container.replaceChild(view, container.firstChild);\n        } else {\n          container.appendChild(view);\n        }\n      }\n\n      if (mode === EDIT) {\n        this.editElement.updateLayout();\n        document.body.appendChild(this.editElement);\n      }\n    } // get defaultValue() {\n    //   const value = super.defaultValue;\n    //   return '';\n    // }\n\n  }, {\n    key: \"addCKE\",\n    value: function addCKE(element, settings, onChange) {\n      settings = _lodash.default.isEmpty(settings) ? null : settings;\n      return _Formio.default.requireLibrary('ckeditor', 'InlineEditor', CKEDITOR, true).then(function () {\n        if (!element.parentNode) {\n          return _nativePromiseOnly.default.reject();\n        }\n\n        return InlineEditor.create(element, settings).then(function (editor) {\n          editor.model.document.on('change', function () {\n            return onChange(editor.data.get());\n          });\n          return editor;\n        });\n      });\n    }\n  }, {\n    key: \"defaultEditorSize\",\n    get: function get() {\n      return [300, 200];\n    }\n  }, {\n    key: \"defaultLayout\",\n    get: function get() {\n      return 'grow';\n    }\n  }, {\n    key: \"layoutOptions\",\n    get: function get() {\n      return {\n        grow: {\n          width: 'minEditorWidth',\n          height: 'minEditorHeight'\n        },\n        fixed: {\n          width: 'width',\n          height: 'height'\n        }\n      };\n    }\n  }]);\n\n  return ModalEditComponent;\n}(_TextArea.default);\n\nexports.default = ModalEditComponent;",null]}