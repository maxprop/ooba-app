{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.js","mtime":1581861144638},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_utils.js,_.._lib_escape_highlight.js,lodash_isEqual PURE_IMPORTS_END */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n} return target; };\nfunction _defineProperty(obj, key, value) { if (key in obj) {\n    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n}\nelse {\n    obj[key] = value;\n} return obj; }\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) {\n    if (keys.indexOf(i) >= 0)\n        continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i))\n        continue;\n    target[i] = obj[i];\n} return target; }\nimport { checkRendering } from '../../lib/utils.js';\nimport { tagConfig, escapeFacets } from '../../lib/escape-highlight.js';\nimport isEqual from 'lodash/isEqual';\nvar usage = 'Usage:\\nvar customRefinementList = connectRefinementList(function render(params) {\\n  // params = {\\n  //   isFromSearch,\\n  //   createURL,\\n  //   items,\\n  //   refine,\\n  //   searchForItems,\\n  //   instantSearchInstance,\\n  //   canRefine,\\n  //   toggleShowMore,\\n  //   isShowingMore,\\n  //   widgetParams,\\n  // }\\n});\\n\\nsearch.addWidget(\\n  customRefinementList({\\n    attributeName,\\n    [ operator = \\'or\\' ],\\n    [ limit ],\\n    [ showMoreLimit ],\\n    [ sortBy = [\\'isRefined\\', \\'count:desc\\', \\'name:asc\\'] ],\\n    [ escapeFacetValues = false ],\\n    [ transformItems ]\\n  })\\n);\\n\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectRefinementList.html\\n';\nexport var checkUsage = function checkUsage(_ref) {\n    var attributeName = _ref.attributeName, operator = _ref.operator, showMoreLimit = _ref.showMoreLimit, limit = _ref.limit, message = _ref.message;\n    var noAttributeName = attributeName === undefined;\n    var invalidOperator = !/^(and|or)$/.test(operator);\n    var invalidShowMoreLimit = showMoreLimit !== undefined ? isNaN(showMoreLimit) || showMoreLimit < limit : false;\n    if (noAttributeName || invalidOperator || invalidShowMoreLimit) {\n        throw new Error(message);\n    }\n};\n/**\n * @typedef {Object} RefinementListItem\n * @property {string} value The value of the refinement list item.\n * @property {string} label Human-readable value of the refinement list item.\n * @property {number} count Number of matched results after refinement is applied.\n * @property {boolean} isRefined Indicates if the list item is refined.\n */\n/**\n * @typedef {Object} CustomRefinementListWidgetOptions\n * @property {string} attributeName The name of the attribute in the records.\n * @property {\"and\"|\"or\"} [operator = 'or'] How the filters are combined together.\n * @property {number} [limit = 10] The max number of items to display when\n * `showMoreLimit` is not set or if the widget is showing less value.\n * @property {number} [showMoreLimit] The max number of items to display if the widget\n * is showing more items.\n * @property {string[]|function} [sortBy = ['isRefined', 'count:desc', 'name:asc']] How to sort refinements. Possible values: `count|isRefined|name:asc|name:desc`.\n * @property {boolean} [escapeFacetValues = false] Escapes the content of the facet values.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n/**\n * @typedef {Object} RefinementListRenderingOptions\n * @property {RefinementListItem[]} items The list of filtering values returned from Algolia API.\n * @property {function(item.value): string} createURL Creates the next state url for a selected refinement.\n * @property {function(item.value)} refine Action to apply selected refinements.\n * @property {function} searchForItems Searches for values inside the list.\n * @property {boolean} isFromSearch `true` if the values are from an index search.\n * @property {boolean} canRefine `true` if a refinement can be applied.\n * @property {boolean} canToggleShowMore `true` if the toggleShowMore button can be activated (enough items to display more or\n * already displaying more than `limit` items)\n * @property {Object} widgetParams All original `CustomRefinementListWidgetOptions` forwarded to the `renderFn`.\n * @property {boolean} isShowingMore True if the menu is displaying all the menu items.\n * @property {function} toggleShowMore Toggles the number of values displayed between `limit` and `showMoreLimit`.\n */\n/**\n * **RefinementList** connector provides the logic to build a custom widget that will let the\n * user filter the results based on the values of a specific facet.\n *\n * This connector provides a `toggleShowMore()` function to display more or less items and a `refine()`\n * function to select an item.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/refinement-list/js/\n * @param {function(RefinementListRenderingOptions, boolean)} renderFn Rendering function for the custom **RefinementList** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomRefinementListWidgetOptions)} Re-usable widget factory for a custom **RefinementList** widget.\n * @example\n * // custom `renderFn` to render the custom RefinementList widget\n * function renderFn(RefinementListRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     RefinementListRenderingOptions.widgetParams.containerNode\n *       .html('<ul></ul>')\n *   }\n *\n *     RefinementListRenderingOptions.widgetParams.containerNode\n *       .find('li[data-refine-value]')\n *       .each(function() { $(this).off('click'); });\n *\n *   if (RefinementListRenderingOptions.canRefine) {\n *     var list = RefinementListRenderingOptions.items.map(function(item) {\n *       return `\n *         <li data-refine-value=\"${item.value}\">\n *           <input type=\"checkbox\" value=\"${item.value}\" ${item.isRefined ? 'checked' : ''} />\n *           <a href=\"${RefinementListRenderingOptions.createURL(item.value)}\">\n *             ${item.label} (${item.count})\n *           </a>\n *         </li>\n *       `;\n *     });\n *\n *     RefinementListRenderingOptions.widgetParams.containerNode.find('ul').html(list);\n *     RefinementListRenderingOptions.widgetParams.containerNode\n *       .find('li[data-refine-value]')\n *       .each(function() {\n *         $(this).on('click', function(event) {\n *           event.stopPropagation();\n *           event.preventDefault();\n *\n *           RefinementListRenderingOptions.refine($(this).data('refine-value'));\n *         });\n *       });\n *   } else {\n *     RefinementListRenderingOptions.widgetParams.containerNode.find('ul').html('');\n *   }\n * }\n *\n * // connect `renderFn` to RefinementList logic\n * var customRefinementList = instantsearch.connectors.connectRefinementList(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customRefinementList({\n *     containerNode: $('#custom-refinement-list-container'),\n *     attributeName: 'categories',\n *     limit: 10,\n *   })\n * );\n */\nexport default function connectRefinementList(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var attributeName = widgetParams.attributeName, _widgetParams$operato = widgetParams.operator, operator = _widgetParams$operato === undefined ? 'or' : _widgetParams$operato, _widgetParams$limit = widgetParams.limit, limit = _widgetParams$limit === undefined ? 10 : _widgetParams$limit, showMoreLimit = widgetParams.showMoreLimit, _widgetParams$sortBy = widgetParams.sortBy, sortBy = _widgetParams$sortBy === undefined ? ['isRefined', 'count:desc', 'name:asc'] : _widgetParams$sortBy, _widgetParams$escapeF = widgetParams.escapeFacetValues, escapeFacetValues = _widgetParams$escapeF === undefined ? false : _widgetParams$escapeF, _widgetParams$transfo = widgetParams.transformItems, transformItems = _widgetParams$transfo === undefined ? function (items) {\n            return items;\n        } : _widgetParams$transfo;\n        checkUsage({\n            message: usage,\n            attributeName: attributeName,\n            operator: operator,\n            showMoreLimit: showMoreLimit,\n            limit: limit\n        });\n        var formatItems = function formatItems(_ref2) {\n            var label = _ref2.name, item = _objectWithoutProperties(_ref2, ['name']);\n            return _extends({}, item, {\n                label: label,\n                value: label,\n                highlighted: label\n            });\n        };\n        var _render = function _render(_ref3) {\n            var items = _ref3.items, state = _ref3.state, createURL = _ref3.createURL, helperSpecializedSearchFacetValues = _ref3.helperSpecializedSearchFacetValues, refine = _ref3.refine, isFromSearch = _ref3.isFromSearch, isFirstSearch = _ref3.isFirstSearch, isShowingMore = _ref3.isShowingMore, toggleShowMore = _ref3.toggleShowMore, hasExhaustiveItems = _ref3.hasExhaustiveItems, instantSearchInstance = _ref3.instantSearchInstance;\n            // Compute a specific createURL method able to link to any facet value state change\n            var _createURL = function _createURL(facetValue) {\n                return createURL(state.toggleRefinement(attributeName, facetValue));\n            };\n            // Do not mistake searchForFacetValues and searchFacetValues which is the actual search\n            // function\n            var searchFacetValues = helperSpecializedSearchFacetValues && helperSpecializedSearchFacetValues(state, createURL, helperSpecializedSearchFacetValues, refine, instantSearchInstance);\n            renderFn({\n                createURL: _createURL,\n                items: items,\n                refine: refine,\n                searchForItems: searchFacetValues,\n                instantSearchInstance: instantSearchInstance,\n                isFromSearch: isFromSearch,\n                canRefine: isFromSearch || items.length > 0,\n                widgetParams: widgetParams,\n                isShowingMore: isShowingMore,\n                canToggleShowMore: showMoreLimit ? isShowingMore || !hasExhaustiveItems : false,\n                toggleShowMore: toggleShowMore,\n                hasExhaustiveItems: hasExhaustiveItems\n            }, isFirstSearch);\n        };\n        var lastResultsFromMainSearch = void 0;\n        var searchForFacetValues = void 0;\n        var refine = void 0;\n        var createSearchForFacetValues = function createSearchForFacetValues(helper) {\n            return function (state, createURL, helperSpecializedSearchFacetValues, toggleRefinement, instantSearchInstance) {\n                return function (query) {\n                    if (query === '' && lastResultsFromMainSearch) {\n                        // render with previous data from the helper.\n                        _render({\n                            items: lastResultsFromMainSearch,\n                            state: state,\n                            createURL: createURL,\n                            helperSpecializedSearchFacetValues: helperSpecializedSearchFacetValues,\n                            refine: toggleRefinement,\n                            isFromSearch: false,\n                            isFirstSearch: false,\n                            instantSearchInstance: instantSearchInstance,\n                            hasExhaustiveItems: false // SFFV should not be used with show more\n                        });\n                    }\n                    else {\n                        var tags = {\n                            highlightPreTag: escapeFacetValues ? tagConfig.highlightPreTag : undefined,\n                            highlightPostTag: escapeFacetValues ? tagConfig.highlightPostTag : undefined\n                        };\n                        helper.searchForFacetValues(attributeName, query, limit, tags).then(function (results) {\n                            var facetValues = escapeFacetValues ? escapeFacets(results.facetHits) : results.facetHits;\n                            var normalizedFacetValues = transformItems(facetValues.map(function (_ref4) {\n                                var value = _ref4.value, item = _objectWithoutProperties(_ref4, ['value']);\n                                return _extends({}, item, {\n                                    value: value,\n                                    label: value\n                                });\n                            }));\n                            _render({\n                                items: normalizedFacetValues,\n                                state: state,\n                                createURL: createURL,\n                                helperSpecializedSearchFacetValues: helperSpecializedSearchFacetValues,\n                                refine: toggleRefinement,\n                                isFromSearch: true,\n                                isFirstSearch: false,\n                                instantSearchInstance: instantSearchInstance,\n                                hasExhaustiveItems: false // SFFV should not be used with show more\n                            });\n                        });\n                    }\n                };\n            };\n        };\n        return {\n            isShowingMore: false,\n            // Provide the same function to the `renderFn` so that way the user\n            // has to only bind it once when `isFirstRendering` for instance\n            toggleShowMore: function toggleShowMore() { },\n            cachedToggleShowMore: function cachedToggleShowMore() {\n                this.toggleShowMore();\n            },\n            createToggleShowMore: function createToggleShowMore(renderOptions) {\n                var _this = this;\n                return function () {\n                    _this.isShowingMore = !_this.isShowingMore;\n                    _this.render(renderOptions);\n                };\n            },\n            getLimit: function getLimit() {\n                return this.isShowingMore ? showMoreLimit : limit;\n            },\n            getConfiguration: function getConfiguration() {\n                var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                var widgetConfiguration = _defineProperty({}, operator === 'and' ? 'facets' : 'disjunctiveFacets', [attributeName]);\n                if (limit !== undefined) {\n                    var currentMaxValuesPerFacet = configuration.maxValuesPerFacet || 0;\n                    if (showMoreLimit === undefined) {\n                        widgetConfiguration.maxValuesPerFacet = Math.max(currentMaxValuesPerFacet, limit);\n                    }\n                    else {\n                        widgetConfiguration.maxValuesPerFacet = Math.max(currentMaxValuesPerFacet, limit, showMoreLimit);\n                    }\n                }\n                return widgetConfiguration;\n            },\n            init: function init(_ref5) {\n                var helper = _ref5.helper, createURL = _ref5.createURL, instantSearchInstance = _ref5.instantSearchInstance;\n                this.cachedToggleShowMore = this.cachedToggleShowMore.bind(this);\n                refine = function refine(facetValue) {\n                    return helper.toggleRefinement(attributeName, facetValue).search();\n                };\n                searchForFacetValues = createSearchForFacetValues(helper);\n                _render({\n                    items: [],\n                    state: helper.state,\n                    createURL: createURL,\n                    helperSpecializedSearchFacetValues: searchForFacetValues,\n                    refine: refine,\n                    isFromSearch: false,\n                    isFirstSearch: true,\n                    instantSearchInstance: instantSearchInstance,\n                    isShowingMore: this.isShowingMore,\n                    toggleShowMore: this.cachedToggleShowMore,\n                    hasExhaustiveItems: true\n                });\n            },\n            render: function render(renderOptions) {\n                var results = renderOptions.results, state = renderOptions.state, createURL = renderOptions.createURL, instantSearchInstance = renderOptions.instantSearchInstance;\n                var facetValues = results.getFacetValues(attributeName, { sortBy: sortBy });\n                var items = transformItems(facetValues.slice(0, this.getLimit()).map(formatItems));\n                var maxValuesPerFacetConfig = state.getQueryParameter('maxValuesPerFacet');\n                var currentLimit = this.getLimit();\n                // If the limit is the max number of facet retrieved it is impossible to know\n                // if the facets are exhaustive. The only moment we are sure it is exhaustive\n                // is when it is strictly under the number requested unless we know that another\n                // widget has requested more values (maxValuesPerFacet > getLimit()).\n                // Because this is used for making the search of facets unable or not, it is important\n                // to be conservative here.\n                var hasExhaustiveItems = maxValuesPerFacetConfig > currentLimit ? facetValues.length <= currentLimit : facetValues.length < currentLimit;\n                lastResultsFromMainSearch = items;\n                this.toggleShowMore = this.createToggleShowMore(renderOptions);\n                _render({\n                    items: items,\n                    state: state,\n                    createURL: createURL,\n                    helperSpecializedSearchFacetValues: searchForFacetValues,\n                    refine: refine,\n                    isFromSearch: false,\n                    isFirstSearch: false,\n                    instantSearchInstance: instantSearchInstance,\n                    isShowingMore: this.isShowingMore,\n                    toggleShowMore: this.cachedToggleShowMore,\n                    hasExhaustiveItems: hasExhaustiveItems\n                });\n            },\n            dispose: function dispose(_ref6) {\n                var state = _ref6.state;\n                unmountFn();\n                if (operator === 'and') {\n                    return state.removeFacetRefinement(attributeName).removeFacet(attributeName);\n                }\n                else {\n                    return state.removeDisjunctiveFacetRefinement(attributeName).removeDisjunctiveFacet(attributeName);\n                }\n            },\n            getWidgetState: function getWidgetState(uiState, _ref7) {\n                var searchParameters = _ref7.searchParameters;\n                var values = operator === 'or' ? searchParameters.getDisjunctiveRefinements(attributeName) : searchParameters.getConjunctiveRefinements(attributeName);\n                if (values.length === 0 || uiState.refinementList && isEqual(values, uiState.refinementList[attributeName])) {\n                    return uiState;\n                }\n                return _extends({}, uiState, {\n                    refinementList: _extends({}, uiState.refinementList, _defineProperty({}, attributeName, values))\n                });\n            },\n            getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref8) {\n                var uiState = _ref8.uiState;\n                var values = uiState.refinementList && uiState.refinementList[attributeName];\n                if (values === undefined)\n                    return searchParameters;\n                return values.reduce(function (sp, v) {\n                    return operator === 'or' ? sp.addDisjunctiveFacetRefinement(attributeName, v) : sp.addFacetRefinement(attributeName, v);\n                }, searchParameters.clearRefinements(attributeName));\n            }\n        };\n    };\n}\n",null]}