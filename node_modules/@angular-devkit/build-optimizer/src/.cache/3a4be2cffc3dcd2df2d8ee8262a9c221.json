{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/star-rating/connectStarRating.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/star-rating/connectStarRating.js","mtime":1581861144640},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_utils.js PURE_IMPORTS_END */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n} return target; };\nfunction _defineProperty(obj, key, value) { if (key in obj) {\n    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n}\nelse {\n    obj[key] = value;\n} return obj; }\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customStarRating = connectStarRating(function render(params, isFirstRendering) {\\n  // params = {\\n  //   items,\\n  //   createURL,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   hasNoResults,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customStarRatingI({\\n    attributeName,\\n    [ max=5 ],\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectStarRating.html\\n';\n/**\n * @typedef {Object} StarRatingItems\n * @property {string} name Name corresponding to the number of stars.\n * @property {string} value Number of stars as string.\n * @property {number} count Count of matched results corresponding to the number of stars.\n * @property {boolean[]} stars Array of length of maximum rating value with stars to display or not.\n * @property {boolean} isRefined Indicates if star rating refinement is applied.\n */\n/**\n * @typedef {Object} CustomStarRatingWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {number} [max = 5] The maximum rating value.\n */\n/**\n * @typedef {Object} StarRatingRenderingOptions\n * @property {StarRatingItems[]} items Possible star ratings the user can apply.\n * @property {function(string): string} createURL Creates an URL for the next\n * state (takes the item value as parameter). Takes the value of an item as parameter.\n * @property {function(string)} refine Selects a rating to filter the results\n * (takes the filter value as parameter). Takes the value of an item as parameter.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams All original `CustomStarRatingWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * **StarRating** connector provides the logic to build a custom widget that will let\n * the user refine search results based on ratings.\n *\n * The connector provides to the rendering: `refine()` to select a value and\n * `items` that are the values that can be selected. `refine` should be used\n * with `items.value`.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/rating-menu/js/\n * @param {function(StarRatingRenderingOptions, boolean)} renderFn Rendering function for the custom **StarRating** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomStarRatingWidgetOptions)} Re-usable widget factory for a custom **StarRating** widget.\n * @example\n * // custom `renderFn` to render the custom StarRating widget\n * function renderFn(StarRatingRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     StarRatingRenderingOptions.widgetParams.containerNode.html('<ul></ul>');\n *   }\n *\n *   StarRatingRenderingOptions.widgetParams.containerNode\n *     .find('li[data-refine-value]')\n *     .each(function() { $(this).off('click'); });\n *\n *   var listHTML = StarRatingRenderingOptions.items.map(function(item) {\n *     return '<li data-refine-value=\"' + item.value + '\">' +\n *       '<a href=\"' + StarRatingRenderingOptions.createURL(item.value) + '\">' +\n *       item.stars.map(function(star) { return star === false ? '☆' : '★'; }).join(' ') +\n *       '& up (' + item.count + ')' +\n *       '</a></li>';\n *   });\n *\n *   StarRatingRenderingOptions.widgetParams.containerNode\n *     .find('ul')\n *     .html(listHTML);\n *\n *   StarRatingRenderingOptions.widgetParams.containerNode\n *     .find('li[data-refine-value]')\n *     .each(function() {\n *       $(this).on('click', function(event) {\n *         event.preventDefault();\n *         event.stopPropagation();\n *\n *         StarRatingRenderingOptions.refine($(this).data('refine-value'));\n *       });\n *     });\n * }\n *\n * // connect `renderFn` to StarRating logic\n * var customStarRating = instantsearch.connectors.connectStarRating(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customStarRating({\n *     containerNode: $('#custom-star-rating-container'),\n *     attributeName: 'rating',\n *     max: 5,\n *   })\n * );\n */\nexport default function connectStarRating(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var attributeName = widgetParams.attributeName, _widgetParams$max = widgetParams.max, max = _widgetParams$max === undefined ? 5 : _widgetParams$max;\n        if (!attributeName) {\n            throw new Error(usage);\n        }\n        return {\n            getConfiguration: function getConfiguration() {\n                return { disjunctiveFacets: [attributeName] };\n            },\n            init: function init(_ref) {\n                var helper = _ref.helper, createURL = _ref.createURL, instantSearchInstance = _ref.instantSearchInstance;\n                this._toggleRefinement = this._toggleRefinement.bind(this, helper);\n                this._createURL = function (state) {\n                    return function (facetValue) {\n                        return createURL(state.toggleRefinement(attributeName, facetValue));\n                    };\n                };\n                renderFn({\n                    instantSearchInstance: instantSearchInstance,\n                    items: [],\n                    hasNoResults: true,\n                    refine: this._toggleRefinement,\n                    createURL: this._createURL(helper.state),\n                    widgetParams: widgetParams\n                }, true);\n            },\n            render: function render(_ref2) {\n                var helper = _ref2.helper, results = _ref2.results, state = _ref2.state, instantSearchInstance = _ref2.instantSearchInstance;\n                var facetValues = [];\n                var allValues = {};\n                for (var v = max; v >= 0; --v) {\n                    allValues[v] = 0;\n                }\n                results.getFacetValues(attributeName).forEach(function (facet) {\n                    var val = Math.round(facet.name);\n                    if (!val || val > max) {\n                        return;\n                    }\n                    for (var _v = val; _v >= 1; --_v) {\n                        allValues[_v] += facet.count;\n                    }\n                });\n                var refinedStar = this._getRefinedStar(helper.state);\n                for (var star = max - 1; star >= 1; --star) {\n                    var count = allValues[star];\n                    if (refinedStar && star !== refinedStar && count === 0) {\n                        // skip count==0 when at least 1 refinement is enabled\n                        // eslint-disable-next-line no-continue\n                        continue;\n                    }\n                    var stars = [];\n                    for (var i = 1; i <= max; ++i) {\n                        stars.push(i <= star);\n                    }\n                    facetValues.push({\n                        stars: stars,\n                        name: String(star),\n                        value: String(star),\n                        count: count,\n                        isRefined: refinedStar === star\n                    });\n                }\n                renderFn({\n                    instantSearchInstance: instantSearchInstance,\n                    items: facetValues,\n                    hasNoResults: results.nbHits === 0,\n                    refine: this._toggleRefinement,\n                    createURL: this._createURL(state),\n                    widgetParams: widgetParams\n                }, false);\n            },\n            dispose: function dispose(_ref3) {\n                var state = _ref3.state;\n                unmountFn();\n                var nextState = state.removeDisjunctiveFacetRefinement(attributeName).removeDisjunctiveFacet(attributeName);\n                return nextState;\n            },\n            getWidgetState: function getWidgetState(uiState, _ref4) {\n                var searchParameters = _ref4.searchParameters;\n                var refinedStar = this._getRefinedStar(searchParameters);\n                if (refinedStar === undefined || uiState && uiState.starRating && uiState.starRating[attributeName] === refinedStar)\n                    return uiState;\n                return _extends({}, uiState, {\n                    starRating: _extends({}, uiState.starRating, _defineProperty({}, attributeName, refinedStar))\n                });\n            },\n            getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n                var uiState = _ref5.uiState;\n                var starRatingFromURL = uiState.starRating && uiState.starRating[attributeName];\n                var refinedStar = this._getRefinedStar(searchParameters);\n                if (starRatingFromURL === refinedStar)\n                    return searchParameters;\n                var clearedSearchParam = searchParameters.clearRefinements(attributeName);\n                if (starRatingFromURL !== undefined) {\n                    for (var val = Number(starRatingFromURL); val <= max; ++val) {\n                        clearedSearchParam = clearedSearchParam.addDisjunctiveFacetRefinement(attributeName, val);\n                    }\n                }\n                return clearedSearchParam;\n            },\n            _toggleRefinement: function _toggleRefinement(helper, facetValue) {\n                var isRefined = this._getRefinedStar(helper.state) === Number(facetValue);\n                helper.clearRefinements(attributeName);\n                if (!isRefined) {\n                    for (var val = Number(facetValue); val <= max; ++val) {\n                        helper.addDisjunctiveFacetRefinement(attributeName, val);\n                    }\n                }\n                helper.search();\n            },\n            _getRefinedStar: function _getRefinedStar(searchParameters) {\n                var refinedStar = undefined;\n                var refinements = searchParameters.getDisjunctiveRefinements(attributeName);\n                refinements.forEach(function (r) {\n                    if (!refinedStar || Number(r) < refinedStar) {\n                        refinedStar = Number(r);\n                    }\n                });\n                return refinedStar;\n            }\n        };\n    };\n}\n",null]}