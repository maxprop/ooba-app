{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/toggle/connectToggle.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/toggle/connectToggle.js","mtime":1581861144641},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_utils.js,lodash_find PURE_IMPORTS_END */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n} return target; };\nfunction _defineProperty(obj, key, value) { if (key in obj) {\n    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n}\nelse {\n    obj[key] = value;\n} return obj; }\nimport { checkRendering, escapeRefinement, unescapeRefinement } from '../../lib/utils.js';\nimport find from 'lodash/find';\nvar usage = 'Usage:\\nvar customToggle = connectToggle(function render(params, isFirstRendering) {\\n  // params = {\\n  //   value,\\n  //   createURL,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customToggle({\\n    attributeName,\\n    label,\\n    [ values = {on: true, off: undefined} ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectToggle.html\\n';\n/**\n * @typedef {Object} ToggleValue\n * @property {string} name Human-readable name of the filter.\n * @property {boolean} isRefined `true` if the toggle is on.\n * @property {number} count Number of results matched after applying the toggle refinement.\n * @property {Object} onFacetValue Value of the toggle when it's on.\n * @property {Object} offFacetValue Value of the toggle when it's off.\n */\n/**\n * @typedef {Object} CustomToggleWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {string} label Human-readable name of the filter (eg. \"Free Shipping\").\n * @property {Object} [values = {on: true, off: undefined}] Values to filter on when toggling.\n */\n/**\n * @typedef {Object} ToggleRenderingOptions\n * @property {ToggleValue} value The current toggle value.\n * @property {function(): string} createURL Creates an URL for the next state.\n * @property {function(value)} refine Updates to the next state by applying the toggle refinement.\n * @property {Object} widgetParams All original `CustomToggleWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * **Toggle** connector provides the logic to build a custom widget that will provide\n * an on/off filtering feature based on an attribute value or values.\n *\n * Two modes are implemented in the custom widget:\n *  - with or without the value filtered\n *  - switch between two values.\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/toggle-refinement/js/\n * @param {function(ToggleRenderingOptions, boolean)} renderFn Rendering function for the custom **Toggle** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomToggleWidgetOptions)} Re-usable widget factory for a custom **Toggle** widget.\n * @example\n * // custom `renderFn` to render the custom ClearAll widget\n * function renderFn(ToggleRenderingOptions, isFirstRendering) {\n *   ToggleRenderingOptions.widgetParams.containerNode\n *     .find('a')\n *     .off('click');\n *\n *   var buttonHTML = `\n *     <a href=\"${ToggleRenderingOptions.createURL()}\">\n *       <input\n *         type=\"checkbox\"\n *         value=\"${ToggleRenderingOptions.value.name}\"\n *         ${ToggleRenderingOptions.value.isRefined ? 'checked' : ''}\n *       />\n *       ${ToggleRenderingOptions.value.name} (${ToggleRenderingOptions.value.count})\n *     </a>\n *   `;\n *\n *   ToggleRenderingOptions.widgetParams.containerNode.html(buttonHTML);\n *   ToggleRenderingOptions.widgetParams.containerNode\n *     .find('a')\n *     .on('click', function(event) {\n *       event.preventDefault();\n *       event.stopPropagation();\n *\n *       ToggleRenderingOptions.refine(ToggleRenderingOptions.value);\n *     });\n * }\n *\n * // connect `renderFn` to Toggle logic\n * var customToggle = instantsearch.connectors.connectToggle(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customToggle({\n *     containerNode: $('#custom-toggle-container'),\n *     attributeName: 'free_shipping',\n *     label: 'Free Shipping (toggle single value)',\n *   })\n * );\n */\nexport default function connectToggle(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var attributeName = widgetParams.attributeName, label = widgetParams.label, _widgetParams$values = widgetParams.values, userValues = _widgetParams$values === undefined ? { on: true, off: undefined } : _widgetParams$values;\n        if (!attributeName || !label) {\n            throw new Error(usage);\n        }\n        var hasAnOffValue = userValues.off !== undefined;\n        var on = userValues ? escapeRefinement(userValues.on) : undefined;\n        var off = userValues ? escapeRefinement(userValues.off) : undefined;\n        return {\n            getConfiguration: function getConfiguration() {\n                return {\n                    disjunctiveFacets: [attributeName]\n                };\n            },\n            _toggleRefinement: function _toggleRefinement(helper) {\n                var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, isRefined = _ref.isRefined;\n                // Checking\n                if (!isRefined) {\n                    if (hasAnOffValue) {\n                        helper.removeDisjunctiveFacetRefinement(attributeName, off);\n                    }\n                    helper.addDisjunctiveFacetRefinement(attributeName, on);\n                }\n                else {\n                    // Unchecking\n                    helper.removeDisjunctiveFacetRefinement(attributeName, on);\n                    if (hasAnOffValue) {\n                        helper.addDisjunctiveFacetRefinement(attributeName, off);\n                    }\n                }\n                helper.search();\n            },\n            init: function init(_ref2) {\n                var _this = this;\n                var state = _ref2.state, helper = _ref2.helper, createURL = _ref2.createURL, instantSearchInstance = _ref2.instantSearchInstance;\n                this._createURL = function (isCurrentlyRefined) {\n                    return function () {\n                        return createURL(state.removeDisjunctiveFacetRefinement(attributeName, isCurrentlyRefined ? on : off).addDisjunctiveFacetRefinement(attributeName, isCurrentlyRefined ? off : on));\n                    };\n                };\n                this.toggleRefinement = function (opts) {\n                    _this._toggleRefinement(helper, opts);\n                };\n                var isRefined = state.isDisjunctiveFacetRefined(attributeName, on);\n                // no need to refine anything at init if no custom off values\n                if (hasAnOffValue) {\n                    // Add filtering on the 'off' value if set\n                    if (!isRefined) {\n                        var currentPage = helper.getPage();\n                        helper.addDisjunctiveFacetRefinement(attributeName, off).setPage(currentPage);\n                    }\n                }\n                var onFacetValue = {\n                    name: label,\n                    isRefined: isRefined,\n                    count: 0\n                };\n                var offFacetValue = {\n                    name: label,\n                    isRefined: hasAnOffValue && !isRefined,\n                    count: 0\n                };\n                var value = {\n                    name: label,\n                    isRefined: isRefined,\n                    count: null,\n                    onFacetValue: onFacetValue,\n                    offFacetValue: offFacetValue\n                };\n                renderFn({\n                    value: value,\n                    createURL: this._createURL(value.isRefined),\n                    refine: this.toggleRefinement,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, true);\n            },\n            render: function render(_ref3) {\n                var helper = _ref3.helper, results = _ref3.results, state = _ref3.state, instantSearchInstance = _ref3.instantSearchInstance;\n                var isRefined = helper.state.isDisjunctiveFacetRefined(attributeName, on);\n                var offValue = off === undefined ? false : off;\n                var allFacetValues = results.getFacetValues(attributeName);\n                var onData = find(allFacetValues, function (_ref4) {\n                    var name = _ref4.name;\n                    return name === unescapeRefinement(on);\n                });\n                var onFacetValue = {\n                    name: label,\n                    isRefined: onData !== undefined ? onData.isRefined : false,\n                    count: onData === undefined ? null : onData.count\n                };\n                var offData = hasAnOffValue ? find(allFacetValues, function (_ref5) {\n                    var name = _ref5.name;\n                    return name === unescapeRefinement(offValue);\n                }) : undefined;\n                var offFacetValue = {\n                    name: label,\n                    isRefined: offData !== undefined ? offData.isRefined : false,\n                    count: offData === undefined ? allFacetValues.reduce(function (total, _ref6) {\n                        var count = _ref6.count;\n                        return total + count;\n                    }, 0) : offData.count\n                };\n                // what will we show by default,\n                // if checkbox is not checked, show: [ ] free shipping (countWhenChecked)\n                // if checkbox is checked, show: [x] free shipping (countWhenNotChecked)\n                var nextRefinement = isRefined ? offFacetValue : onFacetValue;\n                var value = {\n                    name: label,\n                    isRefined: isRefined,\n                    count: nextRefinement === undefined ? null : nextRefinement.count,\n                    onFacetValue: onFacetValue,\n                    offFacetValue: offFacetValue\n                };\n                renderFn({\n                    value: value,\n                    state: state,\n                    createURL: this._createURL(value.isRefined),\n                    refine: this.toggleRefinement,\n                    helper: helper,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, false);\n            },\n            dispose: function dispose(_ref7) {\n                var state = _ref7.state;\n                unmountFn();\n                var nextState = state.removeDisjunctiveFacetRefinement(attributeName).removeDisjunctiveFacet(attributeName);\n                return nextState;\n            },\n            getWidgetState: function getWidgetState(uiState, _ref8) {\n                var searchParameters = _ref8.searchParameters;\n                var isRefined = searchParameters.isDisjunctiveFacetRefined(attributeName, on);\n                if (!isRefined || uiState && uiState.toggle && uiState.toggle[attributeName] === isRefined) {\n                    return uiState;\n                }\n                return _extends({}, uiState, {\n                    toggle: _extends({}, uiState.toggle, _defineProperty({}, attributeName, isRefined))\n                });\n            },\n            getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref9) {\n                var uiState = _ref9.uiState;\n                var isRefined = Boolean(uiState.toggle && uiState.toggle[attributeName]);\n                if (isRefined) {\n                    if (hasAnOffValue)\n                        return searchParameters.removeDisjunctiveFacetRefinement(attributeName, off).addDisjunctiveFacetRefinement(attributeName, on);\n                    return searchParameters.addDisjunctiveFacetRefinement(attributeName, on);\n                }\n                if (hasAnOffValue)\n                    return searchParameters.removeDisjunctiveFacetRefinement(attributeName, on).addDisjunctiveFacetRefinement(attributeName, off);\n                return searchParameters.removeDisjunctiveFacetRefinement(attributeName, on);\n            }\n        };\n    };\n}\n",null]}