{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/hits/connectHits.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/hits/connectHits.js","mtime":1581861144631},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_escape_highlight.js,_.._lib_utils.js PURE_IMPORTS_END */\nimport escapeHits, { tagConfig } from '../../lib/escape-highlight.js';\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customHits = connectHits(function render(params, isFirstRendering) {\\n  // params = {\\n  //   hits,\\n  //   results,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customHits({\\n    [ escapeHits = false ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectHits.html\\n';\n/**\n * @typedef {Object} HitsRenderingOptions\n * @property {Object[]} hits The matched hits from Algolia API.\n * @property {Object} results The complete results response from Algolia API.\n * @property {Object} widgetParams All original widget options forwarded to the `renderFn`.\n */\n/**\n * @typedef {Object} CustomHitsWidgetOptions\n * @property {boolean} [escapeHits = false] If true, escape HTML tags from `hits[i]._highlightResult`.\n * @property {function(Object[]):Object[]} [transformItems] Function to transform the items passed to the templates.\n */\n/**\n * **Hits** connector provides the logic to create custom widgets that will render the results retrieved from Algolia.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/hits/js/\n * @param {function(HitsRenderingOptions, boolean)} renderFn Rendering function for the custom **Hits** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomHitsWidgetOptions)} Re-usable widget factory for a custom **Hits** widget.\n * @example\n * // custom `renderFn` to render the custom Hits widget\n * function renderFn(HitsRenderingOptions) {\n *   HitsRenderingOptions.widgetParams.containerNode.html(\n *     HitsRenderingOptions.hits.map(function(hit) {\n *       return '<div>' + hit._highlightResult.name.value + '</div>';\n *     })\n *   );\n * }\n *\n * // connect `renderFn` to Hits logic\n * var customHits = instantsearch.connectors.connectHits(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customHits({\n *     containerNode: $('#custom-hits-container'),\n *   })\n * );\n */\nexport default function connectHits(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _widgetParams$transfo = widgetParams.transformItems, transformItems = _widgetParams$transfo === undefined ? function (items) {\n            return items;\n        } : _widgetParams$transfo;\n        return {\n            getConfiguration: function getConfiguration() {\n                return widgetParams.escapeHits ? tagConfig : undefined;\n            },\n            init: function init(_ref) {\n                var instantSearchInstance = _ref.instantSearchInstance;\n                renderFn({\n                    hits: [],\n                    results: undefined,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, true);\n            },\n            render: function render(_ref2) {\n                var results = _ref2.results, instantSearchInstance = _ref2.instantSearchInstance;\n                results.hits = transformItems(results.hits);\n                if (widgetParams.escapeHits && results.hits && results.hits.length > 0) {\n                    results.hits = escapeHits(results.hits);\n                }\n                renderFn({\n                    hits: results.hits,\n                    results: results,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, false);\n            },\n            dispose: function dispose() {\n                unmountFn();\n            }\n        };\n    };\n}\n",null]}