{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/manager/index/index.component.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/manager/index/index.component.js","mtime":1581861141300},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { Component, EventEmitter, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormManagerService } from '../form-manager.service';\nimport { FormManagerConfig } from '../form-manager.config';\nimport { FormioGridComponent } from '../../grid/grid.component';\nvar FormManagerIndexComponent = /*@__PURE__*/ (function () {\n    function FormManagerIndexComponent(service, route, router, config) {\n        this.service = service;\n        this.route = route;\n        this.router = router;\n        this.config = config;\n        this.search = '';\n        this.gridQuery = { tags: this.config.tag, type: 'form' };\n        this.refreshGrid = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    FormManagerIndexComponent.prototype.loadGrid = /**\n     * @return {?}\n     */\n        function () {\n            this.search = localStorage.getItem('searchInput');\n            this.gridQuery = JSON.parse(localStorage.getItem('query')) || this.gridQuery;\n            /** @type {?} */\n            var currentPage = +localStorage.getItem('currentPage') || 1;\n            this.formGrid.refreshGrid(this.gridQuery);\n            this.formGrid.setPage(currentPage);\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerIndexComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.gridQuery = { tags: this.config.tag, type: 'form' };\n            this.service.reset();\n            this.service.ready.then((function () {\n                _this.loadGrid();\n                _this.formGrid.footer.pageChanged.subscribe((function (page) {\n                    localStorage.setItem('currentPage', page.page);\n                }));\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerIndexComponent.prototype.onSearch = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var searchInput = this.search;\n            if (searchInput.length > 0) {\n                this.gridQuery.skip = 0;\n                this.gridQuery.title__regex = '/' + searchInput + '/i';\n            }\n            else {\n                delete this.gridQuery.title__regex;\n            }\n            localStorage.setItem('query', JSON.stringify(this.gridQuery));\n            localStorage.setItem('searchInput', this.search);\n            this.formGrid.pageChanged({ page: 1, itemPerPage: this.gridQuery.limit });\n            this.refreshGrid.emit(this.gridQuery);\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerIndexComponent.prototype.clearSearch = /**\n     * @return {?}\n     */\n        function () {\n            this.gridQuery = { tags: this.config.tag, type: 'form' };\n            localStorage.removeItem('query');\n            localStorage.removeItem('searchInput');\n            localStorage.removeItem('currentPage');\n            this.search = '';\n            this.formGrid.pageChanged({ page: 1 });\n            this.formGrid.query = {};\n            this.formGrid.refreshGrid({ tags: this.config.tag, type: 'form' });\n        };\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    FormManagerIndexComponent.prototype.onAction = /**\n     * @param {?} action\n     * @return {?}\n     */\n        function (action) {\n            this.router.navigate([action.row._id, action.action], { relativeTo: this.route });\n        };\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    FormManagerIndexComponent.prototype.onSelect = /**\n     * @param {?} row\n     * @return {?}\n     */\n        function (row) {\n            this.router.navigate([row._id, 'view'], { relativeTo: this.route });\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerIndexComponent.prototype.onCreateItem = /**\n     * @return {?}\n     */\n        function () {\n            this.router.navigate(['create'], { relativeTo: this.route });\n        };\n    return FormManagerIndexComponent;\n}());\nexport { FormManagerIndexComponent };\nif (false) {\n    /** @type {?} */\n    FormManagerIndexComponent.prototype.formGrid;\n    /** @type {?} */\n    FormManagerIndexComponent.prototype.gridQuery;\n    /** @type {?} */\n    FormManagerIndexComponent.prototype.refreshGrid;\n    /** @type {?} */\n    FormManagerIndexComponent.prototype.search;\n    /** @type {?} */\n    FormManagerIndexComponent.prototype.service;\n    /** @type {?} */\n    FormManagerIndexComponent.prototype.route;\n    /** @type {?} */\n    FormManagerIndexComponent.prototype.router;\n    /** @type {?} */\n    FormManagerIndexComponent.prototype.config;\n}\n",null]}