{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/datagrid/DataGrid.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/datagrid/DataGrid.js","mtime":1581861142221},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.function.name\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.reflect.set\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _NestedComponent2 = _interopRequireDefault(require(\"../nested/NestedComponent\"));\n\nvar _Base = _interopRequireDefault(require(\"../base/Base\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction set(target, property, value, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }\n\nfunction _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar DataGridComponent =\n/*#__PURE__*/\nfunction (_NestedComponent) {\n  _inherits(DataGridComponent, _NestedComponent);\n\n  _createClass(DataGridComponent, null, [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _NestedComponent2.default.schema.apply(_NestedComponent2.default, [{\n        label: 'Data Grid',\n        key: 'dataGrid',\n        type: 'datagrid',\n        clearOnHide: true,\n        input: true,\n        tree: true,\n        components: []\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Data Grid',\n        icon: 'fa fa-th',\n        group: 'data',\n        documentation: 'http://help.form.io/userguide/#datagrid',\n        weight: 20,\n        schema: DataGridComponent.schema()\n      };\n    }\n  }]);\n\n  function DataGridComponent(component, options, data) {\n    var _this;\n\n    _classCallCheck(this, DataGridComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataGridComponent).call(this, component, options, data));\n    _this.type = 'datagrid';\n    _this.numRows = 0;\n    _this.numColumns = 0;\n    _this.rows = [];\n\n    if (_this.hasRowGroups() && !_this.options.builder) {\n      var groups = _lodash.default.get(_this.component, 'rowGroups', []);\n\n      var rowsNum = _this.totalRowsNumber(groups);\n\n      _this.setStaticValue(rowsNum);\n\n      _this.dataValue = _lodash.default.zipWith(_this.dataValue, _this.defaultValue, function (a, b) {\n        return _lodash.default.merge(a, b);\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(DataGridComponent, [{\n    key: \"setStaticValue\",\n    value: function setStaticValue(n) {\n      this.dataValue = _lodash.default.range(n).map(function () {\n        return {};\n      });\n    }\n  }, {\n    key: \"hasAddButton\",\n    value: function hasAddButton() {\n      var maxLength = _lodash.default.get(this.component, 'validate.maxLength');\n\n      return !this.component.disableAddingRemovingRows && !this.shouldDisable && !this.options.builder && !this.options.preview && (!maxLength || this.dataValue.length < maxLength);\n    }\n  }, {\n    key: \"hasExtraColumn\",\n    value: function hasExtraColumn() {\n      var rmPlacement = _lodash.default.get(this, 'component.removePlacement', 'col');\n\n      return this.hasRemoveButtons() && rmPlacement === 'col' || this.options.builder;\n    }\n  }, {\n    key: \"hasRemoveButtons\",\n    value: function hasRemoveButtons() {\n      return !this.component.disableAddingRemovingRows && !this.shouldDisable && !this.options.builder && this.dataValue.length > _lodash.default.get(this.component, 'validate.minLength', 0);\n    }\n  }, {\n    key: \"hasTopSubmit\",\n    value: function hasTopSubmit() {\n      return this.hasAddButton() && ['top', 'both'].includes(this.addAnotherPosition);\n    }\n  }, {\n    key: \"hasBottomSubmit\",\n    value: function hasBottomSubmit() {\n      return this.hasAddButton() && ['bottom', 'both'].includes(this.addAnotherPosition);\n    }\n  }, {\n    key: \"hasChanged\",\n    value: function hasChanged(newValue, oldValue) {\n      return !_lodash.default.isEqual(newValue, oldValue);\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var _this2 = this;\n\n      this.createElement();\n      this.createLabel(this.element);\n      var tableClass = 'table datagrid-table table-bordered form-group formio-data-grid ';\n      ['striped', 'bordered', 'hover', 'condensed'].forEach(function (prop) {\n        if (_this2.component[prop]) {\n          tableClass += \"table-\".concat(prop, \" \");\n        }\n      });\n      this.tableElement = this.ce('table', {\n        class: tableClass,\n        style: this.component.layoutFixed ? 'table-layout: fixed;' : ''\n      });\n      this.element.appendChild(this.tableElement);\n\n      if (!this.dataValue.length) {\n        this.addNewValue();\n      }\n\n      this.visibleColumns = true;\n      this.errorContainer = this.element;\n      this.restoreValue();\n      this.createDescription(this.element);\n      this.attachLogic();\n    }\n  }, {\n    key: \"setVisibleComponents\",\n    value: function setVisibleComponents() {\n      var _this3 = this;\n\n      // Add new values based on minLength.\n      for (var dIndex = this.dataValue.length; dIndex < _lodash.default.get(this.component, 'validate.minLength', 0); dIndex++) {\n        this.dataValue.push({});\n      }\n\n      this.numColumns = this.hasExtraColumn() ? 1 : 0;\n      this.numColumns += this.allowReorder ? 1 : 0;\n      this.numRows = this.dataValue.length;\n\n      if (this.visibleColumns === true) {\n        this.numColumns += this.component.components.length;\n        this.visibleComponents = this.component.components;\n        return this.visibleComponents;\n      }\n\n      this.visibleComponents = this.component.components.filter(function (comp) {\n        return _this3.visibleColumns[comp.key];\n      });\n      this.numColumns += this.visibleComponents.length;\n    }\n  }, {\n    key: \"buildRows\",\n    value: function buildRows() {\n      var _this4 = this;\n\n      this.setVisibleComponents();\n      var state = this.destroy();\n      this.empty(this.tableElement); // Build the rows.\n\n      var tableRows = [];\n      this.dataValue.forEach(function (row, rowIndex) {\n        return tableRows.push(_this4.buildRow(row, rowIndex, state.rows[rowIndex]));\n      }); // Create the header (must happen after build rows to get correct column length)\n\n      var header = this.createHeader();\n\n      if (header) {\n        this.tableElement.appendChild(header);\n      }\n\n      this.tableBody = this.ce('tbody', null, tableRows);\n      this.tableElement.appendChild(this.tableBody);\n\n      if (this.allowReorder) {\n        this.addDraggable([this.tableBody]);\n      }\n\n      if (this.hasRowGroups() && !this.options.builder) {\n        this.buildGroups();\n      } // Create the add row button footer element.\n\n\n      if (this.hasBottomSubmit()) {\n        this.tableElement.appendChild(this.ce('tfoot', null, this.ce('tr', null, this.ce('td', {\n          colspan: this.numColumns\n        }, this.addButton()))));\n      }\n    }\n  }, {\n    key: \"onRowDrop\",\n    value: function onRowDrop(droppedElement, newParent, oldParent, nextSibling) {\n      _get(_getPrototypeOf(DataGridComponent.prototype), \"onRowDrop\", this).call(this, droppedElement, newParent, oldParent, nextSibling);\n\n      this.triggerChange();\n    } // Build the header.\n\n  }, {\n    key: \"createHeader\",\n    value: function createHeader() {\n      var _this5 = this;\n\n      var hasTopButton = this.hasTopSubmit();\n      var hasEnd = this.hasExtraColumn() || hasTopButton;\n      var needsHeader = false;\n      var thead = this.ce('thead', null, this.ce('tr', null, [this.allowReorder ? this.ce('th', {\n        class: 'formio-drag-column-header'\n      }) : null, this.visibleComponents.map(function (comp) {\n        var th = _this5.ce('th');\n\n        if (comp.validate && comp.validate.required) {\n          th.setAttribute('class', 'field-required');\n        }\n\n        var title = comp.label || comp.title;\n\n        if (title && !comp.dataGridLabel) {\n          needsHeader = true;\n          th.appendChild(_this5.text(title));\n\n          _this5.createTooltip(th, comp);\n        }\n\n        return th;\n      }), hasEnd ? this.ce('th', null, hasTopButton ? this.addButton(true) : null) : null]));\n      return needsHeader ? thead : null;\n    }\n  }, {\n    key: \"buildRow\",\n    value: function buildRow(rowData, index, state) {\n      var _this6 = this;\n\n      state = state || {};\n\n      var components = _lodash.default.get(this, 'component.components', []);\n\n      var colsNum = components.length;\n      var lastColIndex = colsNum - 1;\n      var hasRmButton = this.hasRemoveButtons();\n      var hasTopButton = this.hasTopSubmit();\n\n      var rmPlacement = _lodash.default.get(this, 'component.removePlacement', 'col');\n\n      var useCorner = false;\n      var lastColumn = null;\n      this.rows[index] = {};\n      var firstColumn = null;\n\n      if (this.allowReorder) {\n        firstColumn = this.ce('td', {\n          class: 'formio-drag-column'\n        }, this.dragButton());\n      }\n\n      if (hasRmButton) {\n        if (rmPlacement === 'col') {\n          lastColumn = this.ce('td', {\n            class: 'formio-remove-column'\n          }, this.removeButton(index));\n        } else {\n          useCorner = true;\n        }\n      } else if (this.options.builder) {\n        lastColumn = this.ce('td', {\n          id: \"\".concat(this.id, \"-drag-container\"),\n          class: 'drag-container'\n        }, this.ce('div', {\n          id: \"\".concat(this.id, \"-placeholder\"),\n          class: 'alert alert-info',\n          style: 'text-align:center; margin-bottom: 0px;',\n          role: 'alert'\n        }, this.text('Drag and Drop a form component')));\n        this.root.addDragContainer(lastColumn, this);\n      }\n\n      var rowElement = this.ce('tr', null, [firstColumn, components.map(function (cmp, colIndex) {\n        var cell = _this6.buildComponent(cmp, colIndex, rowData, index, _this6.getComponentState(cmp, state));\n\n        if (hasRmButton && useCorner && lastColIndex === colIndex) {\n          cell.style.position = 'relative';\n          cell.style.width = '50px';\n          cell.append(_this6.removeButton(index, 'small'));\n\n          if (hasTopButton) {\n            cell.setAttribute('colspan', 2);\n          }\n        }\n\n        return cell;\n      }), lastColumn]); //add element info for drag'n'drop handlers\n\n      if (this.allowReorder) {\n        rowElement.dragInfo = {\n          index: index\n        };\n      }\n\n      return rowElement;\n    }\n  }, {\n    key: \"destroyRows\",\n    value: function destroyRows() {\n      var _this7 = this;\n\n      var state = {};\n      state.rows = state.rows || {};\n      this.rows.forEach(function (row, rowIndex) {\n        return _lodash.default.forIn(row, function (col) {\n          state.rows[rowIndex] = state.rows[rowIndex] || {};\n\n          var compState = _this7.removeComponent(col, row);\n\n          if (col.key && compState) {\n            state.rows[rowIndex][col.key] = compState;\n          }\n        });\n      });\n      this.rows = [];\n      return state;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var state = this.destroyRows();\n\n      _get(_getPrototypeOf(DataGridComponent.prototype), \"destroy\", this).call(this);\n\n      return state;\n    }\n  }, {\n    key: \"buildComponent\",\n    value: function buildComponent(col, colIndex, row, rowIndex, state) {\n      var container;\n      var isVisible = this.visibleColumns && (!this.visibleColumns.hasOwnProperty(col.key) || this.visibleColumns[col.key]);\n\n      if (isVisible || this.options.builder) {\n        container = this.ce('td');\n        container.noDrop = true;\n      }\n\n      var column = _lodash.default.clone(col);\n\n      var options = _lodash.default.clone(this.options);\n\n      options.name += \"[\".concat(rowIndex, \"]\");\n      options.row = \"\".concat(rowIndex, \"-\").concat(colIndex);\n      options.inDataGrid = true;\n      var comp = this.createComponent(_lodash.default.assign({}, column, {\n        row: options.row\n      }), options, row, null, state);\n      comp.rowIndex = rowIndex;\n      this.hook('addComponent', container, comp, this);\n      this.rows[rowIndex][column.key] = comp;\n\n      if (isVisible || this.options.builder) {\n        container.appendChild(comp.getElement());\n        return container;\n      }\n    }\n  }, {\n    key: \"checkConditions\",\n    value: function checkConditions(data) {\n      var _this8 = this;\n\n      var show = _get(_getPrototypeOf(DataGridComponent.prototype), \"checkConditions\", this).call(this, data); // If table isn't visible, don't bother calculating columns.\n\n\n      if (!show) {\n        return false;\n      }\n\n      var rebuild = false;\n\n      if (this.visibleColumns === true) {\n        this.visibleColumns = {};\n      }\n\n      this.component.components.forEach(function (col) {\n        var showColumn = false;\n\n        _this8.rows.forEach(function (comps) {\n          if (comps && comps[col.key] && typeof comps[col.key].checkConditions === 'function') {\n            showColumn |= comps[col.key].checkConditions(data);\n          }\n        });\n\n        showColumn = showColumn && col.type !== 'hidden' && !col.hidden;\n\n        if (_this8.visibleColumns[col.key] && !showColumn || !_this8.visibleColumns[col.key] && showColumn) {\n          rebuild = true;\n        }\n\n        _this8.visibleColumns[col.key] = showColumn;\n        show |= showColumn;\n      }); // If a rebuild is needed, then rebuild the table.\n\n      if (rebuild) {\n        this.restoreValue();\n      } // Return if this table should show.\n\n\n      return show;\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(flags, value) {\n      // Intentionally skip over nested component updateValue method to keep recursive update from occurring with sub components.\n      return _Base.default.prototype.updateValue.call(this, flags, value);\n    }\n    /* eslint-disable max-statements */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, flags) {\n      var _this9 = this;\n\n      flags = this.getFlags.apply(this, arguments);\n\n      if (!value) {\n        this.dataValue = this.defaultValue;\n        this.buildRows();\n        return;\n      }\n\n      if (!Array.isArray(value)) {\n        if (_typeof(value) === 'object') {\n          value = [value];\n        } else {\n          this.buildRows();\n          return;\n        }\n      }\n\n      var changed = this.hasChanged(value, this.dataValue); //always should build if not built yet OR is trying to set empty value (in order to prevent deleting last row)\n\n      var shouldBuildRows = !this.isBuilt || changed || _lodash.default.isEqual(this.emptyValue, value); //check if visible columns changed\n\n\n      var visibleColumnsAmount = 0;\n\n      _lodash.default.forEach(this.visibleColumns, function (value) {\n        if (value) {\n          visibleColumnsAmount++;\n        }\n      });\n\n      var visibleComponentsAmount = this.visibleComponents ? this.visibleComponents.length : 0; //should build if visible columns changed\n\n      shouldBuildRows = shouldBuildRows || visibleColumnsAmount !== visibleComponentsAmount; //loop through all rows and check if there is field in new value that differs from current value\n\n      var keys = this.componentComponents.map(function (component) {\n        return component.key;\n      });\n\n      for (var i = 0; i < value.length; i++) {\n        if (shouldBuildRows) {\n          break;\n        }\n\n        var valueRow = value[i];\n\n        for (var j = 0; j < keys.length; j++) {\n          var key = keys[j];\n          var newFieldValue = valueRow[key];\n          var currentFieldValue = this.rows[i] && this.rows[i][key] ? this.rows[i][key].getValue() : undefined;\n          var defaultFieldValue = this.rows[i] && this.rows[i][key] ? this.rows[i][key].defaultValue : undefined;\n          var isMissingValue = newFieldValue === undefined && currentFieldValue === defaultFieldValue;\n\n          if (!isMissingValue && !_lodash.default.isEqual(newFieldValue, currentFieldValue)) {\n            shouldBuildRows = true;\n            break;\n          }\n        }\n      }\n\n      if (shouldBuildRows) {\n        this.dataValue = value;\n        this.buildRows();\n        this.rows.forEach(function (row, index) {\n          if (value.length <= index) {\n            return;\n          }\n\n          _lodash.default.forIn(row, function (component) {\n            return _this9.setNestedValue(component, value[index], flags);\n          });\n        });\n      }\n\n      return changed;\n    }\n    /* eslint-enable max-statements */\n\n  }, {\n    key: \"resetValue\",\n    value: function resetValue() {\n      _get(_getPrototypeOf(DataGridComponent.prototype), \"resetValue\", this).call(this);\n\n      this.buildRows();\n    }\n    /**\n     * Get the value of this component.\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.dataValue;\n    }\n  }, {\n    key: \"restoreComponentsContext\",\n    value: function restoreComponentsContext() {\n      var _this10 = this;\n\n      this.rows.forEach(function (row, index) {\n        return _lodash.default.forIn(row, function (component) {\n          return component.data = _this10.dataValue[index];\n        });\n      });\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(path, fn) {\n      path = Array.isArray(path) ? path : [path];\n\n      var _path = path,\n          _path2 = _toArray(_path),\n          key = _path2[0],\n          remainingPath = _path2.slice(1);\n\n      var result = [];\n\n      if (!_lodash.default.isString(key)) {\n        return result;\n      }\n\n      this.everyComponent(function (component, components) {\n        if (component.component.key === key) {\n          var comp = component;\n\n          if (remainingPath.length > 0 && 'getComponent' in component) {\n            comp = component.getComponent(remainingPath, fn);\n          } else if (fn) {\n            fn(component, components);\n          }\n\n          result = result.concat(comp);\n        }\n      });\n      return result.length > 0 ? result : null;\n    }\n    /** @override **/\n\n  }, {\n    key: \"removeButton\",\n    value: function removeButton(index) {\n      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'basic';\n\n      if (mode === 'small') {\n        return this.removeButtonSmall(index);\n      }\n\n      return _get(_getPrototypeOf(DataGridComponent.prototype), \"removeButton\", this).call(this, index);\n    }\n  }, {\n    key: \"removeButtonSmall\",\n    value: function removeButtonSmall(index) {\n      var _this11 = this;\n\n      var cmpType = _lodash.default.get(this, 'component.type', 'datagrid');\n\n      var className = \"btn btn-xxs btn-danger formio-\".concat(cmpType, \"-remove\");\n      var button = this.ce('button', {\n        type: 'button',\n        tabindex: '-1',\n        class: className\n      }, this.ce('i', {\n        class: this.iconClass('remove')\n      }));\n      this.addEventListener(button, 'click', function (event) {\n        event.preventDefault();\n\n        _this11.removeValue(index);\n      });\n      return button;\n    }\n    /*** Row Groups ***/\n\n    /**\n     * @param {Numbers[]} groups\n     * @param {Array<T>} coll - collection\n     *\n     * @return {Array<T[]>}\n     */\n\n  }, {\n    key: \"getRowChunks\",\n    value: function getRowChunks(groups, coll) {\n      var _groups$reduce = groups.reduce(function (_ref, size) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            startIndex = _ref2[0],\n            acc = _ref2[1];\n\n        var endIndex = startIndex + size;\n        return [endIndex, [].concat(_toConsumableArray(acc), [[startIndex, endIndex]])];\n      }, [0, []]),\n          _groups$reduce2 = _slicedToArray(_groups$reduce, 2),\n          chunks = _groups$reduce2[1];\n\n      return chunks.map(function (range) {\n        return _lodash.default.slice.apply(_lodash.default, [coll].concat(_toConsumableArray(range)));\n      });\n    }\n  }, {\n    key: \"hasRowGroups\",\n    value: function hasRowGroups() {\n      return _lodash.default.get(this, 'component.enableRowGroups', false);\n    }\n  }, {\n    key: \"buildGroups\",\n    value: function buildGroups() {\n      var _this12 = this;\n\n      var groups = _lodash.default.get(this.component, 'rowGroups', []);\n\n      var ranges = _lodash.default.map(groups, 'numberOfRows');\n\n      var rows = this.tableElement.querySelectorAll('tbody>tr');\n      var tbody = this.tableElement.querySelector('tbody');\n      var chunks = this.getRowChunks(ranges, rows);\n      var firstElements = chunks.map(_lodash.default.head);\n      var groupElements = groups.map(function (g, index) {\n        return _this12.buildGroup(g, index, chunks[index]);\n      });\n      groupElements.forEach(function (elt, index) {\n        var row = firstElements[index];\n\n        if (row) {\n          tbody.insertBefore(elt, row);\n        }\n      });\n    }\n  }, {\n    key: \"buildGroup\",\n    value: function buildGroup(_ref3, index, groupRows) {\n      var label = _ref3.label;\n\n      var hasToggle = _lodash.default.get(this, 'component.groupToggle', false);\n\n      var colsNumber = _lodash.default.get(this, 'component.components', []).length;\n\n      var cell = this.ce('td', {\n        colspan: colsNumber,\n        class: 'datagrid-group-label'\n      }, [label]);\n      var header = this.ce('tr', {\n        class: \"datagrid-group-header \".concat(hasToggle ? 'clickable' : '')\n      }, cell);\n\n      if (hasToggle) {\n        this.addEventListener(header, 'click', function () {\n          header.classList.toggle('collapsed');\n\n          _lodash.default.each(groupRows, function (row) {\n            row.classList.toggle('hidden');\n          });\n        });\n      }\n\n      return header;\n    }\n  }, {\n    key: \"totalRowsNumber\",\n    value: function totalRowsNumber(groups) {\n      return _lodash.default.sum(_lodash.default.map(groups, 'numberOfRows'));\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return DataGridComponent.schema();\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return [{}];\n    }\n  }, {\n    key: \"addAnotherPosition\",\n    get: function get() {\n      return _lodash.default.get(this.component, 'addAnotherPosition', 'bottom');\n    }\n  }, {\n    key: \"allowReorder\",\n    get: function get() {\n      return _get(_getPrototypeOf(DataGridComponent.prototype), \"allowReorder\", this) && !this.options.builder;\n    }\n  }, {\n    key: \"dataValue\",\n    get: function get() {\n      var dataValue = _get(_getPrototypeOf(DataGridComponent.prototype), \"dataValue\", this);\n\n      if (!dataValue || !Array.isArray(dataValue)) {\n        return this.emptyValue;\n      }\n\n      return dataValue;\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(DataGridComponent.prototype), \"dataValue\", value, this, true);\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      var value = _get(_getPrototypeOf(DataGridComponent.prototype), \"defaultValue\", this);\n\n      if (Array.isArray(value)) {\n        return value;\n      }\n\n      if (value && _typeof(value) === 'object') {\n        return [value];\n      }\n\n      return this.emptyValue;\n    }\n  }]);\n\n  return DataGridComponent;\n}(_NestedComponent2.default); // const BaseGetSchema = Object.getOwnPropertyDescriptor(BaseComponent.prototype, 'schema');\n// Object.defineProperty(DataGridComponent.prototype, 'schema', BaseGetSchema);\n\n\nexports.default = DataGridComponent;",null]}