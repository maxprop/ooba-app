{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.js","mtime":1581861144624},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START lodash_find,lodash_isEqual,_.._lib_utils.js PURE_IMPORTS_END */\nvar _slicedToArray = /*@__PURE__*/ function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i)\n            break;\n    }\n}\ncatch (err) {\n    _d = true;\n    _e = err;\n}\nfinally {\n    try {\n        if (!_n && _i[\"return\"])\n            _i[\"return\"]();\n    }\n    finally {\n        if (_d)\n            throw _e;\n    }\n} return _arr; } return function (arr, i) { if (Array.isArray(arr)) {\n    return arr;\n}\nelse if (Symbol.iterator in Object(arr)) {\n    return sliceIterator(arr, i);\n}\nelse {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n} }; }();\nimport find from 'lodash/find';\nimport isEqual from 'lodash/isEqual';\nimport { checkRendering, warn } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customBreadcrumb = connectBreadcrumb(function renderFn(params, isFirstRendering) {\\n  // params = {\\n  //   createURL,\\n  //   items,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customBreadcrumb({\\n    attributes,\\n    [ rootPath = null ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectBreadcrumb.html\\n';\n/**\n * @typedef {Object} BreadcrumbItem\n * @property {string} name Name of the category or subcategory.\n * @property {string} value Value of breadcrumb item.\n */\n/**\n * @typedef {Object} CustomBreadcrumbWidgetOptions\n * @property {string[]} attributes Attributes to use to generate the hierarchy of the breadcrumb.\n * @property {string} [rootPath = null] Prefix path to use if the first level is not the root level.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n *\n * You can also use a sort function that behaves like the standard Javascript [compareFunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Syntax).\n */\n/**\n * @typedef {Object} BreadcrumbRenderingOptions\n * @property {function(item.value): string} createURL Creates an url for the next state for a clicked item. The special value `null` is used for the `Home` (or root) item of the breadcrumb and will return an empty array.\n * @property {BreadcrumbItem[]} items Values to be rendered.\n * @property {function(item.value)} refine Sets the path of the hierarchical filter and triggers a new search.\n * @property {Object} widgetParams All original `CustomBreadcrumbWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * **Breadcrumb** connector provides the logic to build a custom widget\n * that will give the user the ability to see the current path in a hierarchical facet.\n *\n * This is commonly used in websites that have a large amount of content organized in a hierarchical manner (usually e-commerce websites).\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/breadcrumb/js/\n * @param {function(BreadcrumbRenderingOptions, boolean)} renderFn Rendering function for the custom **Breadcrumb* widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomBreadcrumbWidgetOptions)} Re-usable widget factory for a custom **Breadcrumb** widget.\n */\nexport default function connectBreadcrumb(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var attributes = widgetParams.attributes, _widgetParams$separat = widgetParams.separator, separator = _widgetParams$separat === undefined ? ' > ' : _widgetParams$separat, _widgetParams$rootPat = widgetParams.rootPath, rootPath = _widgetParams$rootPat === undefined ? null : _widgetParams$rootPat, _widgetParams$transfo = widgetParams.transformItems, transformItems = _widgetParams$transfo === undefined ? function (items) {\n            return items;\n        } : _widgetParams$transfo;\n        var _attributes = _slicedToArray(attributes, 1), hierarchicalFacetName = _attributes[0];\n        if (!attributes || !Array.isArray(attributes) || attributes.length === 0) {\n            throw new Error(usage);\n        }\n        return {\n            getConfiguration: function getConfiguration(currentConfiguration) {\n                if (currentConfiguration.hierarchicalFacets) {\n                    var isFacetSet = find(currentConfiguration.hierarchicalFacets, function (_ref) {\n                        var name = _ref.name;\n                        return name === hierarchicalFacetName;\n                    });\n                    if (isFacetSet) {\n                        if (!isEqual(isFacetSet.attributes, attributes) || isFacetSet.separator !== separator) {\n                            warn('Using Breadcrumb & HierarchicalMenu on the same facet with different options. Adding that one will override the configuration of the HierarchicalMenu. Check your options.');\n                        }\n                        return {};\n                    }\n                }\n                return {\n                    hierarchicalFacets: [{\n                            attributes: attributes,\n                            name: hierarchicalFacetName,\n                            separator: separator,\n                            rootPath: rootPath\n                        }]\n                };\n            },\n            init: function init(_ref2) {\n                var createURL = _ref2.createURL, helper = _ref2.helper, instantSearchInstance = _ref2.instantSearchInstance;\n                this._createURL = function (facetValue) {\n                    if (!facetValue) {\n                        var breadcrumb = helper.getHierarchicalFacetBreadcrumb(hierarchicalFacetName);\n                        if (breadcrumb.length > 0) {\n                            return createURL(helper.state.toggleRefinement(hierarchicalFacetName, breadcrumb[0]));\n                        }\n                    }\n                    return createURL(helper.state.toggleRefinement(hierarchicalFacetName, facetValue));\n                };\n                this._refine = function (facetValue) {\n                    if (!facetValue) {\n                        var breadcrumb = helper.getHierarchicalFacetBreadcrumb(hierarchicalFacetName);\n                        if (breadcrumb.length > 0) {\n                            helper.toggleRefinement(hierarchicalFacetName, breadcrumb[0]).search();\n                        }\n                    }\n                    else {\n                        helper.toggleRefinement(hierarchicalFacetName, facetValue).search();\n                    }\n                };\n                renderFn({\n                    createURL: this._createURL,\n                    canRefine: false,\n                    instantSearchInstance: instantSearchInstance,\n                    items: [],\n                    refine: this._refine,\n                    widgetParams: widgetParams\n                }, true);\n            },\n            render: function render(_ref3) {\n                var instantSearchInstance = _ref3.instantSearchInstance, results = _ref3.results, state = _ref3.state;\n                var _state$hierarchicalFa = _slicedToArray(state.hierarchicalFacets, 1), facetName = _state$hierarchicalFa[0].name;\n                var facetValues = results.getFacetValues(facetName);\n                var data = Array.isArray(facetValues.data) ? facetValues.data : [];\n                var items = transformItems(shiftItemsValues(prepareItems(data)));\n                renderFn({\n                    canRefine: items.length > 0,\n                    createURL: this._createURL,\n                    instantSearchInstance: instantSearchInstance,\n                    items: items,\n                    refine: this._refine,\n                    widgetParams: widgetParams\n                }, false);\n            },\n            dispose: function dispose() {\n                unmountFn();\n            }\n        };\n    };\n}\nfunction prepareItems(data) {\n    return data.reduce(function (result, currentItem) {\n        if (currentItem.isRefined) {\n            result.push({\n                name: currentItem.name,\n                value: currentItem.path\n            });\n            if (Array.isArray(currentItem.data)) {\n                result = result.concat(prepareItems(currentItem.data));\n            }\n        }\n        return result;\n    }, []);\n}\nfunction shiftItemsValues(array) {\n    return array.map(function (x, idx) {\n        return {\n            name: x.name,\n            value: idx + 1 === array.length ? null : array[idx + 1].value\n        };\n    });\n}\n",null]}