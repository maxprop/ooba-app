{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/manager/edit/edit.component.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/manager/edit/edit.component.js","mtime":1581861141298},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { Component, ViewChild, ChangeDetectorRef } from '@angular/core';\nimport { FormManagerService } from '../form-manager.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormManagerConfig } from '../form-manager.config';\nimport { FormioAlerts } from '../../components/alerts/formio.alerts';\nimport { FormBuilderComponent } from '../../components/formbuilder/formbuilder.component';\nimport _ from 'lodash';\nvar FormManagerEditComponent = /*@__PURE__*/ (function () {\n    function FormManagerEditComponent(service, router, route, config, ref, alerts) {\n        this.service = service;\n        this.router = router;\n        this.route = route;\n        this.config = config;\n        this.ref = ref;\n        this.alerts = alerts;\n        this.form = { components: [] };\n        this.formReady = false;\n        this.loading = false;\n        this.editMode = false;\n    }\n    /**\n     * @param {?} editing\n     * @return {?}\n     */\n    FormManagerEditComponent.prototype.initBuilder = /**\n     * @param {?} editing\n     * @return {?}\n     */\n        function (editing) {\n            var _this = this;\n            if (editing) {\n                this.loading = true;\n                this.ref.detectChanges();\n                this.editMode = true;\n                return this.service.loadForm().then((function (form) {\n                    _this.form = form;\n                    _this.formTitle.nativeElement.value = form.title;\n                    _this.formType.nativeElement.value = form.display || 'form';\n                    _this.loading = false;\n                    _this.formReady = true;\n                    _this.ref.detectChanges();\n                    return true;\n                })).catch((function (err) {\n                    _this.alerts.setAlert({ type: 'danger', message: (err.message || err) });\n                    _this.loading = false;\n                    _this.formReady = true;\n                }));\n            }\n            else {\n                this.formReady = true;\n                return Promise.resolve(true);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerEditComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.route.url.subscribe((function (url) {\n                _this.initBuilder((url[0].path === 'edit'));\n            }));\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    FormManagerEditComponent.prototype.onDisplaySelect = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.builder.setDisplay(event.target.value);\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerEditComponent.prototype.saveForm = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.loading = true;\n            this.form.title = this.formTitle.nativeElement.value;\n            this.form.display = this.formType.nativeElement.value;\n            this.form.components = this.builder.formio.schema.components;\n            if (this.config.tag) {\n                this.form.tags = this.form.tags || [];\n                this.form.tags.push(this.config.tag);\n                this.form.tags = _.uniq(this.form.tags);\n            }\n            if (!this.form._id) {\n                this.form.name = _.camelCase(this.form.title).toLowerCase();\n                this.form.path = this.form.name;\n            }\n            return this.service.formio.saveForm(this.form).then((function (form) {\n                _this.form = _this.service.setForm(form);\n                _this.loading = false;\n                return _this.form;\n            })).catch((function (err) {\n                _this.loading = false;\n                // Catch if a form is returned as an error. This is a conflict.\n                if (err._id && err.type) {\n                    throw err;\n                }\n                _this.alerts.setAlert({ type: 'danger', message: (err.message || err) });\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerEditComponent.prototype.onSave = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return this.saveForm().then((function (form) {\n                if (_this.editMode) {\n                    _this.router.navigate(['../', 'view'], { relativeTo: _this.route });\n                }\n                else {\n                    _this.router.navigate(['../', form._id, 'view'], { relativeTo: _this.route });\n                }\n            }));\n        };\n    return FormManagerEditComponent;\n}());\nexport { FormManagerEditComponent };\nif (false) {\n    /** @type {?} */\n    FormManagerEditComponent.prototype.builder;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.formTitle;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.formType;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.form;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.loading;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.formReady;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.editMode;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.service;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.router;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.route;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.config;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.ref;\n    /** @type {?} */\n    FormManagerEditComponent.prototype.alerts;\n}\n",null]}