{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/browser-cookies/src/browser-cookies.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/browser-cookies/src/browser-cookies.js","mtime":1571276077703},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["exports.defaults = {};\n\nexports.set = function(name, value, options) {\n  // Retrieve options and defaults\n  var opts = options || {};\n  var defaults = exports.defaults;\n\n  // Apply default value for unspecified options\n  var expires  = opts.expires  || defaults.expires;\n  var domain   = opts.domain   || defaults.domain;\n  var path     = opts.path     !== undefined ? opts.path     : (defaults.path !== undefined ? defaults.path : '/');\n  var secure   = opts.secure   !== undefined ? opts.secure   : defaults.secure;\n  var httponly = opts.httponly !== undefined ? opts.httponly : defaults.httponly;\n  var samesite = opts.samesite !== undefined ? opts.samesite : defaults.samesite;\n\n  // Determine cookie expiration date\n  // If succesful the result will be a valid Date, otherwise it will be an invalid Date or false(ish)\n  var expDate = expires ? new Date(\n      // in case expires is an integer, it should specify the number of days till the cookie expires\n      typeof expires === 'number' ? new Date().getTime() + (expires * 864e5) :\n      // else expires should be either a Date object or in a format recognized by Date.parse()\n      expires\n  ) : 0;\n\n  // Set cookie\n  document.cookie = name.replace(/[^+#$&^`|]/g, encodeURIComponent)                // Encode cookie name\n  .replace('(', '%28')\n  .replace(')', '%29') +\n  '=' + value.replace(/[^+#$&/:<-\\[\\]-}]/g, encodeURIComponent) +                  // Encode cookie value (RFC6265)\n  (expDate && expDate.getTime() >= 0 ? ';expires=' + expDate.toUTCString() : '') + // Add expiration date\n  (domain   ? ';domain=' + domain     : '') +                                      // Add domain\n  (path     ? ';path='   + path       : '') +                                      // Add path\n  (secure   ? ';secure'               : '') +                                      // Add secure option\n  (httponly ? ';httponly'             : '') +                                      // Add httponly option\n  (samesite ? ';samesite=' + samesite : '');                                       // Add samesite option\n};\n\nexports.get = function(name) {\n  var cookies = document.cookie.split(';');\n  \n  // Iterate all cookies\n  while(cookies.length) {\n    var cookie = cookies.pop();\n\n    // Determine separator index (\"name=value\")\n    var separatorIndex = cookie.indexOf('=');\n\n    // IE<11 emits the equal sign when the cookie value is empty\n    separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;\n\n    var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\\s+/, ''));\n\n    // Return cookie value if the name matches\n    if (cookie_name === name) {\n      return decodeURIComponent(cookie.slice(separatorIndex + 1));\n    }\n  }\n\n  // Return `null` as the cookie was not found\n  return null;\n};\n\nexports.erase = function(name, options) {\n  exports.set(name, '', {\n    expires:  -1,\n    domain:   options && options.domain,\n    path:     options && options.path,\n    secure:   0,\n    httponly: 0}\n  );\n};\n\nexports.all = function() {\n  var all = {};\n  var cookies = document.cookie.split(';');\n\n  // Iterate all cookies\n  while(cookies.length) {\n    var cookie = cookies.pop();\n\n    // Determine separator index (\"name=value\")\n    var separatorIndex = cookie.indexOf('=');\n\n    // IE<11 emits the equal sign when the cookie value is empty\n    separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;\n\n    // add the cookie name and value to the `all` object\n    var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\\s+/, ''));\n    all[cookie_name] = decodeURIComponent(cookie.slice(separatorIndex + 1));\n  }\n\n  return all;\n};\n",null]}