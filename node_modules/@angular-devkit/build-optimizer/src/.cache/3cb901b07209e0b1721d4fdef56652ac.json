{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/select/Select.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/components/select/Select.js","mtime":1584368630976},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.find\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.join\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.function.name\");\n\nrequire(\"core-js/modules/es.object.assign\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.reflect.set\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.includes\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _choices = _interopRequireDefault(require(\"choices.js/public/assets/scripts/choices.js\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Base = _interopRequireDefault(require(\"../base/Base\"));\n\nvar _Formio = _interopRequireDefault(require(\"../../Formio\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction set(target, property, value, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }\n\nfunction _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar SelectComponent =\n/*#__PURE__*/\nfunction (_BaseComponent) {\n  _inherits(SelectComponent, _BaseComponent);\n\n  _createClass(SelectComponent, null, [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _Base.default.schema.apply(_Base.default, [{\n        type: 'select',\n        label: 'Select',\n        key: 'select',\n        data: {\n          values: [],\n          json: '',\n          url: '',\n          resource: '',\n          custom: ''\n        },\n        limit: 100,\n        dataSrc: 'values',\n        valueProperty: '',\n        filter: '',\n        searchEnabled: true,\n        searchField: '',\n        minSearch: 0,\n        readOnlyValue: false,\n        authenticate: false,\n        template: '<span>{{ item.label }}</span>',\n        selectFields: '',\n        searchThreshold: 0.3,\n        fuseOptions: {},\n        customOptions: {}\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Select',\n        group: 'basic',\n        icon: 'fa fa-th-list',\n        weight: 70,\n        documentation: 'http://help.form.io/userguide/#select',\n        schema: SelectComponent.schema()\n      };\n    }\n  }]);\n\n  function SelectComponent(component, options, data) {\n    var _this;\n\n    _classCallCheck(this, SelectComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectComponent).call(this, component, options, data)); // Trigger an update.\n\n    _this.triggerUpdate = _lodash.default.debounce(_this.updateItems.bind(_assertThisInitialized(_this)), 100); // Keep track of the select options.\n\n    _this.selectOptions = [];\n\n    if (_this.isInfiniteScrollProvided) {\n      _this.isFromSearch = false;\n      _this.searchServerCount = null;\n      _this.defaultServerCount = null;\n      _this.isScrollLoading = false;\n      _this.searchDownloadedResources = [];\n      _this.defaultDownloadedResources = [];\n    } // If this component has been activated.\n\n\n    _this.activated = false; // Determine when the items have been loaded.\n\n    _this.itemsLoaded = new _nativePromiseOnly.default(function (resolve) {\n      _this.itemsLoadedResolve = resolve;\n    });\n    return _this;\n  }\n\n  _createClass(SelectComponent, [{\n    key: \"elementInfo\",\n    value: function elementInfo() {\n      var info = _get(_getPrototypeOf(SelectComponent.prototype), \"elementInfo\", this).call(this);\n\n      info.type = 'select';\n      info.changeEvent = 'change';\n      return info;\n    }\n  }, {\n    key: \"createWrapper\",\n    value: function createWrapper() {\n      return false;\n    }\n  }, {\n    key: \"itemTemplate\",\n    value: function itemTemplate(data) {\n      if (!data) {\n        return '';\n      } // If they wish to show the value in read only mode, then just return the itemValue here.\n\n\n      if (this.options.readOnly && this.component.readOnlyValue) {\n        return this.itemValue(data);\n      } // Perform a fast interpretation if we should not use the template.\n\n\n      if (data && !this.component.template) {\n        var itemLabel = data.label || data;\n        return typeof itemLabel === 'string' ? this.t(itemLabel) : itemLabel;\n      }\n\n      if (typeof data === 'string') {\n        return this.t(data);\n      }\n\n      var template = this.component.template ? this.interpolate(this.component.template, {\n        item: data\n      }) : data.label;\n\n      if (template) {\n        var label = template.replace(/<\\/?[^>]+(>|$)/g, '');\n        return template.replace(label, this.t(label));\n      } else {\n        return JSON.stringify(data);\n      }\n    }\n    /**\n     * @param {*} data\n     * @param {boolean} [forceUseValue=false] - if true, return 'value' property of the data\n     * @return {*}\n     */\n\n  }, {\n    key: \"itemValue\",\n    value: function itemValue(data) {\n      var forceUseValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (_lodash.default.isObject(data)) {\n        if (this.component.valueProperty) {\n          return _lodash.default.get(data, this.component.valueProperty);\n        }\n\n        if (forceUseValue) {\n          return data.value;\n        }\n      }\n\n      return data;\n    }\n  }, {\n    key: \"addAutofillHoneyInput\",\n    value: function addAutofillHoneyInput(container, input) {\n      var _this2 = this;\n\n      var autofillInput = this.ce('input', {\n        type: 'text',\n        name: this.info.attr.name,\n        style: 'display: none'\n      });\n      input.addEventListener('change', function (event) {\n        autofillInput.value = JSON.stringify(event.detail ? event.detail.value : event.target.value);\n      });\n      autofillInput.addEventListener('change', function (event) {\n        _this2.updateValue({}, JSON.parse(event.target.value));\n      });\n      container.appendChild(autofillInput);\n    }\n  }, {\n    key: \"createInput\",\n    value: function createInput(container) {\n      this.selectContainer = container;\n      this.selectInput = _get(_getPrototypeOf(SelectComponent.prototype), \"createInput\", this).call(this, container);\n\n      if (this.component.widget !== 'html5') {\n        this.addAutofillHoneyInput(this.selectContainer, this.selectInput);\n      }\n    }\n    /**\n     * Adds an option to the select dropdown.\n     *\n     * @param value\n     * @param label\n     */\n\n  }, {\n    key: \"addOption\",\n    value: function addOption(value, label, attr) {\n      var option = {\n        value: value,\n        label: label\n      };\n\n      if (value) {\n        this.selectOptions.push(option);\n      }\n\n      if (this.choices) {\n        return;\n      }\n\n      option.element = document.createElement('option');\n\n      if (this.dataValue === option.value) {\n        option.element.setAttribute('selected', 'selected');\n        option.element.selected = 'selected';\n      }\n\n      option.element.innerHTML = label;\n\n      if (attr) {\n        _lodash.default.each(attr, function (value, key) {\n          option.element.setAttribute(key, value);\n        });\n      }\n\n      this.selectInput.appendChild(option.element);\n    }\n  }, {\n    key: \"addValueOptions\",\n    value: function addValueOptions(items) {\n      items = items || [];\n\n      if (!this.selectOptions.length) {\n        if (this.choices) {\n          // Add the currently selected choices if they don't already exist.\n          var currentChoices = Array.isArray(this.dataValue) ? this.dataValue : [this.dataValue];\n          return this.addCurrentChoices(currentChoices, items);\n        } else if (!this.component.multiple) {\n          this.addPlaceholder(this.selectInput);\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"disableInfiniteScroll\",\n    value: function disableInfiniteScroll() {\n      if (!this.downloadedResources) {\n        return;\n      }\n\n      this.downloadedResources.serverCount = this.downloadedResources.length;\n      this.serverCount = this.downloadedResources.length;\n    }\n    /* eslint-disable max-statements */\n\n  }, {\n    key: \"setItems\",\n    value: function setItems(items, fromSearch) {\n      var _this3 = this;\n\n      // If the items is a string, then parse as JSON.\n      if (typeof items == 'string') {\n        try {\n          items = JSON.parse(items);\n        } catch (err) {\n          console.warn(err.message);\n          items = [];\n        }\n      } // Allow js processing (needed for form builder)\n\n\n      if (this.component.onSetItems && typeof this.component.onSetItems === 'function') {\n        var newItems = this.component.onSetItems(this, items);\n\n        if (newItems) {\n          items = newItems;\n        }\n      }\n\n      if (!this.choices && this.selectInput) {\n        this.selectInput.innerHTML = '';\n      } // If they provided select values, then we need to get them instead.\n\n\n      if (this.component.selectValues) {\n        items = _lodash.default.get(items, this.component.selectValues, items) || [];\n      }\n\n      var areItemsEqual;\n\n      if (this.isInfiniteScrollProvided) {\n        areItemsEqual = this.isSelectURL ? _lodash.default.isEqual(items, this.downloadedResources) : false;\n        var areItemsEnded = this.component.limit > items.length;\n        var areItemsDownloaded = areItemsEqual && this.downloadedResources && this.downloadedResources.length === items.length;\n\n        if (areItemsEnded) {\n          this.disableInfiniteScroll();\n        } else if (areItemsDownloaded) {\n          this.selectOptions = [];\n        } else {\n          this.serverCount = items.serverCount;\n        }\n      }\n\n      if (this.isScrollLoading && items) {\n        if (!areItemsEqual) {\n          this.downloadedResources = this.downloadedResources ? this.downloadedResources.concat(items) : items;\n        }\n\n        this.downloadedResources.serverCount = items.serverCount || this.downloadedResources.serverCount;\n      } else {\n        this.downloadedResources = items || [];\n        this.selectOptions = [];\n      } // Add the value options.\n\n\n      if (!fromSearch) {\n        this.addValueOptions(items);\n      }\n\n      if (this.component.widget === 'html5' && !this.component.placeholder) {\n        this.addOption(null, '');\n      } // Iterate through each of the items.\n\n\n      _lodash.default.each(items, function (item) {\n        _this3.addOption(_this3.itemValue(item), _this3.itemTemplate(item));\n      });\n\n      if (this.choices) {\n        this.choices.setChoices(this.selectOptions, 'value', 'label', true);\n      } // We are no longer loading.\n\n\n      this.isScrollLoading = false;\n      this.loading = false; // If a value is provided, then select it.\n\n      if (this.dataValue) {\n        this.setValue(this.dataValue, true);\n      } else {\n        // If a default value is provided then select it.\n        var defaultValue = this.defaultValue;\n\n        if (defaultValue) {\n          this.setValue(defaultValue);\n        }\n      } // Say we are done loading the items.\n\n\n      this.itemsLoadedResolve();\n    }\n    /* eslint-enable max-statements */\n\n  }, {\n    key: \"loadItems\",\n    value: function loadItems(url, search, headers, options, method, body) {\n      var _this4 = this;\n\n      options = options || {}; // See if they have not met the minimum search requirements.\n\n      var minSearch = parseInt(this.component.minSearch, 10);\n\n      if (this.component.searchField && minSearch > 0 && (!search || search.length < minSearch)) {\n        // Set empty items.\n        return this.setItems([]);\n      } // Ensure we have a method and remove any body if method is get\n\n\n      method = method || 'GET';\n\n      if (method.toUpperCase() === 'GET') {\n        body = null;\n      }\n\n      var limit = this.component.limit || 100;\n      var skip = this.isScrollLoading ? this.selectOptions.length : 0;\n      var query = this.component.dataSrc === 'url' ? {} : {\n        limit: limit,\n        skip: skip\n      }; // Allow for url interpolation.\n\n      url = this.interpolate(url, {\n        formioBase: _Formio.default.getBaseUrl(),\n        search: search,\n        limit: limit,\n        skip: skip,\n        page: Math.abs(Math.floor(skip / limit))\n      }); // Add search capability.\n\n      if (this.component.searchField && search) {\n        if (Array.isArray(search)) {\n          query[\"\".concat(this.component.searchField, \"__in\")] = search.join(',');\n        } else {\n          query[\"\".concat(this.component.searchField, \"__regex\")] = search;\n        }\n      } // If they wish to return only some fields.\n\n\n      if (this.component.selectFields) {\n        query.select = this.component.selectFields;\n      } // Add sort capability\n\n\n      if (this.component.sort) {\n        query.sort = this.component.sort;\n      }\n\n      if (!_lodash.default.isEmpty(query)) {\n        // Add the query string.\n        url += (!url.includes('?') ? '?' : '&') + _Formio.default.serialize(query, function (item) {\n          return _this4.interpolate(item);\n        });\n      } // Add filter capability\n\n\n      if (this.component.filter) {\n        url += (!url.includes('?') ? '?' : '&') + this.interpolate(this.component.filter);\n      } // Make the request.\n\n\n      options.header = headers;\n      this.loading = true;\n\n      _Formio.default.makeRequest(this.options.formio, 'select', url, method, body, options).then(function (response) {\n        _this4.loading = false;\n\n        _this4.setItems(response, !!search);\n      }).catch(function (err) {\n        if (_this4.isInfiniteScrollProvided) {\n          _this4.setItems([]);\n\n          _this4.disableInfiniteScroll();\n        }\n\n        _this4.isScrollLoading = false;\n        _this4.loading = false;\n\n        _this4.itemsLoadedResolve();\n\n        _this4.emit('componentError', {\n          component: _this4.component,\n          message: err.toString()\n        });\n\n        console.warn(\"Unable to load resources for \".concat(_this4.key));\n      });\n    }\n    /**\n     * Get the request headers for this select dropdown.\n     */\n\n  }, {\n    key: \"getCustomItems\",\n    value: function getCustomItems() {\n      return this.evaluate(this.component.data.custom, {\n        values: []\n      }, 'values');\n    }\n  }, {\n    key: \"updateCustomItems\",\n    value: function updateCustomItems() {\n      this.setItems(this.getCustomItems() || []);\n    }\n  }, {\n    key: \"updateItems\",\n\n    /* eslint-disable max-statements */\n    value: function updateItems(searchInput, forceUpdate) {\n      if (!this.component.data) {\n        console.warn(\"Select component \".concat(this.key, \" does not have data configuration.\"));\n        this.itemsLoadedResolve();\n        return;\n      } // Only load the data if it is visible.\n\n\n      if (!this.checkConditions()) {\n        this.itemsLoadedResolve();\n        return;\n      }\n\n      switch (this.component.dataSrc) {\n        case 'values':\n          this.component.valueProperty = this.originalComponent.valueProperty = 'value';\n          this.setItems(this.component.data.values);\n          break;\n\n        case 'json':\n          this.setItems(this.component.data.json);\n          break;\n\n        case 'custom':\n          this.updateCustomItems();\n          break;\n\n        case 'resource':\n          {\n            // If there is no resource, or we are lazyLoading, wait until active.\n            if (!this.component.data.resource || !forceUpdate && !this.active) {\n              return;\n            }\n\n            var resourceUrl = this.options.formio ? this.options.formio.formsUrl : \"\".concat(_Formio.default.getProjectUrl(), \"/form\");\n            resourceUrl += \"/\".concat(this.component.data.resource, \"/submission\");\n\n            if (this.additionalResourcesAvailable) {\n              try {\n                this.loadItems(resourceUrl, searchInput, this.requestHeaders);\n              } catch (err) {\n                console.warn(\"Unable to load resources for \".concat(this.key));\n              }\n            } else {\n              this.setItems(this.downloadedResources);\n            }\n\n            break;\n          }\n\n        case 'url':\n          {\n            if (!forceUpdate && !this.active) {\n              // If we are lazyLoading, wait until activated.\n              return;\n            }\n\n            var url = this.component.data.url;\n            var method;\n            var body;\n\n            if (url.substr(0, 1) === '/') {\n              var baseUrl = _Formio.default.getProjectUrl();\n\n              if (!baseUrl) {\n                baseUrl = _Formio.default.getBaseUrl();\n              }\n\n              url = baseUrl + this.component.data.url;\n            }\n\n            if (!this.component.data.method) {\n              method = 'GET';\n            } else {\n              method = this.component.data.method;\n\n              if (method.toUpperCase() === 'POST') {\n                body = this.component.data.body;\n              } else {\n                body = null;\n              }\n            }\n\n            var options = this.component.authenticate ? {} : {\n              noToken: true\n            };\n            this.loadItems(url, searchInput, this.requestHeaders, options, method, body);\n            break;\n          }\n      }\n    }\n    /* eslint-enable max-statements */\n\n  }, {\n    key: \"addPlaceholder\",\n    value: function addPlaceholder(input) {\n      if (!this.component.placeholder || !input) {\n        return;\n      }\n\n      var placeholder = document.createElement('option');\n      placeholder.setAttribute('placeholder', true);\n      placeholder.appendChild(this.text(this.component.placeholder));\n      input.appendChild(placeholder);\n    }\n    /**\n     * Activate this select control.\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      if (this.active) {\n        return;\n      }\n\n      this.activated = true;\n\n      if (this.choices) {\n        this.choices.setChoices([{\n          value: '',\n          label: \"<i class=\\\"\".concat(this.iconClass('refresh'), \"\\\" style=\\\"font-size:1.3em;\\\"></i>\"),\n          disabled: true\n        }], 'value', 'label', true);\n      } else {\n        this.addOption('', this.t('loading...'));\n      }\n\n      this.triggerUpdate();\n    }\n  }, {\n    key: \"addInput\",\n\n    /* eslint-disable max-statements */\n    value: function addInput(input, container) {\n      var _this5 = this;\n\n      _get(_getPrototypeOf(SelectComponent.prototype), \"addInput\", this).call(this, input, container);\n\n      if (this.component.multiple) {\n        input.setAttribute('multiple', true);\n      }\n\n      if (this.component.widget === 'html5') {\n        this.triggerUpdate();\n        this.focusableElement = input;\n        this.addEventListener(input, 'focus', function () {\n          return _this5.update();\n        });\n        this.addEventListener(input, 'keydown', function (event) {\n          var keyCode = event.keyCode;\n\n          if ([8, 46].includes(keyCode)) {\n            _this5.setValue(null);\n          }\n        });\n        return;\n      }\n\n      var useSearch = this.component.hasOwnProperty('searchEnabled') ? this.component.searchEnabled : true;\n      var placeholderValue = this.t(this.component.placeholder);\n      var customOptions = this.component.customOptions || {};\n\n      if (typeof customOptions == 'string') {\n        try {\n          customOptions = JSON.parse(customOptions);\n        } catch (err) {\n          console.warn(err.message);\n          customOptions = {};\n        }\n      }\n\n      var searchField = this.component.searchField;\n\n      var choicesOptions = _objectSpread({\n        removeItemButton: this.component.disabled ? false : _lodash.default.get(this.component, 'removeItemButton', true),\n        itemSelectText: '',\n        classNames: {\n          containerOuter: 'choices form-group formio-choices',\n          containerInner: 'form-control'\n        },\n        addItemText: false,\n        placeholder: !!this.component.placeholder,\n        placeholderValue: placeholderValue,\n        noResultsText: this.t('No results found'),\n        noChoicesText: this.t('No choices to choose from'),\n        searchPlaceholderValue: this.t('Type to search'),\n        shouldSort: false,\n        position: this.component.dropdown || 'auto',\n        searchEnabled: useSearch,\n        searchChoices: !searchField,\n        searchFields: this.component.searchFields || (searchField ? [\"value.\".concat(searchField)] : ['label']),\n        fuseOptions: Object.assign({\n          include: 'score',\n          threshold: _lodash.default.get(this, 'component.searchThreshold', 0.3)\n        }, _lodash.default.get(this, 'component.fuseOptions', {})),\n        itemComparer: _lodash.default.isEqual,\n        resetScrollPosition: false\n      }, customOptions);\n\n      var tabIndex = input.tabIndex;\n      this.addPlaceholder(input);\n      input.setAttribute('dir', this.i18next.dir());\n      this.choices = new _choices.default(input, choicesOptions);\n\n      if (this.component.multiple) {\n        this.focusableElement = this.choices.input.element;\n      } else {\n        this.focusableElement = this.choices.containerInner.element;\n        this.choices.containerOuter.element.setAttribute('tabIndex', '-1');\n\n        if (useSearch) {\n          this.addEventListener(this.choices.containerOuter.element, 'focus', function () {\n            return _this5.focusableElement.focus();\n          });\n        }\n      }\n\n      if (this.isInfiniteScrollProvided) {\n        this.scrollList = this.choices.choiceList.element;\n\n        this.onScroll = function () {\n          var isLoadingAvailable = !_this5.isScrollLoading && _this5.additionalResourcesAvailable && _this5.scrollList.scrollTop + _this5.scrollList.clientHeight >= _this5.scrollList.scrollHeight;\n\n          if (isLoadingAvailable) {\n            _this5.isScrollLoading = true;\n\n            _this5.choices.setChoices([{\n              value: \"\".concat(_this5.id, \"-loading\"),\n              label: 'Loading...',\n              disabled: true\n            }], 'value', 'label');\n\n            _this5.triggerUpdate(_this5.choices.input.element.value);\n          }\n        };\n\n        this.scrollList.addEventListener('scroll', this.onScroll);\n      }\n\n      this.addFocusBlurEvents(this.focusableElement);\n      this.focusableElement.setAttribute('tabIndex', tabIndex);\n      this.setInputStyles(this.choices.containerOuter.element); // If a search field is provided, then add an event listener to update items on search.\n\n      if (this.component.searchField) {\n        // Make sure to clear the search when no value is provided.\n        if (this.choices && this.choices.input && this.choices.input.element) {\n          this.addEventListener(this.choices.input.element, 'input', function (event) {\n            _this5.isFromSearch = !!event.target.value;\n\n            if (!event.target.value) {\n              _this5.triggerUpdate();\n            } else {\n              _this5.serverCount = null;\n              _this5.downloadedResources = [];\n            }\n          });\n        }\n\n        this.addEventListener(input, 'search', function (event) {\n          return _this5.triggerUpdate(event.detail.value);\n        });\n        this.addEventListener(input, 'stopSearch', function () {\n          return _this5.triggerUpdate();\n        });\n      }\n\n      this.addEventListener(input, 'showDropdown', function () {\n        if (_this5.dataValue) {\n          _this5.triggerUpdate();\n        }\n\n        _this5.update();\n      });\n\n      if (placeholderValue && this.choices._isSelectOneElement) {\n        this.addEventListener(input, 'removeItem', function () {\n          var items = _this5.choices._store.activeItems;\n\n          if (!items.length) {\n            _this5.choices._addItem({\n              value: placeholderValue,\n              label: placeholderValue,\n              choiceId: 0,\n              groupId: -1,\n              customProperties: null,\n              placeholder: true,\n              keyCode: null\n            });\n          }\n        });\n      } // Add value options.\n\n\n      if (this.addValueOptions()) {\n        this.restoreValue();\n      } // Force the disabled state with getters and setters.\n\n\n      this.disabled = this.disabled;\n      this.triggerUpdate();\n    }\n  }, {\n    key: \"restoreValue\",\n    value: function restoreValue() {\n      _get(_getPrototypeOf(SelectComponent.prototype), \"restoreValue\", this).call(this);\n\n      if (this.choices) {\n        this.choices.setChoiceByValue(this.dataValue);\n      }\n    }\n    /* eslint-enable max-statements */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.component.dataSrc === 'custom') {\n        this.updateCustomItems();\n      } // Activate the control.\n\n\n      this.activate();\n    }\n  }, {\n    key: \"show\",\n    value: function show(_show) {\n      // If we go from hidden to visible, trigger a refresh.\n      var triggerUpdate = _show && this._visible !== _show;\n      _show = _get(_getPrototypeOf(SelectComponent.prototype), \"show\", this).call(this, _show);\n\n      if (triggerUpdate) {\n        this.triggerUpdate();\n      }\n\n      return _show;\n    }\n    /**\n     * @param {*} value\n     * @param {Array} items\n     */\n\n  }, {\n    key: \"addCurrentChoices\",\n    value: function addCurrentChoices(values, items, keyValue) {\n      var _this6 = this;\n\n      if (!values) {\n        return false;\n      }\n\n      var notFoundValuesToAdd = [];\n      var added = values.reduce(function (defaultAdded, value) {\n        if (!value) {\n          return defaultAdded;\n        }\n\n        var found = false; // Make sure that `items` and `this.selectOptions` points\n        // to the same reference. Because `this.selectOptions` is\n        // internal property and all items are populated by\n        // `this.addOption` method, we assume that items has\n        // 'label' and 'value' properties. This assumption allows\n        // us to read correct value from the item.\n\n        var isSelectOptions = items === _this6.selectOptions;\n\n        if (items && items.length) {\n          _lodash.default.each(items, function (choice) {\n            if (choice._id && value._id && choice._id === value._id) {\n              found = true;\n              return false;\n            }\n\n            var itemValue = keyValue ? choice.value : _this6.itemValue(choice, isSelectOptions);\n            found |= _lodash.default.isEqual(itemValue, value);\n            return found ? false : true;\n          });\n        } // Add the default option if no item is found.\n\n\n        if (!found) {\n          notFoundValuesToAdd.push({\n            value: _this6.itemValue(value),\n            label: _this6.itemTemplate(value)\n          });\n          return true;\n        }\n\n        return found || defaultAdded;\n      }, false);\n\n      if (notFoundValuesToAdd.length) {\n        if (this.choices) {\n          this.choices.setChoices(notFoundValuesToAdd, 'value', 'label');\n        } else {\n          notFoundValuesToAdd.map(function (notFoundValue) {\n            _this6.addOption(notFoundValue.value, notFoundValue.label);\n          });\n        }\n      }\n\n      return added;\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(data) {\n      return this.component.multiple && Array.isArray(data) ? data.map(this.asString.bind(this)).join(', ') : this.asString(data);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (this.viewOnly || this.loading || !this.selectOptions.length) {\n        return this.dataValue;\n      }\n\n      var value = '';\n\n      if (this.choices) {\n        value = this.choices.getValue(true); // Make sure we don't get the placeholder\n\n        if (!this.component.multiple && this.component.placeholder && value === this.t(this.component.placeholder)) {\n          value = this.emptyValue;\n        }\n      } else {\n        var values = [];\n\n        _lodash.default.each(this.selectOptions, function (selectOption) {\n          if (selectOption.element && selectOption.element.selected) {\n            values.push(selectOption.value);\n          }\n        });\n\n        value = this.component.multiple ? values : values.shift();\n      } // Choices will return undefined if nothing is selected. We really want '' to be empty.\n\n\n      if (value === undefined || value === null) {\n        value = this.emptyValue;\n      }\n\n      return value;\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      _get(_getPrototypeOf(SelectComponent.prototype), \"redraw\", this).call(this);\n\n      this.triggerUpdate();\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, flags) {\n      flags = this.getFlags.apply(this, arguments);\n      var previousValue = this.dataValue;\n\n      if (this.component.multiple && !Array.isArray(value)) {\n        value = value ? [value] : [];\n      }\n\n      var hasPreviousValue = Array.isArray(previousValue) ? previousValue.length : previousValue;\n      var hasValue = Array.isArray(value) ? value.length : value;\n      var changed = this.hasChanged(value, previousValue);\n      this.dataValue = value; // Do not set the value if we are loading... that will happen after it is done.\n\n      if (this.loading) {\n        return changed;\n      } // Determine if we need to perform an initial lazyLoad api call if searchField is provided.\n\n\n      if (this.component.searchField && this.component.lazyLoad && !this.lazyLoadInit && !this.active && !this.selectOptions.length && hasValue) {\n        this.loading = true;\n        this.lazyLoadInit = true;\n        this.triggerUpdate(this.dataValue, true);\n        return changed;\n      } // Add the value options.\n\n\n      this.addValueOptions();\n\n      if (this.choices) {\n        // Now set the value.\n        if (hasValue) {\n          this.choices.removeActiveItems(); // Add the currently selected choices if they don't already exist.\n\n          var currentChoices = Array.isArray(this.dataValue) ? this.dataValue : [this.dataValue];\n\n          if (!this.addCurrentChoices(currentChoices, this.selectOptions, true)) {\n            this.choices.setChoices(this.selectOptions, 'value', 'label', true);\n          }\n\n          this.choices.setChoiceByValue(value);\n        } else if (hasPreviousValue) {\n          this.choices.removeActiveItems();\n        }\n      } else {\n        if (hasValue) {\n          var values = Array.isArray(value) ? value : [value];\n\n          _lodash.default.each(this.selectOptions, function (selectOption) {\n            _lodash.default.each(values, function (val) {\n              if (_lodash.default.isEqual(val, selectOption.value)) {\n                selectOption.element.selected = true;\n                selectOption.element.setAttribute('selected', 'selected');\n                return false;\n              }\n            });\n          });\n        } else {\n          _lodash.default.each(this.selectOptions, function (selectOption) {\n            selectOption.element.selected = false;\n            selectOption.element.removeAttribute('selected');\n          });\n        }\n      }\n\n      this.updateOnChange(flags, changed);\n      return changed;\n    }\n    /**\n     * Deletes the value of the component.\n     */\n\n  }, {\n    key: \"deleteValue\",\n    value: function deleteValue() {\n      this.setValue('', {\n        noUpdateEvent: true\n      });\n\n      _lodash.default.unset(this.data, this.key);\n    }\n    /**\n     * Check if a component is eligible for multiple validation\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"validateMultiple\",\n    value: function validateMultiple() {\n      // Select component will contain one input when flagged as multiple.\n      return false;\n    }\n    /**\n     * Output this select dropdown as a string value.\n     * @return {*}\n     */\n\n  }, {\n    key: \"asString\",\n    value: function asString(value) {\n      var _this7 = this;\n\n      value = value || this.getValue();\n\n      if (['values', 'custom'].includes(this.component.dataSrc)) {\n        var _ref = this.component.dataSrc === 'values' ? {\n          items: this.component.data.values,\n          valueProperty: 'value'\n        } : {\n          items: this.getCustomItems(),\n          valueProperty: this.component.valueProperty\n        },\n            items = _ref.items,\n            valueProperty = _ref.valueProperty;\n\n        value = this.component.multiple && Array.isArray(value) ? _lodash.default.filter(items, function (item) {\n          return value.includes(item.value);\n        }) : valueProperty ? _lodash.default.find(items, [valueProperty, value]) : value;\n      }\n\n      if (_lodash.default.isString(value)) {\n        return value;\n      }\n\n      if (Array.isArray(value)) {\n        var _items = [];\n        value.forEach(function (item) {\n          return _items.push(_this7.itemTemplate(item));\n        });\n        return _items.length > 0 ? _items.join('<br />') : '-';\n      }\n\n      return !_lodash.default.isNil(value) ? this.itemTemplate(value) : '-';\n    }\n  }, {\n    key: \"setupValueElement\",\n    value: function setupValueElement(element) {\n      element.innerHTML = this.asString();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(SelectComponent.prototype), \"destroy\", this).call(this);\n\n      if (this.choices) {\n        this.choices.destroyed = true;\n        this.choices.destroy();\n        this.choices = null;\n      }\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.focusableElement.focus();\n    }\n  }, {\n    key: \"dataReady\",\n    get: function get() {\n      return this.itemsLoaded;\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return SelectComponent.schema();\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"isSelectResource\",\n    get: function get() {\n      return this.component.dataSrc === 'resource';\n    }\n  }, {\n    key: \"isSelectURL\",\n    get: function get() {\n      return this.component.dataSrc === 'url';\n    }\n  }, {\n    key: \"isInfiniteScrollProvided\",\n    get: function get() {\n      return this.isSelectResource || this.isSelectURL;\n    }\n  }, {\n    key: \"requestHeaders\",\n    get: function get() {\n      var _this8 = this;\n\n      // Create the headers object.\n      var headers = new _Formio.default.Headers(); // Add custom headers to the url.\n\n      if (this.component.data && this.component.data.headers) {\n        try {\n          _lodash.default.each(this.component.data.headers, function (header) {\n            if (header.key) {\n              headers.set(header.key, _this8.interpolate(header.value));\n            }\n          });\n        } catch (err) {\n          console.warn(err.message);\n        }\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"additionalResourcesAvailable\",\n    get: function get() {\n      return _lodash.default.isNil(this.serverCount) || this.serverCount > this.downloadedResources.length;\n    }\n  }, {\n    key: \"serverCount\",\n    get: function get() {\n      if (this.isFromSearch) {\n        return this.searchServerCount;\n      }\n\n      return this.defaultServerCount;\n    },\n    set: function set(value) {\n      if (this.isFromSearch) {\n        this.searchServerCount = value;\n      } else {\n        this.defaultServerCount = value;\n      }\n    }\n  }, {\n    key: \"downloadedResources\",\n    get: function get() {\n      if (this.isFromSearch) {\n        return this.searchDownloadedResources;\n      }\n\n      return this.defaultDownloadedResources;\n    },\n    set: function set(value) {\n      if (this.isFromSearch) {\n        this.searchDownloadedResources = value;\n      } else {\n        this.defaultDownloadedResources = value;\n      }\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !this.component.lazyLoad || this.activated;\n    }\n  }, {\n    key: \"disabled\",\n    set: function set(disabled) {\n      _set(_getPrototypeOf(SelectComponent.prototype), \"disabled\", disabled, this, true);\n\n      if (!this.choices) {\n        return;\n      }\n\n      if (disabled) {\n        this.setDisabled(this.choices.containerInner.element, true);\n        this.focusableElement.removeAttribute('tabIndex');\n        this.choices.disable();\n      } else {\n        this.setDisabled(this.choices.containerInner.element, false);\n        this.focusableElement.setAttribute('tabIndex', this.component.tabindex || 0);\n        this.choices.enable();\n      }\n    }\n  }]);\n\n  return SelectComponent;\n}(_Base.default);\n\nexports.default = SelectComponent;",null]}