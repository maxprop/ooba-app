{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.js","mtime":1581861144623},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_escape_highlight,_.._lib_utils PURE_IMPORTS_END */\nimport escapeHits, { tagConfig } from '../../lib/escape-highlight';\nimport { checkRendering } from '../../lib/utils';\nvar usage = 'Usage:\\nvar customAutcomplete = connectAutocomplete(function render(params, isFirstRendering) {\\n  // params = {\\n  //   indices,\\n  //   refine,\\n  //   currentRefinement\\n  // }\\n});\\nsearch.addWiget(customAutcomplete({\\n  [ indices ],\\n  [ escapeHits = false ]\\n}));\\nFull documentation available at https://community.algolia.com/instantsearch.js/connectors/connectAutocomplete.html\\n';\n/**\n * @typedef {Object} Index\n * @property {string} index Name of the index.\n * @property {string} label Label of the index (for display purpose).\n * @property {Object[]} hits The hits resolved from the index matching the query.\n * @property {Object} results The full results object from Algolia API.\n */\n/**\n * @typedef {Object} AutocompleteRenderingOptions\n * @property {Index[]} indices The indices you provided with their hits and results and the main index as first position.\n * @property {function(string)} refine Search into the indices with the query provided.\n * @property {string} currentRefinement The actual value of the query.\n * @property {Object} widgetParams All original widget options forwarded to the `renderFn`.\n */\n/**\n * @typedef {Object} CustomAutocompleteWidgetOptions\n * @property {{value: string, label: string}[]} [indices = []] Name of the others indices to search into.\n * @property {boolean} [escapeHits = false] If true, escape HTML tags from `hits[i]._highlightResult`.\n */\n/**\n * **Autocomplete** connector provides the logic to build a widget that will give the user the ability to search into multiple indices.\n *\n * This connector provides a `refine()` function to search for a query and a `currentRefinement` as the current query used to search.\n *\n * THere's a complete example available on how to write a custom **Autocomplete** widget:\n * [autocomplete.js](https://github.com/algolia/instantsearch.js/blob/develop/dev/app/custom-widgets/jquery/autocomplete.js)\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/autocomplete/js/\n * @param {function(AutocompleteRenderingOptions, boolean)} renderFn Rendering function for the custom **Autocomplete** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomAutocompleteWidgetOptions)} Re-usable widget factory for a custom **Autocomplete** widget.\n */\nexport default function connectAutocomplete(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _widgetParams$indices = widgetParams.indices, indices = _widgetParams$indices === undefined ? [] : _widgetParams$indices;\n        // user passed a wrong `indices` option type\n        if (!Array.isArray(indices)) {\n            throw new Error(usage);\n        }\n        return {\n            getConfiguration: function getConfiguration() {\n                return widgetParams.escapeHits ? tagConfig : undefined;\n            },\n            init: function init(_ref) {\n                var _this = this;\n                var instantSearchInstance = _ref.instantSearchInstance, helper = _ref.helper;\n                this._refine = this.refine(helper);\n                this.indices = [{\n                        helper: helper,\n                        label: 'primary',\n                        index: helper.getIndex(),\n                        results: undefined,\n                        hits: []\n                    }];\n                // add additionnal indices into `this.indices`\n                indices.forEach(function (_ref2) {\n                    var label = _ref2.label, value = _ref2.value;\n                    var derivedHelper = helper.derive(function (searchParameters) {\n                        return searchParameters.setIndex(value);\n                    });\n                    _this.indices.push({\n                        label: label,\n                        index: value,\n                        helper: derivedHelper,\n                        results: undefined,\n                        hits: []\n                    });\n                    // update results then trigger render after a search from any helper\n                    derivedHelper.on('result', function (results) {\n                        return _this.saveResults({ results: results, label: label });\n                    });\n                });\n                this.instantSearchInstance = instantSearchInstance;\n                this.renderWithAllIndices({ isFirstRendering: true });\n            },\n            saveResults: function saveResults(_ref3) {\n                var results = _ref3.results, label = _ref3.label;\n                var derivedIndex = this.indices.find(function (i) {\n                    return i.label === label;\n                });\n                if (widgetParams.escapeHits && results.hits && results.hits.length > 0) {\n                    results.hits = escapeHits(results.hits);\n                }\n                derivedIndex.results = results;\n                derivedIndex.hits = results && results.hits && Array.isArray(results.hits) ? results.hits : [];\n                this.renderWithAllIndices();\n            },\n            refine: function refine(helper) {\n                return function (query) {\n                    return helper.setQuery(query).search();\n                };\n            },\n            render: function render(_ref4) {\n                var results = _ref4.results;\n                this.saveResults({ results: results, label: this.indices[0].label });\n            },\n            renderWithAllIndices: function renderWithAllIndices() {\n                var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref5$isFirstRenderin = _ref5.isFirstRendering, isFirstRendering = _ref5$isFirstRenderin === undefined ? false : _ref5$isFirstRenderin;\n                var currentRefinement = this.indices[0].helper.state.query;\n                renderFn({\n                    widgetParams: widgetParams,\n                    currentRefinement: currentRefinement,\n                    // we do not want to provide the `helper` to the end-user\n                    indices: this.indices.map(function (_ref6) {\n                        var index = _ref6.index, label = _ref6.label, hits = _ref6.hits, results = _ref6.results;\n                        return {\n                            index: index,\n                            label: label,\n                            hits: hits,\n                            results: results\n                        };\n                    }),\n                    instantSearchInstance: this.instantSearchInstance,\n                    refine: this._refine\n                }, isFirstRendering);\n            },\n            dispose: function dispose() {\n                // detach every derived indices from the main helper instance\n                this.indices.slice(1).forEach(function (_ref7) {\n                    var helper = _ref7.helper;\n                    return helper.detach();\n                });\n                unmountFn();\n            }\n        };\n    };\n}\n",null]}