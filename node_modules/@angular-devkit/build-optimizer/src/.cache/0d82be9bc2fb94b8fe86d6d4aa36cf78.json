{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/providers/storage/url.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/providers/storage/url.js","mtime":1581861143599},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.function.name\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar url = function url(formio) {\n  var xhrRequest = function xhrRequest(url, name, query, data, options, onprogress) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      var json = typeof data === 'string';\n      var fd = new FormData();\n\n      if (typeof onprogress === 'function') {\n        xhr.upload.onprogress = onprogress;\n      }\n\n      if (!json) {\n        for (var key in data) {\n          fd.append(key, data[key]);\n        }\n      }\n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          // Need to test if xhr.response is decoded or not.\n          var respData = {};\n\n          try {\n            respData = typeof xhr.response === 'string' ? JSON.parse(xhr.response) : {};\n            respData = respData && respData.data ? respData.data : respData;\n          } catch (err) {\n            respData = {};\n          } // Get the url of the file.\n\n\n          var respUrl = respData.hasOwnProperty('url') ? respData.url : \"\".concat(xhr.responseURL, \"/\").concat(name); // If they provide relative url, then prepend the url.\n\n          if (respUrl && respUrl[0] === '/') {\n            respUrl = \"\".concat(url).concat(respUrl);\n          }\n\n          resolve({\n            url: respUrl,\n            data: respData\n          });\n        } else {\n          reject(xhr.response || 'Unable to upload file');\n        }\n      };\n\n      xhr.onerror = function () {\n        return reject(xhr);\n      };\n\n      xhr.onabort = function () {\n        return reject(xhr);\n      };\n\n      var requestUrl = url + (url.indexOf('?') > -1 ? '&' : '?');\n\n      for (var _key in query) {\n        requestUrl += \"\".concat(_key, \"=\").concat(query[_key], \"&\");\n      }\n\n      if (requestUrl[requestUrl.length - 1] === '&') {\n        requestUrl = requestUrl.substr(0, requestUrl.length - 1);\n      }\n\n      xhr.open('POST', requestUrl);\n\n      if (json) {\n        xhr.setRequestHeader('Content-Type', 'application/json');\n      }\n\n      var token = formio.getToken();\n\n      if (token) {\n        xhr.setRequestHeader('x-jwt-token', token);\n      } //Overrides previous request props\n\n\n      if (options) {\n        var parsedOptions = JSON.parse(options);\n\n        for (var prop in parsedOptions) {\n          xhr[prop] = parsedOptions[prop];\n        }\n      }\n\n      xhr.send(json ? data : fd);\n    });\n  };\n\n  return {\n    title: 'Url',\n    name: 'url',\n    uploadFile: function uploadFile(file, name, dir, progressCallback, url, options) {\n      var uploadRequest = function uploadRequest(form) {\n        return xhrRequest(url, name, {\n          baseUrl: encodeURIComponent(formio.projectUrl),\n          project: form ? form.project : '',\n          form: form ? form._id : ''\n        }, {\n          file: file,\n          name: name,\n          dir: dir\n        }, options, progressCallback).then(function (response) {\n          // Store the project and form url along with the metadata.\n          response.data = response.data || {};\n          response.data.baseUrl = formio.projectUrl;\n          response.data.project = form ? form.project : '';\n          response.data.form = form ? form._id : '';\n          return {\n            storage: 'url',\n            name: name,\n            url: response.url,\n            size: file.size,\n            type: file.type,\n            data: response.data\n          };\n        });\n      };\n\n      if (file.private && formio.formId) {\n        return formio.loadForm().then(function (form) {\n          return uploadRequest(form);\n        });\n      } else {\n        return uploadRequest();\n      }\n    },\n    downloadFile: function downloadFile(file) {\n      if (file.private) {\n        if (formio.submissionId && file.data) {\n          file.data.submission = formio.submissionId;\n        }\n\n        return xhrRequest(file.url, file.name, {}, JSON.stringify(file)).then(function (response) {\n          return response.data;\n        });\n      } // Return the original as there is nothing to do.\n\n\n      return _nativePromiseOnly.default.resolve(file);\n    }\n  };\n};\n\nurl.title = 'Url';\nvar _default = url;\nexports.default = _default;",null]}