{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/manager/form-manager.service.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/manager/form-manager.service.js","mtime":499162500000},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { Injectable } from '@angular/core';\nimport { FormioAppConfig } from '../formio.config';\nimport { FormManagerConfig } from './form-manager.config';\nimport { Formio } from 'formiojs';\nimport { FormioAuthService } from '../auth/auth.service';\nimport _each from 'lodash/each';\nimport _intersection from 'lodash/intersection';\nvar FormManagerService = /*@__PURE__*/ (function () {\n    function FormManagerService(appConfig, config, auth) {\n        var _this = this;\n        this.appConfig = appConfig;\n        this.config = config;\n        this.auth = auth;\n        this.form = null;\n        this.perms = { delete: false, edit: false };\n        if (this.appConfig && this.appConfig.appUrl) {\n            Formio.setBaseUrl(this.appConfig.apiUrl);\n            Formio.setProjectUrl(this.appConfig.appUrl);\n        }\n        else {\n            console.error('You must provide an AppConfig within your application!');\n        }\n        this.allAccessMap = {\n            'update_all': 'formEdit',\n            'delete_all': 'formDelete'\n        };\n        this.ownAccessMap = {\n            'update_own': 'formEdit',\n            'delete_own': 'formDelete'\n        };\n        this.actionAllowed = (function (action) { return _this.isActionAllowed(action); });\n        this.reset();\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    FormManagerService.prototype.isActionAllowed = /**\n     * @param {?} action\n     * @return {?}\n     */\n        function (action) {\n            return this.access[action];\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerService.prototype.setAccess = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.access = {\n                formCreate: true,\n                formView: true,\n                formEdit: true,\n                formDelete: true,\n                submissionIndex: true\n            };\n            if (this.auth) {\n                this.access = {\n                    formCreate: false,\n                    formView: false,\n                    formEdit: false,\n                    formDelete: false,\n                    submissionIndex: false\n                };\n                this.ready = this.auth.ready.then((function () {\n                    /** @type {?} */\n                    var adminRoles = [];\n                    _each(_this.auth.roles, (function (role, name) {\n                        if (role.admin) {\n                            adminRoles.push(role._id);\n                        }\n                    }));\n                    if (_this.auth.user && _this.auth.user.roles) {\n                        _this.auth.user.roles.forEach((function (roleId) {\n                            if (adminRoles.indexOf(roleId) !== -1) {\n                                _this.access.formCreate = true;\n                                _this.access.formView = true;\n                                _this.access.formEdit = true;\n                                _this.access.formDelete = true;\n                                _this.access.submissionIndex = true;\n                            }\n                            if (!_this.access.formCreate) {\n                                _this.access.formCreate = (_this.auth.formAccess.create_all.indexOf(roleId) !== -1);\n                            }\n                            if (!_this.access.formView) {\n                                _this.access.formView = (_this.auth.formAccess.read_all.indexOf(roleId) !== -1);\n                            }\n                            if (!_this.access.formEdit) {\n                                _this.access.formEdit = (_this.auth.formAccess.update_all.indexOf(roleId) !== -1);\n                            }\n                            if (!_this.access.formDelete) {\n                                _this.access.formDelete = (_this.auth.formAccess.delete_all.indexOf(roleId) !== -1);\n                            }\n                            if (!_this.access.submissionIndex) {\n                                _this.access.submissionIndex = (_this.auth.formAccess.read_all.indexOf(roleId) !== -1);\n                            }\n                        }));\n                    }\n                }));\n            }\n            else {\n                this.ready = Promise.resolve(false);\n            }\n        };\n    /**\n     * @param {?=} route\n     * @return {?}\n     */\n    FormManagerService.prototype.reset = /**\n     * @param {?=} route\n     * @return {?}\n     */\n        function (route) {\n            var _this = this;\n            if (route) {\n                route.params.subscribe((function (params) {\n                    if (params.id) {\n                        _this.formio = new Formio(_this.formio.formsUrl + \"/\" + params.id);\n                    }\n                    else {\n                        _this.reset();\n                    }\n                }));\n            }\n            else {\n                this.formio = new Formio(this.appConfig.appUrl);\n                this.setAccess();\n            }\n        };\n    /**\n     * @param {?} roles\n     * @return {?}\n     */\n    FormManagerService.prototype.hasAccess = /**\n     * @param {?} roles\n     * @return {?}\n     */\n        function (roles) {\n            if (!this.auth.user) {\n                return false;\n            }\n            return !!_intersection(roles, this.auth.user.roles).length;\n        };\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    FormManagerService.prototype.setForm = /**\n     * @param {?} form\n     * @return {?}\n     */\n        function (form) {\n            var _this = this;\n            this.form = form;\n            if (form.access) {\n                // Check if they have access here.\n                form.access.forEach((function (access) {\n                    // Check for all access.\n                    if (_this.allAccessMap[access.type] && !_this.access[_this.allAccessMap[access.type]]) {\n                        _this.access[_this.allAccessMap[access.type]] = _this.hasAccess(access.roles);\n                    }\n                    // Check for own access.\n                    if (_this.auth && _this.auth.user &&\n                        (form._id === _this.auth.user._id) &&\n                        _this.ownAccessMap[access.type] &&\n                        !_this.access[_this.ownAccessMap[access.type]]) {\n                        _this.access[_this.ownAccessMap[access.type]] = _this.hasAccess(access.roles);\n                    }\n                }));\n            }\n            return form;\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerService.prototype.loadForm = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return this.formio.loadForm().then((function (form) { return _this.setForm(form); }));\n        };\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    FormManagerService.prototype.setSubmission = /**\n     * @param {?} route\n     * @return {?}\n     */\n        function (route) {\n            var _this = this;\n            return new Promise((function (resolve) {\n                route.params.subscribe((function (params) {\n                    _this.formio = new Formio(_this.formio.submissionsUrl + \"/\" + params.id);\n                    resolve(_this.formio);\n                }));\n            }));\n        };\n    /**\n     * @param {?} submission\n     * @return {?}\n     */\n    FormManagerService.prototype.submissionLoaded = /**\n     * @param {?} submission\n     * @return {?}\n     */\n        function (submission) {\n            var _this = this;\n            this.auth.ready.then((function () {\n                _this.formio.userPermissions(_this.auth.user, _this.form, submission).then((function (perms) {\n                    _this.perms.delete = perms.delete;\n                    _this.perms.edit = perms.edit;\n                }));\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    FormManagerService.prototype.loadForms = /**\n     * @return {?}\n     */\n        function () {\n            return this.formio.loadForms({ params: {\n                    tags: this.config.tag\n                } });\n        };\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    FormManagerService.prototype.createForm = /**\n     * @param {?} form\n     * @return {?}\n     */\n        function (form) {\n            return this.formio.createform(form);\n        };\n    return FormManagerService;\n}());\nexport { FormManagerService };\nif (false) {\n    /** @type {?} */\n    FormManagerService.prototype.formio;\n    /** @type {?} */\n    FormManagerService.prototype.access;\n    /** @type {?} */\n    FormManagerService.prototype.allAccessMap;\n    /** @type {?} */\n    FormManagerService.prototype.ownAccessMap;\n    /** @type {?} */\n    FormManagerService.prototype.ready;\n    /** @type {?} */\n    FormManagerService.prototype.actionAllowed;\n    /** @type {?} */\n    FormManagerService.prototype.form;\n    /** @type {?} */\n    FormManagerService.prototype.perms;\n    /** @type {?} */\n    FormManagerService.prototype.appConfig;\n    /** @type {?} */\n    FormManagerService.prototype.config;\n    /** @type {?} */\n    FormManagerService.prototype.auth;\n}\n",null]}