{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/stats/connectStats.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/stats/connectStats.js","mtime":1581861144641},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_utils.js PURE_IMPORTS_END */\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customStats = connectStats(function render(params, isFirstRendering) {\\n  // params = {\\n  //   instantSearchInstance,\\n  //   hitsPerPage,\\n  //   nbHits,\\n  //   nbPages,\\n  //   page,\\n  //   processingTimeMS,\\n  //   query,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(customStats());\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectStats.html';\n/**\n * @typedef {Object} StatsRenderingOptions\n * @property {number} hitsPerPage The maximum number of hits per page returned by Algolia.\n * @property {number} nbHits The number of hits in the result set.\n * @property {number} nbPages The number of pages computed for the result set.\n * @property {number} page The current page.\n * @property {number} processingTimeMS The time taken to compute the results inside the Algolia engine.\n * @property {string} query The query used for the current search.\n * @property {object} widgetParams All original `CustomStatsWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * **Stats** connector provides the logic to build a custom widget that will displays\n * search statistics (hits number and processing time).\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/stats/js/\n * @param {function(StatsRenderingOptions, boolean)} renderFn Rendering function for the custom **Stats** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function} Re-usable widget factory for a custom **Stats** widget.\n * @example\n * // custom `renderFn` to render the custom Stats widget\n * function renderFn(StatsRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) return;\n *\n *   StatsRenderingOptions.widgetParams.containerNode\n *     .html(StatsRenderingOptions.nbHits + ' results found in ' + StatsRenderingOptions.processingTimeMS);\n * }\n *\n * // connect `renderFn` to Stats logic\n * var customStatsWidget = instantsearch.connectors.connectStats(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customStatsWidget({\n *     containerNode: $('#custom-stats-container'),\n *   })\n * );\n */\nexport default function connectStats(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n            init: function init(_ref) {\n                var helper = _ref.helper, instantSearchInstance = _ref.instantSearchInstance;\n                renderFn({\n                    instantSearchInstance: instantSearchInstance,\n                    hitsPerPage: helper.state.hitsPerPage,\n                    nbHits: 0,\n                    nbPages: 0,\n                    page: helper.state.page,\n                    processingTimeMS: -1,\n                    query: helper.state.query,\n                    widgetParams: widgetParams\n                }, true);\n            },\n            render: function render(_ref2) {\n                var results = _ref2.results, instantSearchInstance = _ref2.instantSearchInstance;\n                renderFn({\n                    instantSearchInstance: instantSearchInstance,\n                    hitsPerPage: results.hitsPerPage,\n                    nbHits: results.nbHits,\n                    nbPages: results.nbPages,\n                    page: results.page,\n                    processingTimeMS: results.processingTimeMS,\n                    query: results.query,\n                    widgetParams: widgetParams\n                }, false);\n            },\n            dispose: function dispose() {\n                unmountFn();\n            }\n        };\n    };\n}\n",null]}