{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/grid/grid.component.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/grid/grid.component.js","mtime":1581861141295},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { Component, Input, Output, EventEmitter, ViewChild, ViewContainerRef, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';\nimport { FormioLoader } from '../components/loader/formio.loader';\nimport { FormioAlerts } from '../components/alerts/formio.alerts';\nimport { each } from 'lodash';\nimport { Formio } from 'formiojs';\nimport FormComponents from './form/index';\nimport SubmissionComponents from './submission/index';\nvar FormioGridComponent = /*@__PURE__*/ (function () {\n    function FormioGridComponent(loader, alerts, resolver, ref) {\n        this.loader = loader;\n        this.alerts = alerts;\n        this.resolver = resolver;\n        this.ref = ref;\n        this.page = 0;\n        this.isLoading = false;\n        this.initialized = false;\n        this.select = this.rowSelect = new EventEmitter();\n        this.rowAction = new EventEmitter();\n        this.createItem = new EventEmitter();\n        this.error = new EventEmitter();\n        this.loader.loading = true;\n    }\n    /**\n     * @param {?} property\n     * @param {?} component\n     * @return {?}\n     */\n    FormioGridComponent.prototype.createComponent = /**\n     * @param {?} property\n     * @param {?} component\n     * @return {?}\n     */\n        function (property, component) {\n            /** @type {?} */\n            var factory = this.resolver.resolveComponentFactory(component);\n            /** @type {?} */\n            var componentRef = property.createComponent(factory);\n            return componentRef.instance;\n        };\n    /**\n     * @param {?=} src\n     * @return {?}\n     */\n    FormioGridComponent.prototype.loadGrid = /**\n     * @param {?=} src\n     * @return {?}\n     */\n        function (src) {\n            var _this = this;\n            // If no source is provided, then skip.\n            if (!src && !this.formio) {\n                return;\n            }\n            // Do not double load.\n            if (this.formio && this.src && (src === this.src)) {\n                return;\n            }\n            if (src) {\n                this.src = src;\n                this.formio = new Formio(this.src, { formOnly: true });\n            }\n            // Load the header.\n            this.header.load(this.formio)\n                .then((function () { return _this.setPage(0); }))\n                .catch((function (error) { return _this.onError(error); }));\n        };\n    /**\n     * @return {?}\n     */\n    FormioGridComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Create our components.\n            /** @type {?} */\n            var comps = this.components || ((this.gridType === 'form') ? FormComponents : SubmissionComponents);\n            this.header = this.createComponent(this.headerElement, comps.header);\n            this.header.actionAllowed = this.actionAllowed.bind(this);\n            this.header.sort.subscribe((function (header) { return _this.sortColumn(header); }));\n            this.body = this.createComponent(this.bodyElement, comps.body);\n            this.body.header = this.header;\n            this.body.actionAllowed = this.actionAllowed.bind(this);\n            this.body.rowSelect.subscribe((function (row) { return _this.rowSelect.emit(row); }));\n            this.body.rowAction.subscribe((function (action) { return _this.rowAction.emit(action); }));\n            this.footer = this.createComponent(this.footerElement, comps.footer);\n            this.footer.header = this.header;\n            this.footer.body = this.body;\n            this.footer.actionAllowed = this.actionAllowed.bind(this);\n            this.footer.createText = this.createText;\n            this.footer.size = this.size;\n            this.footer.pageChanged.subscribe((function (page) { return _this.pageChanged(page); }));\n            this.footer.createItem.subscribe((function (item) { return _this.createItem.emit(item); }));\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormioGridComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (this.initialized) {\n                if ((changes.src && changes.src.currentValue) ||\n                    (changes.formio && changes.formio.currentValue)) {\n                    this.loadGrid(changes.src.currentValue);\n                }\n                if (changes.items && changes.items.currentValue) {\n                    this.refreshGrid();\n                }\n            }\n            if (this.footer &&\n                (changes.createText && changes.createText.currentValue)) {\n                this.footer.createText = changes.createText.currentValue;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    FormioGridComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.alerts.setAlerts([]);\n            this.query = this.query || {};\n            if (this.refresh) {\n                this.refresh.subscribe((function (query) { return _this.refreshGrid(query); }));\n            }\n            this.loadGrid(this.src);\n            this.initialized = true;\n            this.ref.detectChanges();\n        };\n    Object.defineProperty(FormioGridComponent.prototype, \"loading\", {\n        set: /**\n         * @param {?} _loading\n         * @return {?}\n         */ function (_loading) {\n            this.loader.loading = this.isLoading = _loading;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    FormioGridComponent.prototype.actionAllowed = /**\n     * @param {?} action\n     * @return {?}\n     */\n        function (action) {\n            if (this.isActionAllowed) {\n                return this.isActionAllowed(action);\n            }\n            else {\n                return true;\n            }\n        };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    FormioGridComponent.prototype.onError = /**\n     * @param {?} error\n     * @return {?}\n     */\n        function (error) {\n            this.loading = false;\n            this.error.emit(error);\n            this.alerts.setAlert({\n                type: 'danger',\n                message: error\n            });\n        };\n    /**\n     * @param {?=} query\n     * @return {?}\n     */\n    FormioGridComponent.prototype.refreshGrid = /**\n     * @param {?=} query\n     * @return {?}\n     */\n        function (query) {\n            var _this = this;\n            this.alerts.setAlerts([]);\n            this.query = query || this.query;\n            if (!this.query.hasOwnProperty('limit')) {\n                this.query.limit = 10;\n            }\n            if (!this.query.hasOwnProperty('skip')) {\n                this.query.skip = 0;\n            }\n            this.loading = true;\n            this.ref.detectChanges();\n            Formio.cache = {};\n            /** @type {?} */\n            var loader = null;\n            if (this.items) {\n                loader = Promise.resolve(this.body.setRows(this.query, this.items));\n            }\n            else {\n                loader = this.body.load(this.formio, this.query);\n            }\n            loader.then((function (info) {\n                _this.loading = false;\n                _this.initialized = true;\n                _this.ref.detectChanges();\n            })).catch((function (error) { return _this.onError(error); }));\n        };\n    /**\n     * @param {?=} num\n     * @return {?}\n     */\n    FormioGridComponent.prototype.setPage = /**\n     * @param {?=} num\n     * @return {?}\n     */\n        function (num) {\n            if (num === void 0) {\n                num = -1;\n            }\n            if (this.isLoading) {\n                return;\n            }\n            this.page = num !== -1 ? num : this.page;\n            if (!this.query.hasOwnProperty('limit')) {\n                this.query.limit = 10;\n            }\n            if (!this.query.hasOwnProperty('skip')) {\n                this.query.skip = 0;\n            }\n            this.query.skip = this.page * this.query.limit;\n            this.refreshGrid();\n        };\n    /**\n     * @param {?} header\n     * @return {?}\n     */\n    FormioGridComponent.prototype.sortColumn = /**\n     * @param {?} header\n     * @return {?}\n     */\n        function (header) {\n            // Reset all other column sorts.\n            each(this.header.headers, (function (col) {\n                if (col.key !== header.key) {\n                    col.sort = '';\n                }\n            }));\n            switch (header.sort) {\n                case 'asc':\n                    header.sort = 'desc';\n                    this.query.sort = '-' + header.key;\n                    break;\n                case 'desc':\n                    header.sort = '';\n                    delete this.query.sort;\n                    break;\n                case '':\n                    header.sort = 'asc';\n                    this.query.sort = header.key;\n                    break;\n            }\n            this.refreshGrid();\n        };\n    /**\n     * @param {?} page\n     * @return {?}\n     */\n    FormioGridComponent.prototype.pageChanged = /**\n     * @param {?} page\n     * @return {?}\n     */\n        function (page) {\n            this.setPage(page.page - 1);\n        };\n    return FormioGridComponent;\n}());\nexport { FormioGridComponent };\nif (false) {\n    /** @type {?} */\n    FormioGridComponent.prototype.src;\n    /** @type {?} */\n    FormioGridComponent.prototype.items;\n    /** @type {?} */\n    FormioGridComponent.prototype.onForm;\n    /** @type {?} */\n    FormioGridComponent.prototype.query;\n    /** @type {?} */\n    FormioGridComponent.prototype.refresh;\n    /** @type {?} */\n    FormioGridComponent.prototype.gridType;\n    /** @type {?} */\n    FormioGridComponent.prototype.size;\n    /** @type {?} */\n    FormioGridComponent.prototype.components;\n    /** @type {?} */\n    FormioGridComponent.prototype.formio;\n    /** @type {?} */\n    FormioGridComponent.prototype.createText;\n    /** @type {?} */\n    FormioGridComponent.prototype.isActionAllowed;\n    /** @type {?} */\n    FormioGridComponent.prototype.select;\n    /** @type {?} */\n    FormioGridComponent.prototype.rowSelect;\n    /** @type {?} */\n    FormioGridComponent.prototype.rowAction;\n    /** @type {?} */\n    FormioGridComponent.prototype.createItem;\n    /** @type {?} */\n    FormioGridComponent.prototype.error;\n    /** @type {?} */\n    FormioGridComponent.prototype.headerElement;\n    /** @type {?} */\n    FormioGridComponent.prototype.bodyElement;\n    /** @type {?} */\n    FormioGridComponent.prototype.footerElement;\n    /** @type {?} */\n    FormioGridComponent.prototype.page;\n    /** @type {?} */\n    FormioGridComponent.prototype.isLoading;\n    /** @type {?} */\n    FormioGridComponent.prototype.initialized;\n    /** @type {?} */\n    FormioGridComponent.prototype.header;\n    /** @type {?} */\n    FormioGridComponent.prototype.body;\n    /** @type {?} */\n    FormioGridComponent.prototype.footer;\n    /** @type {?} */\n    FormioGridComponent.prototype.loader;\n    /** @type {?} */\n    FormioGridComponent.prototype.alerts;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormioGridComponent.prototype.resolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormioGridComponent.prototype.ref;\n}\n",null]}