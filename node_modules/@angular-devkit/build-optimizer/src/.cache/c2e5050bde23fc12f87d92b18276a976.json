{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/clear-all/connectClearAll.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/clear-all/connectClearAll.js","mtime":1581861144625},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_utils.js PURE_IMPORTS_END */\nimport { checkRendering, clearRefinements, getAttributesToClear } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customClearAll = connectClearAll(function render(params, isFirstRendering) {\\n  // params = {\\n  //   refine,\\n  //   hasRefinements,\\n  //   createURL,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customClearAll({\\n    [ excludeAttributes = [] ],\\n    [ clearsQuery = false ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectClearAll.html\\n';\n/**\n * @typedef {Object} CustomClearAllWidgetOptions\n * @property {string[]} [excludeAttributes = []] Every attributes that should not be removed when calling `refine()`.\n * @property {boolean} [clearsQuery = false] If `true`, `refine()` also clears the current search query.\n */\n/**\n * @typedef {Object} ClearAllRenderingOptions\n * @property {function} refine Triggers the clear of all the currently refined values.\n * @property {boolean} hasRefinements Indicates if search state is refined.\n * @property {function} createURL Creates a url for the next state when refinements are cleared.\n * @property {Object} widgetParams All original `CustomClearAllWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * **ClearAll** connector provides the logic to build a custom widget that will give the user\n * the ability to reset the search state.\n *\n * This connector provides a `refine` function to remove the current refined facets.\n *\n * The behaviour of this function can be changed with widget options. If `clearsQuery`\n * is set to `true`, `refine` will also clear the query and `excludeAttributes` can\n * prevent certain attributes from being cleared.\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/clear-refinements/js/\n * @param {function(ClearAllRenderingOptions, boolean)} renderFn Rendering function for the custom **ClearAll** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomClearAllWidgetOptions)} Re-usable widget factory for a custom **ClearAll** widget.\n * @example\n * // custom `renderFn` to render the custom ClearAll widget\n * function renderFn(ClearAllRenderingOptions, isFirstRendering) {\n *   var containerNode = ClearAllRenderingOptions.widgetParams.containerNode;\n *   if (isFirstRendering) {\n *     var markup = $('<button id=\"custom-clear-all\">Clear All</button>');\n *     containerNode.append(markup);\n *\n *     markup.on('click', function(event) {\n *       event.preventDefault();\n *       ClearAllRenderingOptions.refine();\n *     })\n *   }\n *\n *   var clearAllCTA = containerNode.find('#custom-clear-all');\n *   clearAllCTA.attr('disabled', !ClearAllRenderingOptions.hasRefinements)\n * };\n *\n * // connect `renderFn` to ClearAll logic\n * var customClearAllWidget = instantsearch.connectors.connectClearAll(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customClearAllWidget({\n *     containerNode: $('#custom-clear-all-container'),\n *   })\n * );\n */\nexport default function connectClearAll(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _widgetParams$exclude = widgetParams.excludeAttributes, excludeAttributes = _widgetParams$exclude === undefined ? [] : _widgetParams$exclude, _widgetParams$clearsQ = widgetParams.clearsQuery, clearsQuery = _widgetParams$clearsQ === undefined ? false : _widgetParams$clearsQ;\n        return {\n            init: function init(_ref) {\n                var helper = _ref.helper, instantSearchInstance = _ref.instantSearchInstance, createURL = _ref.createURL;\n                var attributesToClear = getAttributesToClear({\n                    helper: helper,\n                    blackList: excludeAttributes\n                });\n                var hasRefinements = clearsQuery ? attributesToClear.length !== 0 || helper.state.query !== '' : attributesToClear.length !== 0;\n                this._refine = function () {\n                    helper.setState(clearRefinements({\n                        helper: helper,\n                        blackList: excludeAttributes,\n                        clearsQuery: clearsQuery\n                    })).search();\n                };\n                this._createURL = function () {\n                    return createURL(clearRefinements({\n                        helper: helper,\n                        blackList: excludeAttributes,\n                        clearsQuery: clearsQuery\n                    }));\n                };\n                renderFn({\n                    refine: this._refine,\n                    hasRefinements: hasRefinements,\n                    createURL: this._createURL,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, true);\n            },\n            render: function render(_ref2) {\n                var helper = _ref2.helper, instantSearchInstance = _ref2.instantSearchInstance;\n                var attributesToClear = getAttributesToClear({\n                    helper: helper,\n                    blackList: excludeAttributes\n                });\n                var hasRefinements = clearsQuery ? attributesToClear.length !== 0 || helper.state.query !== '' : attributesToClear.length !== 0;\n                renderFn({\n                    refine: this._refine,\n                    hasRefinements: hasRefinements,\n                    createURL: this._createURL,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, false);\n            },\n            dispose: function dispose() {\n                unmountFn();\n            }\n        };\n    };\n}\n",null]}