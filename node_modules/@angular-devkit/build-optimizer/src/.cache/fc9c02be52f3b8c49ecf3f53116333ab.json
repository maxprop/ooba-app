{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/numeric-selector/connectNumericSelector.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/numeric-selector/connectNumericSelector.js","mtime":1581861144635},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _.._lib_utils.js PURE_IMPORTS_END */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n} return target; };\nfunction _defineProperty(obj, key, value) { if (key in obj) {\n    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n}\nelse {\n    obj[key] = value;\n} return obj; }\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customNumericSelector = connectNumericSelector(function renderFn(params, isFirstRendering) {\\n  // params = {\\n  //   currentRefinement,\\n  //   options,\\n  //   refine,\\n  //   hasNoResults,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customNumericSelector({\\n    attributeName,\\n    options,\\n    [ operator = \\'=\\' ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectNumericSelector.html\\n';\n/**\n * @typedef {Object} NumericSelectorOption\n * @property {number} value The numerical value to refine with.\n * If the value is `undefined` or `\"undefined\"`, the option resets the filter.\n * @property {string} label Label to display in the option.\n */\n/**\n * @typedef {Object} CustomNumericSelectorWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {NumericSelectorOption[]} options Array of objects defining the different values and labels.\n * @property {string} [operator = '＝'] The operator to use to refine. Supports following operators: <, <=, =, >, >= and !=.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n/**\n * @typedef {Object} NumericSelectorRenderingOptions\n * @property {string} currentRefinement The currently selected value.\n * @property {NumericSelectorOption[]} options The different values and labels of the selector.\n * @property {function(option.value)} refine Updates the results with the selected value.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams All original `CustomNumericSelectorWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * **NumericSelector** connector provides the logic to build a custom widget that will let the\n * user filter the results based on a list of numerical filters.\n *\n * It provides a `refine(value)` function to trigger a new search with selected option.\n * @type {Connector}\n * @param {function(NumericSelectorRenderingOptions, boolean)} renderFn Rendering function for the custom **NumericSelector** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomNumericSelectorWidgetOptions)} Re-usable widget factory for a custom **NumericSelector** widget.\n * @example\n * // custom `renderFn` to render the custom NumericSelector widget\n * function renderFn(NumericSelectorRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     NumericSelectorRenderingOptions.widgetParams.containerNode.html('<select></select>');\n *     NumericSelectorRenderingOptions.widgetParams.containerNode\n *       .find('select')\n *       .on('change', function(event) {\n *         NumericSelectorRenderingOptions.refine(event.target.value);\n *       })\n *   }\n *\n *   var optionsHTML = NumericSelectorRenderingOptions.options.map(function(option) {\n *     return '<option value=\"' + option.value + '\"' +\n *       (NumericSelectorRenderingOptions.currentRefinement === option.value ? ' selected' : '') + '>' +\n *       option.label + '</option>';\n *   });\n *\n *   NumericSelectorRenderingOptions.widgetParams.containerNode\n *     .find('select')\n *     .html(optionsHTML);\n * }\n *\n * // connect `renderFn` to NumericSelector logic\n * var customNumericSelector = instantsearch.connectors.connectNumericSelector(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customNumericSelector({\n *     containerNode: $('#custom-numeric-selector-container'),\n *     operator: '>=',\n *     attributeName: 'popularity',\n *     options: [\n *       {label: 'Default', value: 0},\n *       {label: 'Top 10', value: 9991},\n *       {label: 'Top 100', value: 9901},\n *       {label: 'Top 500', value: 9501},\n *     ],\n *   })\n * );\n */\nexport default function connectNumericSelector(renderFn, unmountFn) {\n    checkRendering(renderFn, usage);\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var attributeName = widgetParams.attributeName, options = widgetParams.options, _widgetParams$operato = widgetParams.operator, operator = _widgetParams$operato === undefined ? '=' : _widgetParams$operato, _widgetParams$transfo = widgetParams.transformItems, transformItems = _widgetParams$transfo === undefined ? function (items) {\n            return items;\n        } : _widgetParams$transfo;\n        if (!attributeName || !options) {\n            throw new Error(usage);\n        }\n        return {\n            getConfiguration: function getConfiguration(currentSearchParameters, searchParametersFromUrl) {\n                var value = this._getRefinedValue(searchParametersFromUrl);\n                if (value) {\n                    return {\n                        numericRefinements: _defineProperty({}, attributeName, _defineProperty({}, operator, [value]))\n                    };\n                }\n                return {};\n            },\n            init: function init(_ref) {\n                var helper = _ref.helper, instantSearchInstance = _ref.instantSearchInstance;\n                this._refine = function (value) {\n                    helper.clearRefinements(attributeName);\n                    if (value !== undefined && value !== 'undefined') {\n                        helper.addNumericRefinement(attributeName, operator, value);\n                    }\n                    helper.search();\n                };\n                renderFn({\n                    currentRefinement: this._getRefinedValue(helper.state),\n                    options: transformItems(options),\n                    refine: this._refine,\n                    hasNoResults: true,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, true);\n            },\n            render: function render(_ref2) {\n                var helper = _ref2.helper, results = _ref2.results, instantSearchInstance = _ref2.instantSearchInstance;\n                renderFn({\n                    currentRefinement: this._getRefinedValue(helper.state),\n                    options: transformItems(options),\n                    refine: this._refine,\n                    hasNoResults: results.nbHits === 0,\n                    instantSearchInstance: instantSearchInstance,\n                    widgetParams: widgetParams\n                }, false);\n            },\n            dispose: function dispose(_ref3) {\n                var state = _ref3.state;\n                unmountFn();\n                return state.removeNumericRefinement(attributeName);\n            },\n            getWidgetState: function getWidgetState(uiState, _ref4) {\n                var searchParameters = _ref4.searchParameters;\n                var currentRefinement = this._getRefinedValue(searchParameters);\n                if (\n                // Does the current state contain the current refinement?\n                uiState.numericSelector && currentRefinement === uiState.numericSelector[attributeName] ||\n                    // Is the current value the first option / default value?\n                    currentRefinement === options[0].value) {\n                    return uiState;\n                }\n                if (currentRefinement || currentRefinement === 0)\n                    return _extends({}, uiState, {\n                        numericSelector: _extends({}, uiState.numericSelector, _defineProperty({}, attributeName, currentRefinement))\n                    });\n                return uiState;\n            },\n            getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n                var uiState = _ref5.uiState;\n                var value = uiState.numericSelector && uiState.numericSelector[attributeName];\n                var currentlyRefinedValue = this._getRefinedValue(searchParameters);\n                if (value) {\n                    if (value === currentlyRefinedValue)\n                        return searchParameters;\n                    return searchParameters.clearRefinements(attributeName).addNumericRefinement(attributeName, operator, value);\n                }\n                var firstItemValue = options[0] && options[0].value;\n                if (typeof firstItemValue === 'number') {\n                    return searchParameters.clearRefinements(attributeName).addNumericRefinement(attributeName, operator, options[0].value);\n                }\n                return searchParameters;\n            },\n            _getRefinedValue: function _getRefinedValue(state) {\n                // This is reimplementing state.getNumericRefinement\n                // But searchParametersFromUrl is not an actual SearchParameters object\n                // It's only the object structure without the methods, because getStateFromQueryString\n                // is not sending a SearchParameters. There's no way given how we built the helper\n                // to initialize a true partial state where only the refinements are present\n                return state && state.numericRefinements && state.numericRefinements[attributeName] !== undefined && state.numericRefinements[attributeName][operator] !== undefined && state.numericRefinements[attributeName][operator][0] !== undefined // could be 0\n                    ? state.numericRefinements[attributeName][operator][0] : options[0].value;\n            }\n        };\n    };\n}\n",null]}