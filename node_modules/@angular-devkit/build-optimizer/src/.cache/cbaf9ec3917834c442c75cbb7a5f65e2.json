{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.js","mtime":1581861144625},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START lodash_isFunction,lodash_isPlainObject,_.._lib_InstantSearch.js PURE_IMPORTS_END */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n} return target; };\nimport isFunction from 'lodash/isFunction';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { enhanceConfiguration } from '../../lib/InstantSearch.js';\nvar usage = 'Usage:\\nvar customConfigureWidget = connectConfigure(\\n  function renderFn(params, isFirstRendering) {\\n    // params = {\\n    //   refine,\\n    //   widgetParams\\n    // }\\n  },\\n  function disposeFn() {}\\n)\\n';\n/**\n * @typedef {Object} CustomConfigureWidgetOptions\n * @property {Object} searchParameters The Configure widget options are search parameters\n */\n/**\n * @typedef {Object} ConfigureRenderingOptions\n * @property {function(searchParameters: Object)} refine Sets new `searchParameters` and trigger a search.\n * @property {Object} widgetParams All original `CustomConfigureWidgetOptions` forwarded to the `renderFn`.\n */\n/**\n * The **Configure** connector provides the logic to build a custom widget\n * that will give you ability to override or force some search parameters sent to Algolia API.\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/configure/js/\n * @param {function(ConfigureRenderingOptions)} renderFn Rendering function for the custom **Configure** Widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomConfigureWidgetOptions)} Re-usable widget factory for a custom **Configure** widget.\n */\nexport default function connectConfigure(renderFn, unmountFn) {\n    if (isFunction(renderFn) && !isFunction(unmountFn) || !isFunction(renderFn) && isFunction(unmountFn)) {\n        throw new Error(usage);\n    }\n    return function () {\n        var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!isPlainObject(widgetParams.searchParameters)) {\n            throw new Error(usage);\n        }\n        return {\n            getConfiguration: function getConfiguration() {\n                return widgetParams.searchParameters;\n            },\n            init: function init(_ref) {\n                var helper = _ref.helper;\n                this._refine = this.refine(helper);\n                if (isFunction(renderFn)) {\n                    renderFn({\n                        refine: this._refine,\n                        widgetParams: widgetParams\n                    }, true);\n                }\n            },\n            refine: function refine(helper) {\n                var _this = this;\n                return function (searchParameters) {\n                    // merge new `searchParameters` with the ones set from other widgets\n                    var actualState = _this.removeSearchParameters(helper.getState());\n                    var nextSearchParameters = enhanceConfiguration({})(_extends({}, actualState), {\n                        getConfiguration: function getConfiguration() {\n                            return searchParameters;\n                        }\n                    });\n                    // trigger a search with the new merged searchParameters\n                    helper.setState(nextSearchParameters).search();\n                    // update original `widgetParams.searchParameters` to the new refined one\n                    widgetParams.searchParameters = searchParameters;\n                };\n            },\n            render: function render() {\n                if (renderFn) {\n                    renderFn({\n                        refine: this._refine,\n                        widgetParams: widgetParams\n                    }, false);\n                }\n            },\n            dispose: function dispose(_ref2) {\n                var state = _ref2.state;\n                if (unmountFn)\n                    unmountFn();\n                return this.removeSearchParameters(state);\n            },\n            removeSearchParameters: function removeSearchParameters(state) {\n                // widgetParams are assumed 'controlled',\n                // so they override whatever other widgets give the state\n                return state.mutateMe(function (mutableState) {\n                    Object.keys(widgetParams.searchParameters).forEach(function (key) {\n                        delete mutableState[key];\n                    });\n                });\n            }\n        };\n    };\n}\n",null]}