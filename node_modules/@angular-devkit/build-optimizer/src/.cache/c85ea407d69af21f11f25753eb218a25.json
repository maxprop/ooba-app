{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/utils/calendarUtils.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/utils/calendarUtils.js","mtime":1581861143601},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.find-index\");\n\nrequire(\"core-js/modules/es.array.join\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.regexp.constructor\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.match\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lessOrGreater = lessOrGreater;\nexports.checkInvalidDate = checkInvalidDate;\nexports.CALENDAR_ERROR_MESSAGES = void 0;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CALENDAR_ERROR_MESSAGES = {\n  INVALID: 'You entered the Invalid Date',\n  INCOMPLETE: 'You entered an incomplete date.',\n  greater: function greater(date, format) {\n    return \"The entered date is greater than \".concat(date.format(format));\n  },\n  less: function less(date, format) {\n    return \"The entered date is less than \".concat(date.format(format));\n  }\n};\n/**\n * Builds the response for checkInvalidDate.\n *\n * @param {String} message\n *   The message for response.\n * @param {Boolean} result\n *   The boolean flag for response.\n * * @return {{message: string, result: boolean}}\n */\n\nexports.CALENDAR_ERROR_MESSAGES = CALENDAR_ERROR_MESSAGES;\n\nfunction buildResponse(message, result) {\n  return {\n    message: message,\n    result: result\n  };\n}\n/**\n * Checks the value for a min date and max date.\n *\n * @param {moment} value\n *   The value to check.\n * @param {[String]} format\n *   A moment formats.\n * @param {Date} maxDate\n *   The max date.\n * @param {Date} minDate\n *   The min date.\n * * @return {{message: string, result: boolean}}\n */\n\n\nfunction lessOrGreater(value, format, maxDate, minDate) {\n  var message = '';\n  var result = true;\n\n  if (maxDate && value.isValid()) {\n    var maxDateMoment = (0, _moment.default)(maxDate, format);\n\n    if (value > maxDateMoment) {\n      message = CALENDAR_ERROR_MESSAGES.greater(maxDateMoment, format);\n      result = false;\n    }\n  }\n\n  if (minDate && value.isValid()) {\n    var minDateMoment = (0, _moment.default)(minDate, format);\n\n    if (value < minDateMoment) {\n      message = CALENDAR_ERROR_MESSAGES.less(minDateMoment, format);\n      result = false;\n    }\n  }\n\n  return {\n    message: message,\n    result: result\n  };\n}\n/**\n * Checks the entered date for validity.\n *\n * @param {String} value\n *   The value to check.\n * @param {[String]} format\n *   A moment formats.\n * @param {Date} maxDate\n *   The max date.\n * @param {Date} minDate\n *   The min date.\n * * @return {{message: string, result: boolean}}\n */\n\n\nfunction checkInvalidDate(value, format, minDate, maxDate) {\n  var date = (0, _moment.default)(value, format, true);\n  var isValidDate = date.isValid();\n\n  if (!isValidDate) {\n    var delimeters = value.match(/[^a-z0-9_]/gi);\n    var delimetersRegEx = new RegExp(delimeters.join('|'), 'gi');\n    var inputParts = value.replace(/_*/gi, '').split(delimetersRegEx);\n    var formatParts = format[1] ? format[1].split(delimetersRegEx) : format[0].split(delimetersRegEx);\n\n    var timeIndex = _lodash.default.findIndex(formatParts, function (part, index) {\n      return part.length === 1 && index === formatParts.length - 1;\n    });\n\n    var yearIndex = _lodash.default.findIndex(formatParts, function (part) {\n      return part.match(/yyyy/gi);\n    });\n\n    if (inputParts[yearIndex] / 1000 < 1) {\n      return buildResponse(CALENDAR_ERROR_MESSAGES.INVALID, false);\n    }\n\n    if (inputParts[0].length === formatParts[0].length) {\n      var modifiedParts = inputParts.map(function (part, index) {\n        var partValue = part;\n\n        if (!part && index === timeIndex) {\n          partValue = 'AM';\n        } else if (!part) {\n          partValue = '01';\n        }\n\n        if (delimeters[index]) {\n          partValue = \"\".concat(partValue).concat(delimeters[index]);\n        }\n\n        return partValue;\n      });\n      var problemDate = (0, _moment.default)(modifiedParts.join(''), format, true);\n\n      if (problemDate.isValid()) {\n        var _lessOrGreater = lessOrGreater(problemDate, format[0], maxDate, minDate),\n            message = _lessOrGreater.message,\n            result = _lessOrGreater.result;\n\n        return !result ? buildResponse(message, result) : buildResponse(CALENDAR_ERROR_MESSAGES.INCOMPLETE, false);\n      } else {\n        return buildResponse(CALENDAR_ERROR_MESSAGES.INVALID, false);\n      }\n    } else {\n      return buildResponse(CALENDAR_ERROR_MESSAGES.INVALID, false);\n    }\n  } else if (isValidDate && value.indexOf('_') === -1) {\n    var checkedLessOrGreater = lessOrGreater(date, format[0], maxDate, minDate);\n\n    if (!checkedLessOrGreater.result) {\n      var _message = checkedLessOrGreater.message,\n          _result = checkedLessOrGreater.result;\n      return buildResponse(_message, _result);\n    }\n  }\n\n  return buildResponse('', true);\n}",null]}