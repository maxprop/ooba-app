{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/auth/auth.service.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/angular-formio/auth/auth.service.js","mtime":1581861141275},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { FormioAuthConfig } from './auth.config';\nimport { FormioAppConfig } from '../formio.config';\nimport { get, each } from 'lodash';\nimport { Formio } from 'formiojs';\nvar FormioAuthService = /*@__PURE__*/ (function () {\n    function FormioAuthService(appConfig, config) {\n        var _this = this;\n        this.appConfig = appConfig;\n        this.config = config;\n        this.authenticated = false;\n        this.formAccess = {};\n        this.submissionAccess = {};\n        this.is = {};\n        this.user = null;\n        if (this.appConfig && this.appConfig.appUrl) {\n            Formio.setBaseUrl(this.appConfig.apiUrl);\n            Formio.setProjectUrl(this.appConfig.appUrl);\n            Formio.formOnly = !!this.appConfig.formOnly;\n        }\n        else {\n            console.error('You must provide an AppConfig within your application!');\n        }\n        if (this.config.project) {\n            Formio.setAuthUrl(this.config.project);\n        }\n        this.loginForm =\n            (this.config.project || this.appConfig.appUrl) +\n                '/' +\n                get(this.config, 'login.form', 'user/login');\n        this.registerForm =\n            (this.config.project || this.appConfig.appUrl) +\n                '/' +\n                get(this.config, 'register.form', 'user/login');\n        this.onLogin = new EventEmitter();\n        this.onLogout = new EventEmitter();\n        this.onRegister = new EventEmitter();\n        this.onUser = new EventEmitter();\n        this.onError = new EventEmitter();\n        this.ready = new Promise((function (resolve, reject) {\n            _this.readyResolve = resolve;\n            _this.readyReject = reject;\n        }));\n        // Register for the core events.\n        Formio.events.on('formio.badToken', (function () { return _this.logoutError(); }));\n        Formio.events.on('formio.sessionExpired', (function () { return _this.logoutError(); }));\n        if (!this.config.delayAuth) {\n            this.init();\n        }\n    }\n    /**\n     * @param {?} submission\n     * @return {?}\n     */\n    FormioAuthService.prototype.onLoginSubmit = /**\n     * @param {?} submission\n     * @return {?}\n     */\n        function (submission) {\n            this.setUser(submission);\n            this.onLogin.emit(submission);\n        };\n    /**\n     * @param {?} submission\n     * @return {?}\n     */\n    FormioAuthService.prototype.onRegisterSubmit = /**\n     * @param {?} submission\n     * @return {?}\n     */\n        function (submission) {\n            this.setUser(submission);\n            this.onRegister.emit(submission);\n        };\n    /**\n     * @return {?}\n     */\n    FormioAuthService.prototype.init = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.projectReady = Formio.makeStaticRequest(this.appConfig.appUrl).then((function (project) {\n                each(project.access, (function (access) {\n                    _this.formAccess[access.type] = access.roles;\n                }));\n            }), (function () {\n                _this.formAccess = {};\n                return null;\n            }));\n            // Get the access for this project.\n            this.accessReady = Formio.makeStaticRequest(this.appConfig.appUrl + '/access').then((function (access) {\n                each(access.forms, (function (form) {\n                    _this.submissionAccess[form.name] = {};\n                    form.submissionAccess.forEach((function (subAccess) {\n                        _this.submissionAccess[form.name][subAccess.type] = subAccess.roles;\n                    }));\n                }));\n                _this.roles = access.roles;\n                return access;\n            }), (function () {\n                _this.roles = {};\n                return null;\n            }));\n            this.userReady = Formio.currentUser().then((function (user) {\n                _this.setUser(user);\n                return user;\n            }));\n            // Trigger we are redy when all promises have resolved.\n            if (this.accessReady) {\n                this.accessReady\n                    .then((function () { return _this.projectReady; }))\n                    .then((function () { return _this.userReady; }))\n                    .then((function () { return _this.readyResolve(true); }))\n                    .catch((function (err) { return _this.readyReject(err); }));\n            }\n        };\n    /**\n     * @param {?} user\n     * @return {?}\n     */\n    FormioAuthService.prototype.setUser = /**\n     * @param {?} user\n     * @return {?}\n     */\n        function (user) {\n            /** @type {?} */\n            var namespace = Formio.namespace || 'formio';\n            if (user) {\n                this.user = user;\n                localStorage.setItem(namespace + \"AppUser\", JSON.stringify(user));\n                this.setUserRoles();\n            }\n            else {\n                this.user = null;\n                this.is = {};\n                localStorage.removeItem(namespace + \"AppUser\");\n                Formio.clearCache();\n                Formio.setUser(null);\n            }\n            this.authenticated = !!Formio.getToken();\n            this.onUser.emit(this.user);\n        };\n    /**\n     * @return {?}\n     */\n    FormioAuthService.prototype.setUserRoles = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.accessReady) {\n                this.accessReady.then((function () {\n                    each(_this.roles, (function (role, roleName) {\n                        if (_this.user.roles.indexOf(role._id) !== -1) {\n                            _this.is[roleName] = true;\n                        }\n                    }));\n                }));\n            }\n        };\n    /**\n     * @return {?}\n     */\n    FormioAuthService.prototype.logoutError = /**\n     * @return {?}\n     */\n        function () {\n            this.setUser(null);\n            localStorage.removeItem('formioToken');\n            this.onError.emit();\n        };\n    /**\n     * @return {?}\n     */\n    FormioAuthService.prototype.logout = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.setUser(null);\n            localStorage.removeItem('formioToken');\n            Formio.logout()\n                .then((function () { return _this.onLogout.emit(); }))\n                .catch((function () { return _this.logoutError(); }));\n        };\n    return FormioAuthService;\n}());\nexport { FormioAuthService };\nif (false) {\n    /** @type {?} */\n    FormioAuthService.prototype.user;\n    /** @type {?} */\n    FormioAuthService.prototype.authenticated;\n    /** @type {?} */\n    FormioAuthService.prototype.loginForm;\n    /** @type {?} */\n    FormioAuthService.prototype.onLogin;\n    /** @type {?} */\n    FormioAuthService.prototype.onLogout;\n    /** @type {?} */\n    FormioAuthService.prototype.registerForm;\n    /** @type {?} */\n    FormioAuthService.prototype.onRegister;\n    /** @type {?} */\n    FormioAuthService.prototype.onUser;\n    /** @type {?} */\n    FormioAuthService.prototype.onError;\n    /** @type {?} */\n    FormioAuthService.prototype.ready;\n    /** @type {?} */\n    FormioAuthService.prototype.readyResolve;\n    /** @type {?} */\n    FormioAuthService.prototype.readyReject;\n    /** @type {?} */\n    FormioAuthService.prototype.projectReady;\n    /** @type {?} */\n    FormioAuthService.prototype.accessReady;\n    /** @type {?} */\n    FormioAuthService.prototype.userReady;\n    /** @type {?} */\n    FormioAuthService.prototype.formAccess;\n    /** @type {?} */\n    FormioAuthService.prototype.submissionAccess;\n    /** @type {?} */\n    FormioAuthService.prototype.roles;\n    /** @type {?} */\n    FormioAuthService.prototype.is;\n    /** @type {?} */\n    FormioAuthService.prototype.appConfig;\n    /** @type {?} */\n    FormioAuthService.prototype.config;\n}\n",null]}