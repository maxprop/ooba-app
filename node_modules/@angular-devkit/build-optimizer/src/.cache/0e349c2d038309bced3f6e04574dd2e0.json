{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/Wizard.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/formiojs/Wizard.js","mtime":1581861142191},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.function.name\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.string.includes\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Webform2 = _interopRequireDefault(require(\"./Webform\"));\n\nvar _Base = _interopRequireDefault(require(\"./components/base/Base\"));\n\nvar _Formio = _interopRequireDefault(require(\"./Formio\"));\n\nvar _utils = require(\"./utils/utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Wizard =\n/*#__PURE__*/\nfunction (_Webform) {\n  _inherits(Wizard, _Webform);\n\n  /**\n   * Constructor for wizard based forms\n   * @param element Dom element to place this wizard.\n   * @param {Object} options Options object, supported options are:\n   *    - breadcrumbSettings.clickable: true (default) determines if the breadcrumb bar is clickable or not\n   *    - buttonSettings.show*(Previous, Next, Cancel): true (default) determines if the button is shown or not\n   */\n  function Wizard(element, options) {\n    var _this;\n\n    _classCallCheck(this, Wizard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Wizard).call(this, element, options));\n    _this.wizard = null;\n    _this.pages = [];\n    _this.globalComponents = [];\n    _this.page = 0;\n    _this._nextPage = 0;\n    _this._seenPages = [0];\n    return _this;\n  }\n\n  _createClass(Wizard, [{\n    key: \"isLastPage\",\n    value: function isLastPage() {\n      var next = this.getNextPage(this.submission.data, this.page);\n\n      if (_lodash.default.isNumber(next)) {\n        return 0 < next && next >= this.pages.length;\n      }\n\n      return _lodash.default.isNull(next);\n    }\n  }, {\n    key: \"getPages\",\n    value: function getPages() {\n      var _this2 = this;\n\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _args$all = args.all,\n          all = _args$all === void 0 ? false : _args$all;\n\n      var pageOptions = _lodash.default.clone(this.options);\n\n      pageOptions.temporary = true;\n\n      var components = _lodash.default.clone(this.components);\n\n      var pages = this.pages.filter(all ? _lodash.default.identity : function (p, index) {\n        return _this2._seenPages.includes(index);\n      }).map(function (page, index) {\n        return _this2.createComponent(page, _lodash.default.assign(pageOptions, {\n          components: index === _this2.page ? components : null\n        }));\n      });\n      this.components = components;\n      return pages;\n    }\n  }, {\n    key: \"getComponents\",\n    value: function getComponents() {\n      return this.submitting ? this.getPages({\n        all: this.isLastPage()\n      }) : _get(_getPrototypeOf(Wizard.prototype), \"getComponents\", this).call(this);\n    }\n  }, {\n    key: \"resetValue\",\n    value: function resetValue() {\n      this.getPages({\n        all: true\n      }).forEach(function (page) {\n        return page.resetValue();\n      });\n      this.setPristine(true);\n    }\n  }, {\n    key: \"setPage\",\n    value: function setPage(num) {\n      if (!this.wizard.full && num >= 0 && num < this.pages.length) {\n        this.page = num;\n\n        if (!this._seenPages.includes(num)) {\n          this._seenPages = this._seenPages.concat(num);\n        }\n\n        return _get(_getPrototypeOf(Wizard.prototype), \"setForm\", this).call(this, this.currentPage());\n      } else if (this.wizard.full || !this.pages.length) {\n        return _get(_getPrototypeOf(Wizard.prototype), \"setForm\", this).call(this, this.getWizard());\n      }\n\n      return _nativePromiseOnly.default.reject('Page not found');\n    }\n  }, {\n    key: \"getNextPage\",\n    value: function getNextPage(data, currentPage) {\n      var form = this.pages[currentPage]; // Check conditional nextPage\n\n      if (form) {\n        var page = ++currentPage;\n\n        if (form.nextPage) {\n          var next = this.evaluate(form.nextPage, {\n            next: page,\n            data: data,\n            page: page,\n            form: form\n          }, 'next');\n\n          if (next === null) {\n            return null;\n          }\n\n          var pageNum = parseInt(next, 10);\n\n          if (!isNaN(parseInt(pageNum, 10)) && isFinite(pageNum)) {\n            return pageNum;\n          }\n\n          return this.getPageIndexByKey(next);\n        }\n\n        return page;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getPreviousPage\",\n    value: function getPreviousPage() {\n      return Math.max(this.page - 1, 0);\n    }\n  }, {\n    key: \"beforeSubmit\",\n    value: function beforeSubmit() {\n      return _nativePromiseOnly.default.all(this.getPages().map(function (page) {\n        return page.beforeSubmit();\n      }));\n    }\n  }, {\n    key: \"beforePage\",\n    value: function beforePage(next) {\n      var _this3 = this;\n\n      return new _nativePromiseOnly.default(function (resolve, reject) {\n        _this3.hook(next ? 'beforeNext' : 'beforePrev', _this3.currentPage(), _this3.submission, function (err) {\n          if (err) {\n            _this3.showErrors(err, true);\n\n            reject(err);\n          }\n\n          _get(_getPrototypeOf(Wizard.prototype), \"beforePage\", _this3).call(_this3, next).then(resolve).catch(reject);\n        });\n      });\n    }\n  }, {\n    key: \"nextPage\",\n    value: function nextPage() {\n      var _this4 = this;\n\n      // Read-only forms should not worry about validation before going to next page, nor should they submit.\n      if (this.options.readOnly) {\n        return this.setPage(this.getNextPage(this.submission.data, this.page)).then(function () {\n          _this4._nextPage = _this4.getNextPage(_this4.submission.data, _this4.page);\n\n          _this4.emit('nextPage', {\n            page: _this4.page,\n            submission: _this4.submission\n          });\n        });\n      } // Validate the form builed, before go to the next page\n\n\n      if (this.checkCurrentPageValidity(this.submission.data, true)) {\n        this.checkData(this.submission.data, {\n          noValidate: true\n        });\n        return this.beforePage(true).then(function () {\n          return _this4.setPage(_this4.getNextPage(_this4.submission.data, _this4.page)).then(function () {\n            _this4._nextPage = _this4.getNextPage(_this4.submission.data, _this4.page);\n\n            _this4.emit('nextPage', {\n              page: _this4.page,\n              submission: _this4.submission\n            });\n          });\n        });\n      } else {\n        return _nativePromiseOnly.default.reject(this.showErrors(null, true));\n      }\n    }\n  }, {\n    key: \"prevPage\",\n    value: function prevPage() {\n      var _this5 = this;\n\n      return this.beforePage(false).then(function () {\n        return _this5.setPage(_this5.getPreviousPage()).then(function () {\n          _this5.emit('prevPage', {\n            page: _this5.page,\n            submission: _this5.submission\n          });\n        });\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(noconfirm) {\n      if (_get(_getPrototypeOf(Wizard.prototype), \"cancel\", this).call(this, noconfirm)) {\n        return this.setPage(0);\n      } else {\n        return this.setPage();\n      }\n    }\n  }, {\n    key: \"getPageIndexByKey\",\n    value: function getPageIndexByKey(key) {\n      var pageIndex = 0;\n      this.pages.forEach(function (page, index) {\n        if (page.key === key) {\n          pageIndex = index;\n          return false;\n        }\n      });\n      return pageIndex;\n    }\n  }, {\n    key: \"addGlobalComponents\",\n    value: function addGlobalComponents(page) {\n      // If there are non-page components, then add them here. This is helpful to allow for hidden fields that\n      // can propogate between pages.\n      if (this.globalComponents.length) {\n        page.components = this.globalComponents.concat(page.components);\n      }\n\n      return page;\n    }\n  }, {\n    key: \"getPage\",\n    value: function getPage(pageNum) {\n      if (pageNum >= 0 && pageNum < this.pages.length) {\n        return this.addGlobalComponents(this.pages[pageNum]);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getWizard\",\n    value: function getWizard() {\n      var pageIndex = 0;\n      var page = null;\n\n      var wizard = _lodash.default.clone(this.wizard);\n\n      wizard.components = [];\n\n      do {\n        page = this.getPage(pageIndex);\n\n        if (page) {\n          wizard.components.push(page);\n        }\n\n        pageIndex = this.getNextPage(this.submission.data, pageIndex);\n      } while (pageIndex); // Add all other components.\n\n\n      this.wizard.components.forEach(function (component) {\n        if (component.type !== 'panel') {\n          wizard.components.push(component);\n        }\n      });\n      return wizard;\n    }\n  }, {\n    key: \"currentPage\",\n    value: function currentPage() {\n      return this.getPage(this.page);\n    }\n  }, {\n    key: \"buildPages\",\n    value: function buildPages(form) {\n      var _this6 = this;\n\n      this.pages = [];\n      form.components.forEach(function (component) {\n        if (component.type === 'panel') {\n          // Ensure that this page can be seen.\n          if ((0, _utils.checkCondition)(component, _this6.data, _this6.data, _this6.wizard, _this6)) {\n            _this6.pages.push(component);\n          }\n        } else if (component.type === 'hidden') {\n          // Global components are hidden components that can propagate between pages.\n          _this6.globalComponents.push(component);\n        }\n      });\n      this.buildWizardHeader();\n      this.buildWizardNav();\n    }\n  }, {\n    key: \"setForm\",\n    value: function setForm(form) {\n      if (!form) {\n        return;\n      }\n\n      this.wizard = form;\n      this.buildPages(this.wizard);\n      return this.setPage(this.page);\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var _this7 = this;\n\n      _get(_getPrototypeOf(Wizard.prototype), \"build\", this).call(this);\n\n      this.formReady.then(function () {\n        _this7.buildWizardHeader();\n\n        _this7.buildWizardNav();\n      });\n    }\n  }, {\n    key: \"hasButton\",\n    value: function hasButton(name, nextPage) {\n      // Check for and initlize button settings object\n      var currentPage = this.currentPage();\n      this.options.buttonSettings = _lodash.default.defaults(this.options.buttonSettings, {\n        showPrevious: true,\n        showNext: true,\n        showSubmit: true,\n        showCancel: !this.options.readOnly\n      });\n\n      if (name === 'previous') {\n        var show = (0, _utils.firstNonNil)([_lodash.default.get(currentPage, 'buttonSettings.previous'), this.options.buttonSettings.showPrevious]);\n        return this.page > 0 && show;\n      }\n\n      nextPage = nextPage === undefined ? this.getNextPage(this.submission.data, this.page) : nextPage;\n\n      if (name === 'next') {\n        var _show = (0, _utils.firstNonNil)([_lodash.default.get(currentPage, 'buttonSettings.next'), this.options.buttonSettings.showNext]);\n\n        return nextPage !== null && nextPage < this.pages.length && _show;\n      }\n\n      if (name === 'cancel') {\n        return (0, _utils.firstNonNil)([_lodash.default.get(currentPage, 'buttonSettings.cancel'), this.options.buttonSettings.showCancel]);\n      }\n\n      if (name === 'submit') {\n        var _show2 = (0, _utils.firstNonNil)([_lodash.default.get(currentPage, 'buttonSettings.submit'), this.options.buttonSettings.showSubmit]);\n\n        return _show2 && !this.options.readOnly && (nextPage === null || this.page === this.pages.length - 1);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"buildWizardHeader\",\n    value: function buildWizardHeader() {\n      var _this8 = this;\n\n      if (this.wizardHeader) {\n        this.wizardHeader.innerHTML = '';\n      }\n\n      var currentPage = this.currentPage();\n\n      if (!currentPage || this.wizard.full) {\n        return;\n      }\n\n      currentPage.breadcrumb = currentPage.breadcrumb || 'default';\n\n      if (currentPage.breadcrumb.toLowerCase() === 'none') {\n        return;\n      } // Check for and initlize breadcrumb settings object\n\n\n      this.options.breadcrumbSettings = _lodash.default.defaults(this.options.breadcrumbSettings, {\n        clickable: true\n      });\n      this.wizardHeader = this.ce('nav', {\n        'aria-label': 'navigation'\n      });\n      this.wizardHeaderList = this.ce('ul', {\n        class: 'pagination'\n      });\n      this.wizardHeader.appendChild(this.wizardHeaderList); // Add the header to the beginning.\n\n      this.prepend(this.wizardHeader);\n      var showHistory = currentPage.breadcrumb.toLowerCase() === 'history';\n      this.pages.forEach(function (page, i) {\n        // Iterate over predicates and returns first non-undefined value\n        var clickableFlag = (0, _utils.firstNonNil)([// Now page (Panel) can override `breadcrumbSettings.clickable` option\n        _lodash.default.get(page, 'breadcrumbClickable'), // Set clickable based on breadcrumb settings\n        _this8.options.breadcrumbSettings.clickable]);\n        var clickable = _this8.page !== i && clickableFlag;\n        var pageClass = 'page-item ';\n        pageClass += i === _this8.page ? 'active' : clickable ? '' : 'disabled';\n\n        var pageButton = _this8.ce('li', {\n          class: pageClass,\n          style: clickable ? 'cursor: pointer;' : ''\n        }); // Navigate to the page as they click on it.\n\n\n        if (clickable) {\n          _this8.addEventListener(pageButton, 'click', function (event) {\n            _this8.emit('wizardNavigationClicked', _this8.pages[i]);\n\n            event.preventDefault();\n\n            _this8.setPage(i);\n          });\n        }\n\n        var pageLabel = _this8.ce('span', {\n          class: 'page-link'\n        });\n\n        var pageTitle = page.title;\n\n        if (currentPage.breadcrumb.toLowerCase() === 'condensed') {\n          pageTitle = i === _this8.page || showHistory ? page.title : i + 1;\n\n          if (!pageTitle) {\n            pageTitle = i + 1;\n          }\n        }\n\n        pageLabel.appendChild(_this8.text(pageTitle));\n        pageButton.appendChild(pageLabel);\n\n        _this8.wizardHeaderList.appendChild(pageButton);\n      });\n    }\n  }, {\n    key: \"pageId\",\n    value: function pageId(page) {\n      if (page.key) {\n        // Some panels have the same key....\n        return \"\".concat(page.key, \"-\").concat(page.title);\n      } else if (page.components && page.components.length > 0) {\n        return this.pageId(page.components[0]);\n      } else {\n        return page.title;\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(flags, changed) {\n      var _this9 = this;\n\n      _get(_getPrototypeOf(Wizard.prototype), \"onChange\", this).call(this, flags, changed); // Only rebuild if there is a page change.\n\n\n      var pageIndex = 0;\n      var rebuild = false;\n      this.wizard.components.forEach(function (component) {\n        if (component.type !== 'panel') {\n          return;\n        }\n\n        if ((0, _utils.hasCondition)(component)) {\n          var hasPage = _this9.pages && _this9.pages[pageIndex] && _this9.pageId(_this9.pages[pageIndex]) === _this9.pageId(component);\n\n          var shouldShow = (0, _utils.checkCondition)(component, _this9.data, _this9.data, _this9.wizard, _this9);\n\n          if (shouldShow && !hasPage || !shouldShow && hasPage) {\n            rebuild = true;\n            return false;\n          }\n\n          if (shouldShow) {\n            pageIndex++;\n          }\n        } else {\n          pageIndex++;\n        }\n      });\n\n      if (rebuild) {\n        this.setForm(this.wizard);\n      } // Update Wizard Nav\n\n\n      var nextPage = this.getNextPage(this.submission.data, this.page);\n\n      if (this._nextPage !== nextPage) {\n        this.buildWizardNav(nextPage);\n        this.emit('updateWizardNav', {\n          oldpage: this._nextPage,\n          newpage: nextPage,\n          submission: this.submission\n        });\n        this._nextPage = nextPage;\n      }\n    }\n  }, {\n    key: \"buildWizardNav\",\n    value: function buildWizardNav(nextPage) {\n      var _this10 = this;\n\n      if (this.wizardNav) {\n        this.wizardNav.innerHTML = '';\n        this.removeChild(this.wizardNav);\n      }\n\n      if (this.wizard.full) {\n        return;\n      }\n\n      this.wizardNav = this.ce('ul', {\n        class: 'list-inline'\n      });\n      this.element.appendChild(this.wizardNav);\n      [{\n        name: 'cancel',\n        method: 'cancel',\n        class: 'btn btn-default btn-secondary'\n      }, {\n        name: 'previous',\n        method: 'prevPage',\n        class: 'btn btn-primary'\n      }, {\n        name: 'next',\n        method: 'nextPage',\n        class: 'btn btn-primary'\n      }, {\n        name: 'submit',\n        method: 'submit',\n        class: 'btn btn-primary'\n      }].forEach(function (button) {\n        if (!_this10.hasButton(button.name, nextPage)) {\n          return;\n        }\n\n        var buttonWrapper = _this10.ce('li', {\n          class: 'list-inline-item'\n        });\n\n        var buttonProp = \"\".concat(button.name, \"Button\");\n\n        var buttonElement = _this10[buttonProp] = _this10.ce('button', {\n          class: \"\".concat(button.class, \" btn-wizard-nav-\").concat(button.name)\n        });\n\n        buttonElement.appendChild(_this10.text(_this10.t(button.name)));\n\n        _this10.addEventListener(_this10[buttonProp], 'click', function (event) {\n          event.preventDefault(); // Disable the button until done.\n\n          buttonElement.setAttribute('disabled', 'disabled');\n\n          _this10.setLoading(buttonElement, true); // Call the button method, then re-enable the button.\n\n\n          _this10[button.method]().then(function () {\n            buttonElement.removeAttribute('disabled');\n\n            _this10.setLoading(buttonElement, false);\n          }).catch(function () {\n            buttonElement.removeAttribute('disabled');\n\n            _this10.setLoading(buttonElement, false);\n          });\n        });\n\n        buttonWrapper.appendChild(_this10[buttonProp]);\n\n        _this10.wizardNav.appendChild(buttonWrapper);\n      });\n    }\n  }, {\n    key: \"checkCurrentPageValidity\",\n    value: function checkCurrentPageValidity() {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(Wizard.prototype), \"checkValidity\", this)).call.apply(_get2, [this].concat(args));\n    }\n  }, {\n    key: \"checkPagesValidity\",\n    value: function checkPagesValidity(pages) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      var isValid = _Base.default.prototype.checkValidity.apply(this, args);\n\n      return pages.reduce(function (check, pageComp) {\n        return pageComp.checkValidity.apply(pageComp, args) && check;\n      }, isValid);\n    }\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(data, dirty) {\n      if (this.submitting) {\n        return this.checkPagesValidity(this.getPages(), data, dirty);\n      } else {\n        return this.checkCurrentPageValidity(data, dirty);\n      }\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this.wizard;\n    }\n  }, {\n    key: \"errors\",\n    get: function get() {\n      if (this.isLastPage()) {\n        var pages = this.getPages({\n          all: true\n        });\n        this.checkPagesValidity(pages, this.submission.data, true);\n        return pages.reduce(function (errors, pageComp) {\n          return errors.concat(pageComp.errors || []);\n        }, []);\n      }\n\n      return _get(_getPrototypeOf(Wizard.prototype), \"errors\", this);\n    }\n  }]);\n\n  return Wizard;\n}(_Webform2.default);\n\nexports.default = Wizard;\nWizard.setBaseUrl = _Formio.default.setBaseUrl;\nWizard.setApiUrl = _Formio.default.setApiUrl;\nWizard.setAppUrl = _Formio.default.setAppUrl;",null]}