{"remainingRequest":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/lib/RoutingManager.js","dependencies":[{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/instantsearch.js/es/lib/RoutingManager.js","mtime":1581861144650},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1571276078087},{"path":"/Users/scottjoscelyne/Desktop/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1571276072802}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START algoliasearch_helper,lodash_isEqual PURE_IMPORTS_END */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n} return target; };\nvar _createClass = /*@__PURE__*/ function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor)\n        descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n} } return function (Constructor, protoProps, staticProps) { if (protoProps)\n    defineProperties(Constructor.prototype, protoProps); if (staticProps)\n    defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n} }\nimport algoliasearchHelper from 'algoliasearch-helper';\nimport isEqual from 'lodash/isEqual';\nvar RoutingManager = /*@__PURE__*/ function () {\n    function RoutingManager() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, instantSearchInstance = _ref.instantSearchInstance, router = _ref.router, stateMapping = _ref.stateMapping;\n        _classCallCheck(this, RoutingManager);\n        this.originalConfig = null;\n        this.firstRender = true;\n        this.router = router;\n        this.stateMapping = stateMapping;\n        this.instantSearchInstance = instantSearchInstance;\n        this.originalUIState = this.stateMapping.routeToState(this.router.read());\n    }\n    _createClass(RoutingManager, [{\n            key: 'init',\n            value: function init(_ref2) {\n                var state = _ref2.state;\n                // store the initial state from the storage\n                // so that we can compare it with the state after the first render\n                // in case the searchFunction has modifyied it.\n                this.initState = this.getAllUIStates({\n                    searchParameters: state\n                });\n            }\n        }, {\n            key: 'getConfiguration',\n            value: function getConfiguration(currentConfiguration) {\n                // we need to create a REAL helper to then get its state. Because some parameters\n                // like hierarchicalFacet.rootPath are then triggering a default refinement that would\n                // be not present if it was not going trough the SearchParameters constructor\n                this.originalConfig = algoliasearchHelper({}, currentConfiguration.index, currentConfiguration).state;\n                // The content of getAllSearchParameters is destructured to return a plain object\n                return _extends({}, this.getAllSearchParameters({\n                    currentSearchParameters: this.originalConfig,\n                    uiState: this.originalUIState\n                }));\n            }\n        }, {\n            key: 'render',\n            value: function render(_ref3) {\n                var state = _ref3.state;\n                if (this.firstRender) {\n                    this.firstRender = false;\n                    this.setupRouting(state);\n                }\n            }\n        }, {\n            key: 'setupRouting',\n            value: function setupRouting(state) {\n                var _this = this;\n                var helper = this.instantSearchInstance.helper;\n                this.router.onUpdate(function (route) {\n                    var uiState = _this.stateMapping.routeToState(route);\n                    var currentUIState = _this.getAllUIStates({\n                        searchParameters: helper.state\n                    });\n                    if (isEqual(uiState, currentUIState))\n                        return;\n                    var searchParameters = _this.getAllSearchParameters({\n                        currentSearchParameters: state,\n                        instantSearchInstance: _this.instantSearchInstance,\n                        uiState: uiState\n                    });\n                    var fullHelperState = _extends({}, _this.originalConfig, searchParameters);\n                    if (isEqual(fullHelperState, searchParameters))\n                        return;\n                    helper.overrideStateWithoutTriggeringChangeEvent(searchParameters).search();\n                });\n                this.renderURLFromState = function (searchParameters) {\n                    var uiState = _this.getAllUIStates({\n                        searchParameters: searchParameters\n                    });\n                    var route = _this.stateMapping.stateToRoute(uiState);\n                    _this.router.write(route);\n                };\n                helper.on('change', this.renderURLFromState);\n                // Compare initial state and post first render state, in order\n                // to see if the query has been changed by a searchFunction\n                var firstRenderState = this.getAllUIStates({\n                    searchParameters: state\n                });\n                if (!isEqual(this.initState, firstRenderState)) {\n                    // force update the URL, if the state has changed since the initial URL read\n                    // We do this in order to make a URL update when there is search function\n                    // that prevent the search of the initial rendering\n                    // See: https://github.com/algolia/instantsearch.js/issues/2523#issuecomment-339356157\n                    var route = this.stateMapping.stateToRoute(firstRenderState);\n                    this.router.write(route);\n                }\n            }\n        }, {\n            key: 'dispose',\n            value: function dispose() {\n                if (this.renderURLFromState) {\n                    this.instantSearchInstance.helper.removeListener('change', this.renderURLFromState);\n                }\n                this.router.dispose();\n            }\n        }, {\n            key: 'getAllSearchParameters',\n            value: function getAllSearchParameters(_ref4) {\n                var currentSearchParameters = _ref4.currentSearchParameters, uiState = _ref4.uiState;\n                var widgets = this.instantSearchInstance.widgets;\n                var searchParameters = widgets.reduce(function (sp, w) {\n                    if (!w.getWidgetSearchParameters)\n                        return sp;\n                    return w.getWidgetSearchParameters(sp, {\n                        uiState: uiState\n                    });\n                }, currentSearchParameters);\n                return searchParameters;\n            }\n        }, {\n            key: 'getAllUIStates',\n            value: function getAllUIStates(_ref5) {\n                var searchParameters = _ref5.searchParameters;\n                var _instantSearchInstanc = this.instantSearchInstance, widgets = _instantSearchInstanc.widgets, helper = _instantSearchInstanc.helper;\n                var uiState = widgets.filter(function (w) {\n                    return Boolean(w.getWidgetState);\n                }).reduce(function (u, w) {\n                    return w.getWidgetState(u, {\n                        helper: helper,\n                        searchParameters: searchParameters\n                    });\n                }, {});\n                return uiState;\n            }\n            // External API's\n        }, {\n            key: 'createURL',\n            value: function createURL(state) {\n                var uiState = this.getAllUIStates({\n                    searchParameters: state\n                });\n                var route = this.stateMapping.stateToRoute(uiState);\n                return this.router.createURL(route);\n            }\n        }, {\n            key: 'onHistoryChange',\n            value: function onHistoryChange(fn) {\n                var _this2 = this;\n                var helper = this.instantSearchInstance.helper;\n                this.router.onUpdate(function (route) {\n                    var uiState = _this2.stateMapping.routeToState(route);\n                    var currentUIState = _this2.getAllUIStates({\n                        searchParameters: helper.state\n                    });\n                    if (isEqual(uiState, currentUIState))\n                        return;\n                    var searchParameters = _this2.getAllSearchParameters({\n                        currentSearchParameters: helper.state,\n                        instantSearchInstance: _this2.instantSearchInstance,\n                        uiState: uiState\n                    });\n                    var fullSearchParameters = _extends({}, _this2.originalConfig, searchParameters);\n                    fn(fullSearchParameters);\n                });\n                return;\n            }\n        }]);\n    return RoutingManager;\n}();\nexport default RoutingManager;\n",null]}